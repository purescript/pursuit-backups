{"uploader":"cakekindel","packageMeta":{"repository":{"url":"https://github.com/cakekindel/purescript-workly","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-newtype":"^v4.0.0","purescript-effect":"^v3.0.0","purescript-console":"^v5.0.0","purescript-maybe":"^v5.0.0","purescript-avar":"^v4.0.0","purescript-psci-support":"^v5.0.0","purescript-functions":"^v5.0.0"},"name":"purescript-workly","license":["Unlicense"]},"tagTime":"2021-03-18T21:43:27+0000","modules":[{"reExports":[],"name":"Effect.Aff.Link","comments":"Module containing Channels for communicating across Worker thread boundaries\n\n```purescript run\n> -- setup required to run examples\n> import Effect.Aff.Link\n> import Effect (Effect)\n> import Effect.Unsafe (unsafePerformEffect)\n> import Effect.Aff (Aff)\n> import Test.Deasync (unsafeBlockOnAff)\n> runAff = unsafeBlockOnAff\n> runEff = unsafePerformEffect\n```\n","declarations":[{"children":[{"comments":null,"title":"Link","info":{"arguments":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["up",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"up"}]},{"annotation":[],"tag":"RCons","contents":["down",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]},{"annotation":[],"tag":"REmpty"}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A 2-way communication link (uplink & downlink)\nfor communicating to & from some separate context (e.g. a Worker thread)\n","title":"Link","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["up",null],["dn",null]]},"sourceSpan":{"start":[42,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[42,65]}},{"children":[],"comments":"Send a message in the uplink channel of a `Link`.\n\n```purescript run\n> sendExUp :: Channel String\n  sendExUp = runAff newChannel\n> sendExDown :: Channel Unit\n  sendExDown = runAff newChannel\n> sendEx = Link {up: sendExUp, down: sendExDown}\n> runAff $ send \"here's a message!\" sendEx\nunit\n> -- now whoever's upstream will get our message\n```\n","title":"send","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["u",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"u"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Link"]},{"annotation":[],"tag":"TypeVar","contents":"u"}]},{"annotation":[],"tag":"TypeWildcard","contents":null}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[56,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[56,39]}},{"children":[],"comments":"Blocks until a message is available in the downlink channel of a `Link`.\nOnce a message is available, clears the downlink channel and yields the message.\n\n```purescript run\n> recvExUp :: Channel Unit\n  recvExUp = runAff newChannel\n> recvExDown :: Channel String\n  recvExDown = runAff newChannel\n> recvEx = Link {up: recvExUp, down: recvExDown}\n> -- emulate a message being sent by someone upstream\n> runAff $ put \"hello!\" recvExDown\nunit\n> runAff $ recv recvEx\n\"hello!\"\n```\n","title":"recv","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Link"]},{"annotation":[],"tag":"TypeWildcard","contents":null}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},null]}},"sourceSpan":{"start":[74,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[74,31]}},{"children":[],"comments":"A one-way channel storing some mutable state `a`,\ncapable of performing side-effects on update (such as `Worker#postMessage`).\n\nIs very similar to the `AVar` structure from `purescript-avar`,\nbut allows attaching change listeners which allows JS-style event listeners\nto be used as data sources.\n\nCan be constructed with `newChannelFromCb`, `newChannel`, `newChannelHot`.\n","title":"Channel","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[85,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[86,50]}},{"children":[],"comments":"Get a snapshot of the value in a `Channel`directional channel.\n\nSimilar to `read`, but returns `Nothing` if there is no\nvalue in the channel, rather than blocking until a value exists.\n\n```purescript run\n> snapEx :: Channel String\n  snapEx = runAff newChannel\n> runAff $ put \"testing\" snapEx\nunit\n> runAff $ snap snapEx\n(Just \"testing\")\n> runAff $ take snapEx\n\"testing\"\n> runAff $ snap snapEx\nNothing\n```\n","title":"snap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[218,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[218,40]}},{"children":[],"comments":"Discard any value currently in the `Channel` and insert\na new one.\n\nThis will notify all listeners of an update, triggering\nany necessary side-effects (such as `Worker#postMessage`)\n\nWait for a value to be inserted into the `Channel`,\nthen yield it and empty the `Channel`.\n\n```purescript run\n> putEx :: Channel String\n  putEx = runAff $ newChannel\n> runAff $ snap putEx\nNothing\n> runAff $ put \"testing\" putEx\nunit\n> runAff $ snap putEx\n(Just \"testing\")\n> runAff $ put \"testing2\" putEx\nunit\n> runAff $ read putEx\n\"testing2\"\n```\n","title":"put","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[244,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[244,39]}},{"children":[],"comments":"Wait for a value to be inserted into a channel,\nthen yield it without modifying the state.\n\n```purescript run\n> readEx :: Channel Int\n  readEx = runAff newChannel\n  -- danger!\n  --   reading now will block forever since nobody will\n  --   `put` a value in the channel!\n> runAff $ put 123 readEx\nunit\n> runAff $ read readEx\n123\n> runAff $ read readEx\n123\n```\n","title":"read","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[180,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[180,32]}},{"children":[],"comments":"Wait for a value to be inserted into the `Channel`,\nthen yield it and empty the `Channel`.\n\n```purescript run\n> takeEx :: Channel Int\n  takeEx = runAff newChannel\n> runAff $ put 999 takeEx\nunit\n> runAff $ snap takeEx\n(Just 999)\n> runAff $ take takeEx\n999\n> runAff $ snap takeEx\nNothing\n```\n","title":"take","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[198,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[198,32]}},{"children":[],"comments":"Create a new empty one-way channel, with empty initial state.\n\nCalls to `read` or `take` will block until a value is inserted.\n\n```purescript run\n> numChannel :: Channel Int\n  numChannel = runAff newChannel\n> runAff $ put 12 numChannel\nunit\n> runAff $ read numChannel\n12\n```\n","title":"newChannel","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},null]}},"sourceSpan":{"start":[105,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[105,35]}},{"children":[],"comments":"Create a one-way channel that invokes some callback when\na message is put into the channel.\n\n```purescript run\n> import Effect.Ref as Ref\n> -- set up a piece of mutable state to demo performing\n> -- side-effects on `put`\n> didPut = runEff $ Ref.new false\n> setDidPut :: String -> Effect Unit\n  setDidPut _ = Ref.modify_ (const true) didPut\n> onPutEx :: Channel String\n  onPutEx = runAff $ newChannelHot setDidPut\n> runAff $ put \"testing\" onPutEx\nunit\n> runEff $ Ref.read didPut\ntrue\n```\n","title":"newChannelHot","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"ImpureCb"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[159,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[159,52]}},{"children":[],"comments":"Create a one-way channel that sources its data from an asynchronous (JS) callback.\n\n```purescript run\n> import Effect.Ref (Ref)\n> import Effect.Ref as R\n> -- create a mutable ref to mimic JS code\n  -- attaching a callback to an async source\n> cbRef :: Ref (String -> Effect Unit)\n  cbRef = runEff $ R.new \\_ -> mempty\n> setCb = \\cb -> R.modify_ (const cb) cbRef\n> -- create a channel that gives our \"JS\" code\n  -- a callback to invoke\n> cbEx = runAff $ newChannelFromCb setCb\n> -- invoke the callback\n> cb = runEff $ R.read cbRef\n> runEff $ cb \"hello\"\nunit\n> runAff $ snap cbEx\n(Just \"hello\")\n```\n","title":"newChannelFromCb","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"AttachImpureCb"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Channel"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[133,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[133,61]}},{"children":[],"comments":null,"title":"ImpureCb","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[110,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[110,35]}},{"children":[],"comments":null,"title":"AttachImpureCb","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"ImpureCb"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[111,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Link.purs","end":[111,50]}}]},{"reExports":[],"name":"Effect.Aff.Worker.Link","comments":null,"declarations":[{"children":[],"comments":"Construct bi-directional channels for\na worker to be able to communicate with the parent thread.\n\n```purs\nmodule GreetWorker where\n\nimport Prelude\n\nimport Effect.Worker (Worker)\nimport Effect.Aff (liftAff)\nimport Effect.Aff.Worker (parentChannels)\nimport Effect.Aff.Worker.Link as Link\nimport Control.Monad.Rec.Class (forever)\n\ndata GreetWorker = Worker String String\n\nmain :: Effect Unit\nmain = liftAff $ forever do\n  link <- parentLink :: Aff (Link.Link String String)\n\n  -- wait for parent to send us a name\n  name <- Link.recv link\n\n  -- send \"hello, name!\" to parent thread\n  let msg = \"Hello, \" <> name <> \"!\"\n  _ <- Link.send msg link\n\n  mempty\n```\n","title":"parentLink","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["dn",{"annotation":[],"tag":"ForAll","contents":["up",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Link"]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]},{"annotation":[],"tag":"TypeVar","contents":"up"}]}}]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Worker/Link.purs","end":[45,45]}},{"children":[],"comments":"Construct a communication link for a Worker,\nallowing 2-way communication with a worker thread.\n\n```purescript\nmodule Main where\n\nimport Prelude\n\nimport Effect.Console (log)\nimport Effect.Aff (liftAff)\nimport Effect.Aff.Worker.Link (workerLink)\nimport Effect.Aff.Link as Link\nimport Control.Monad.Rec.Class (forever)\nimport GreetWorker (GreetWorker)\n\nforeign import spawnGreetWorker :: Effect GreetWorker\n\nmain :: Effect Unit\nmain = liftAff $ do\n  worker <- spawnGreetWorker\n  link   <- workerLink worker\n\n  Link.send \"Harry\" link\n  greeting <- Link.recv link\n\n  liftEffect $ log greeting\n  mempty\n```\n","title":"workerLink","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["dn",{"annotation":[],"tag":"ForAll","contents":["up",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Worker"],"Worker"]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]},{"annotation":[],"tag":"TypeVar","contents":"up"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff","Link"],"Link"]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]},{"annotation":[],"tag":"TypeVar","contents":"up"}]}}]}]},null]},null]}},"sourceSpan":{"start":[80,1],"name":"/home/orion/src/purescript-workly/src/Effect/Aff/Worker/Link.purs","end":[80,61]}}]},{"reExports":[],"name":"Effect.Worker","comments":"Module defining the `Worker` type and\na low-level API for interacting with worker threads.\n","declarations":[{"children":[{"comments":null,"title":"showWorker","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Worker"],"Worker"]},{"annotation":[],"tag":"TypeVar","contents":"up"}]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]}]}},"sourceSpan":{"start":[26,1],"name":"/home/orion/src/purescript-workly/src/Effect/Worker.purs","end":[26,67]}}],"comments":"Type binding for the `Worker` class, parameterized over\nthe request (`up`) and response (`dn`) object types.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/Worker)\n","title":"Worker","info":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"declType":"externData"},"sourceSpan":{"start":[24,1],"name":"/home/orion/src/purescript-workly/src/Effect/Worker.purs","end":[24,51]}},{"children":[],"comments":"Low-level binding for `Worker#postMessage`\n\nThis will cause a listener attached in the child module\n(by way of `Worker.Child.onMsg`) to fire with this message.\n\nIf possible, it is recommended to use `Effect.Aff.Worker.Channel`\ninstead of this low-level API.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/Worker)\n\n```purescript\nimport Effect.Worker (Worker, sendMsg)\n\nworker :: Worker String _\n\nsendMsg \"hello\" worker\n```\n","title":"sendMsg","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["up",{"annotation":[],"tag":"ForAll","contents":["dn",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Worker"],"Worker"]},{"annotation":[],"tag":"TypeVar","contents":"up"}]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"up"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"/home/orion/src/purescript-workly/src/Effect/Worker.purs","end":[45,54]}},{"children":[],"comments":"Low-level binding for attaching a listener to `Worker#onmessage`.\n\nAny previously attached listener will be removed.\n\nIf possible, it is recommended to use `Effect.Aff.Worker.Channel`\ninstead of this low-level API.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)\n\n```purescript\nimport Effect.Worker (Worker, onMsg)\nimport Effect.Console (log)\n\nworker :: Worker _ String\n\nonMsg (\\m -> log m) worker\n```\n","title":"onMsg","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["up",{"annotation":[],"tag":"ForAll","contents":["dn",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Worker"],"Worker"]},{"annotation":[],"tag":"TypeVar","contents":"up"}]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Web","Event","Message"],"MessageEvent"]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[65,1],"name":"/home/orion/src/purescript-workly/src/Effect/Worker.purs","end":[65,82]}}]},{"reExports":[],"name":"Effect.Worker.Child","comments":"Module defining the `Worker` type and\na low-level API for interacting with parent threads\n*from* the worker module.\n","declarations":[{"children":[],"comments":"Internal binding for the `postMessage` function\navailable in the global scope of web worker modules.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)\n\n```purescript\nimport Effect.Worker (Worker, sendMsg)\n\nworker :: Worker String _\n\nsendMsg \"hello\" worker\n```\n","title":"sendMsg","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["up",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"up"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[31,1],"name":"/home/orion/src/purescript-workly/src/Effect/Worker/Child.purs","end":[31,35]}},{"children":[],"comments":"Internal binding for attaching a listener to the `onmessage` property\nof the global scope of web worker modules.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage)\n\n```purescript\nimport Effect.Worker (Worker, sendMsg)\n\nworker :: Worker String _\n\nonMsg (\\(m :: String) -> log m) worker\n```\n","title":"onMsg","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["dn",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Web","Event","Message"],"MessageEvent"]},{"annotation":[],"tag":"TypeVar","contents":"dn"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[46,1],"name":"/home/orion/src/purescript-workly/src/Effect/Worker/Child.purs","end":[46,63]}}]},{"reExports":[],"name":"Web.Event.Message","comments":null,"declarations":[{"children":[],"comments":"A `MessageEvent` fired by calls to `Worker#postMessage`\nor `DedicatedWorkerGlobalScope#postMessage`.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)\n","title":"MessageEvent","info":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"/home/orion/src/purescript-workly/src/Web.Event.Message.purs","end":[11,49]}},{"children":[],"comments":null,"title":"messageData","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Web","Event","Message"],"MessageEvent"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[13,1],"name":"/home/orion/src/purescript-workly/src/Web.Event.Message.purs","end":[13,46]}},{"children":[],"comments":null,"title":"data_","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Function","Uncurried"],"Fn3"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Web","Event","Message"],"MessageEvent"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},null]}},"sourceSpan":{"start":[16,1],"name":"/home/orion/src/purescript-workly/src/Web.Event.Message.purs","end":[19,43]}}]}],"resolvedDependencies":{"purescript-exceptions":"5.0.0","purescript-newtype":"4.0.0","purescript-effect":"3.0.0","purescript-ordered-collections":"2.0.0","purescript-control":"5.0.0","purescript-console":"5.0.0","purescript-either":"5.0.0","purescript-profunctor":"5.0.0","purescript-arrays":"6.0.0","purescript-maybe":"5.0.0","purescript-type-equality":"4.0.0","purescript-exists":"5.0.0","purescript-distributive":"5.0.0","purescript-unfoldable":"5.0.0","purescript-invariant":"5.0.0","purescript-lazy":"5.0.0","purescript-aff":"6.0.0","purescript-foldable-traversable":"5.0.0","purescript-tailrec":"5.0.0","purescript-avar":"4.0.0","purescript-gen":"3.0.0","purescript-functors":"4.1.0","purescript-prelude":"5.0.0","purescript-st":"5.0.0","purescript-bifunctors":"5.0.0","purescript-nonempty":"6.0.0","purescript-contravariant":"5.0.0","purescript-unsafe-coerce":"5.0.0","purescript-refs":"5.0.0","purescript-integers":"5.0.0","purescript-orders":"5.0.0","purescript-const":"5.0.0","purescript-transformers":"5.0.0","purescript-numbers":"8.0.0","purescript-math":"3.0.0","purescript-enums":"5.0.0","purescript-psci-support":"5.0.0","purescript-parallel":"5.0.0","purescript-tuples":"6.0.0","purescript-partial":"3.0.0","purescript-identity":"5.0.0","purescript-safe-coerce":"1.0.0","purescript-lists":"6.0.0","purescript-datetime":"5.0.0","purescript-functions":"5.0.0"},"version":"0.1.1","github":["cakekindel","purescript-workly"],"versionTag":"v0.1.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.Functor.Flip":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Control.Monad.Identity.Trans":"purescript-transformers","Data.Monoid.Generic":"purescript-prelude","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Costar":"purescript-functors","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Bounded.Generic":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-prelude","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.Enum.Generic":"purescript-enums","Data.DateTime.Gen":"purescript-datetime","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Number":"purescript-numbers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.List.Internal":"purescript-lists","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.List.Trans":"purescript-transformers","Data.Ord.Generic":"purescript-prelude","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Number.Format":"purescript-numbers","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Number.Approximate":"purescript-numbers","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Data.Tuple":"purescript-tuples","Data.Functor.Clown":"purescript-functors","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Functor.Product2":"purescript-functors","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor.App":"purescript-functors","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.Set":"purescript-ordered-collections","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Data.Comparison":"purescript-contravariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Control.Comonad.Env.Class":"purescript-transformers","Effect.Aff.AVar":"purescript-avar","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Effect.AVar":"purescript-avar","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.Eq.Generic":"purescript-prelude","Data.DivisionRing":"purescript-prelude","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Math":"purescript-math","Data.Set.NonEmpty":"purescript-ordered-collections","Control.Comonad.Trans.Class":"purescript-transformers","Control.Plus":"purescript-control","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Data.Monoid.Multiplicative":"purescript-prelude","Data.Functor.Joker":"purescript-functors","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Generic.Rep":"purescript-prelude","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.Semiring.Generic":"purescript-prelude","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Control.Monad.Writer":"purescript-transformers","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Profunctor.Choice":"purescript-profunctor","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.14.0"}