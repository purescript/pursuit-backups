{"uploader":"kritzcreek","packageMeta":{"repository":{"url":"https://github.com/kritzcreek/purescript-dynamic-buffer.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-effect":"^v2.0.1","purescript-arraybuffer-types":"^v2.0.0","purescript-refs":"^v4.1.0"},"name":"purescript-dynamic-buffers","license":["MPL-2.0"]},"tagTime":"2020-12-16T13:41:08+0000","modules":[{"reExports":[],"name":"DynamicBuffer","comments":null,"declarations":[{"children":[],"comments":"A growable Buffer type for binary data\n","title":"DBuffer","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[34,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[41,4]}},{"children":[],"comments":"A byte-offset into a Buffer. Just an alias for documentation\npurposes.\n","title":"Offset","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[31,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[31,18]}},{"children":[],"comments":"Creates a new `DBuffer` with the given initial capacity.\n\nPicking a capacity in the order of magnitude you expect to write\nwill reduce the overall amount of allocation.\n","title":"create","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]}]}},"sourceSpan":{"start":[47,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[47,32]}},{"children":[],"comments":"Writes a single byte into the DBuffer\n\nThrows an exception if you pass a value that's not within\n(0..255)\n","title":"addByte","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":{"start":[59,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[59,41]}},{"children":[],"comments":"Adds the contents of the second buffer to the first. The contents\nare copied, so subsequent modifications to the second buffer\ndon't affect the first.\n\n```purescript\nimport Prelude\n\nimport DynamicBuffer as DBuffer\nimport Debug.Trace as Debug\n\nmain = do\n  b1 <- DBuffer.create 8\n  b2 <- DBuffer.create 8\n  DBuffer.addByte b1 10\n  DBuffer.addByte b2 20\n  DBuffer.addByte b2 30\n  DBuffer.addBuffer b1 b2\n\n  Debug.traceM =<< DBuffer.size b1 -- 3\n  Debug.traceM =<< DBuffer.contents b1 -- Uint8Array(3) [ 10, 20, 30 ]\n```\n","title":"addBuffer","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":{"start":[93,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[93,47]}},{"children":[],"comments":"Mutates the buffer at the given offset.\n\nThrows an exception if you pass an offset that's not within the\ncurrent Buffer's size. _Not capacity_.\n\nThrows an exception if you pass a value that's not within\n(0..255)\n","title":"setByte","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"Offset"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}},"sourceSpan":{"start":[149,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[149,51]}},{"children":[],"comments":"Creates a DBuffer that contains the Utf8 encoding of the given\nString.\n","title":"fromUtf8","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]}]}},"sourceSpan":{"start":[110,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[110,37]}},{"children":[],"comments":"Extracts the contents of this DBuffer\n","title":"contents","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"Uint8Array"]}]}]}},"sourceSpan":{"start":[120,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[120,41]}},{"children":[],"comments":"Extracts the contents of this DBuffer without copying.\n\nCareful! Modifying the contents of the DBuffer afterwards will\nmodify the returned Uint8Array in place\n","title":"unsafeContents","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"Uint8Array"]}]}]}},"sourceSpan":{"start":[132,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[132,47]}},{"children":[],"comments":"Returns the current size of the DBuffer. _Not_ its capacity.\n","title":"size","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[139,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[139,30]}},{"children":[],"comments":"Displays the contents of the DBuffer for debugging purposes.\nDon't use this in \"production\", it's not referentially\ntransparent.\n\n```purescript\nimport Prelude\n\nimport DynamicBuffer as DBuffer\nimport Effect.Console as Console\n\nmain = do\n  b <- DBuffer.create 8\n  DBuffer.addByte b 10\n  DBuffer.addByte b 20\n  DBuffer.addByte b 30\n\n  Console.log (DBuffer.debugToString b) -- [0xA, 0x14, 0x1E]\n```\n","title":"debugToString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["DynamicBuffer"],"DBuffer"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[178,1],"name":"C:\\Users\\creek\\code\\purescript-dynamic-buffer\\src\\DynamicBuffer.purs","end":[178,35]}}]}],"resolvedDependencies":{"purescript-effect":"2.0.1","purescript-arraybuffer-types":"2.0.0","purescript-prelude":"4.1.1","purescript-refs":"4.1.0"},"version":"2.0.0","github":["kritzcreek","purescript-dynamic-buffer"],"versionTag":"v2.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Effect.Uncurried":"purescript-effect","Effect":"purescript-effect","Data.Ord":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Effect.Unsafe":"purescript-effect","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.ArrayBuffer.Types":"purescript-arraybuffer-types","Data.Eq":"purescript-prelude","Data.Monoid.Disj":"purescript-prelude","Data.Void":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Endo":"purescript-prelude","Control.Applicative":"purescript-prelude","Record.Unsafe":"purescript-prelude"},"compilerVersion":"0.13.3"}