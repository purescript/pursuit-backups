{"uploader":"joneshf","packageMeta":{"repository":{"url":"https://github.com/joneshf/purescript-option.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-aff":">= 5.0.0 < 6","purescript-foldable-traversable":">= 4.0.0 < 5.0.0","purescript-spec":">= 4.0.0 < 5","purescript-psci-support":">= 4.0.0 < 5","purescript-datetime":">= 3.0.0 < 5.0.0"},"authors":[{"email":"jones3.hardy@gmail.com","name":"Hardy Jones"}],"dependencies":{"purescript-either":">= 1.0.0 < 5.0.0","purescript-profunctor":">= 3.0.0 < 5.0.0","purescript-maybe":">= 1.0.0 < 5.0.0","purescript-type-equality":">= 1.0.0 < 4.0.0","purescript-argonaut-core":">= 4.0.0 < 6.0.0","purescript-foreign-object":">= 1.0.0 < 3.0.0","purescript-codec-argonaut":">= 2.0.0 < 8.0.0","purescript-codec":">= 2.0.0 < 4.0.0","purescript-prelude":">= 4.0.0 < 5.0.0","purescript-unsafe-coerce":">= 1.0.0 < 5.0.0","purescript-argonaut-codecs":">= 7.0.0 < 8.0.0","purescript-record":">= 1.0.0 < 3.0.0","purescript-transformers":">= 3.0.0 < 5.0.0","purescript-simple-json":">= 1.0.0 < 8.0.0","purescript-tuples":">= 4.0.0 < 6.0.0","purescript-foreign":">= 5.0.0 < 6.0.0","purescript-lists":">= 4.0.0 < 6.0.0"},"name":"purescript-option","license":["MIT"],"description":"Safe option handling"},"tagTime":"2020-10-05T02:50:44+0000","modules":[{"reExports":[],"name":"Option","comments":"There are a few different data types that encapsulate ideas in programming.\n\nRecords capture the idea of a collection of key/value pairs where every key and value exist.\nE.g. `Record (foo :: Boolean, bar :: Int)` means that both `foo` and `bar` exist and with values all of the time.\n\nVariants capture the idea of a collection of key/value pairs where exactly one of the key/value pairs exist.\nE.g. `Data.Variant.Variant (foo :: Boolean, bar :: Int)` means that either only `foo` exists with a value or only `bar` exists with a value, but not both at the same time.\n\nOptions capture the idea of a collection of key/value pairs where any key and value may or may not exist.\nE.g. `Option.Option (foo :: Boolean, bar :: Int)` means that either only `foo` exists with a value, only `bar` exists with a value, both `foo` and `bar` exist with values, or neither `foo` nor `bar` exist.\n\nThe distinction between these data types means that we can describe problems more accurately.\nOptions are typically what you find in dynamic languages or in weakly-typed static languages.\nTheir use cases range from making APIs more flexible to interfacing with serialization formats to providing better ergonomics around data types.\n\nThese data types are all specific to the PureScript language.\nDifferent data types exist in other languages that combine some of these ideas.\nIn many languages records are a combination of both PureScript-style records and PureScript-style options.\nE.g. `Option.Record (foo :: Boolean) (bar :: Int)` means that `foo` exists with a value all of the time, and either `bar` exists with a value or `bar` doesn't exist with a value.\n\nOther languages might signify optional fields with a question mark.\nE.g. In TypeScript, the previous example would be `{ foo: boolean; bar?: number }`\n\nThis is different from a required field with an optional value.\nIn PureScript, we might signify that by using: `Record (foo :: Boolean, bar :: Data.Maybe.Maybe Int)`.\nIn TypeScript, we might signify that by using: `{ foo: boolean; bar: number | null }`\n","declarations":[{"children":[{"comments":"This instance ignores keys that do not exist in the given JSON object.\n\nIf a key does not exist in the JSON object, it will not be added to the `Option _`.\n\nIf a key does exists in the JSON object but the value cannot be successfully decoded, it will fail with an error.\n\nIf a key does exists in the JSON object and the value can be successfully decoded, it will be added to the `Option _`.\n","title":"decodeJsonOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"DecodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode","Class"],"DecodeJson"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[166,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[176,78]}},{"comments":"This instance ignores keys that do not exist.\n\nIf a key does not exist in the given `Option _`, it is not added to the JSON object.\n\nIf a key does exists in the given `Option _`, it encodes it like normal and adds it to the JSON object.\n","title":"encodeJsonOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"EncodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode","Class"],"EncodeJson"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[183,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[191,100]}},{"comments":null,"title":"eqOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"EqOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[193,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[198,38]}},{"comments":null,"title":"ordOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"OrdOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[200,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[205,48]}},{"comments":"This instance ignores keys that do not exist in the given `Foreign`.\n\nIf a key does not exist in the `Foreign`, it will not be added to the `Option _`.\n\nIf a key does exists in the `Foreign` but the value cannot be successfully read, it will fail with an error.\n\nIf a key does exists in the `Foreign` and the value can be successfully read, it will be added to the `Option _`.\n","title":"readForeignOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ReadForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Simple","JSON"],"ReadForeign"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[214,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[222,50]}},{"comments":null,"title":"showOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ShowOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[224,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[249,18]}},{"comments":"This instance ignores keys that do not exist.\n\nIf a key does not exist in the given `Option _`, it is not added to the `Foreign`.\n\nIf a key does exists in the given `Option _`, it writes it like normal and adds it to the `Foreign`.\n","title":"writeForeignOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"WriteForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Simple","JSON"],"WriteForeign"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[256,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[264,55]}}],"comments":"A collection of key/value pairs where any key and value may or may not exist.\nE.g. `Option (foo :: Boolean, bar :: Int)` means that either only `foo` exists with a value, only `bar` exists with a value, both `foo` and `bar` exist with values, or neither `foo` nor `bar` exist.\n","title":"Option","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["row",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]]},"sourceSpan":{"start":[151,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[152,49]}},{"children":[{"comments":null,"title":"eqRecordRequiredOptional","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[274,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[278,32]}},{"comments":null,"title":"ordRecordRequiredOptional","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[280,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[284,33]}},{"comments":"For required fields:\n\nIf a key does not exist in the JSON object, it will fail with an error.\n\nIf a key does exists in the JSON object but the value cannot be successfully decoded, it will fail with an error.\n\nIf a key does exists in the JSON object and the value can be successfully decoded, it will be added to the `Option.Record _ _`.\n\nFor optional fields:\n\nThis instance ignores keys that do not exist in the given JSON object.\n\nIf a key does not exist in the JSON object, it will not be added to the `Option.Record _ _`.\n\nIf a key does exists in the JSON object but the value cannot be successfully decoded, it will fail with an error.\n\nIf a key does exists in the JSON object and the value can be successfully decoded, it will be added to the `Option.Record _ _`.\n","title":"decodeJsonRecordRequiredOptional","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Argonaut","Decode","Class"],"DecodeJson"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Argonaut","Decode","Class"],"DecodeJson"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode","Class"],"DecodeJson"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[303,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[321,12]}},{"comments":"For required fields:\n\nEvery key in the given `Option.Record _ _` is encoded like normal and added to the JSON object.\n\nFor optional fields:\n\nThis instance ignores keys that do not exist.\n\nIf a key does not exist in the given `Option.Record _ _`, it is not added to the JSON object.\n\nIf a key does exists in the given `Option.Record _ _`, it encodes it like normal and adds it to the JSON object.\n","title":"encodeJsonRecordRequiredOptional","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Argonaut","Encode","Class"],"GEncodeJson"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"requiredList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"EncodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optionalList"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optional"},{"annotation":[],"tag":"TypeVar","contents":"optionalList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"requiredList"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode","Class"],"EncodeJson"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[334,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[361,46]}},{"comments":"For required fields:\n\nIf a key does not exist in the `Foreign.Foreign`, it will fail with an error.\n\nIf a key does exists in the `Foreign.Foreign` but the value cannot be successfully read, it will fail with an error.\n\nIf a key does exists in the `Foreign.Foreign` and the value can be successfully read, it will be added to the `Option.Record _ _`.\n\nFor optional fields:\n\nThis instance ignores keys that do not exist in the given `Foreign.Foreign`.\n\nIf a key does not exist in the `Foreign.Foreign`, it will not be added to the `Option.Record _ _`.\n\nIf a key does exists in the `Foreign.Foreign` but the value cannot be successfully read, it will fail with an error.\n\nIf a key does exists in the `Foreign.Foreign` and the value can be successfully read, it will be added to the `Option.Record _ _`.\n","title":"readForeignRecordRequiredOptional","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"ReadForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"ReadForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Simple","JSON"],"ReadForeign"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[380,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[396,8]}},{"comments":null,"title":"showRecord","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Show"],"ShowRecordFields"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"requiredList"},{"annotation":[],"tag":"TypeVar","contents":"required"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optional"},{"annotation":[],"tag":"TypeVar","contents":"optionalList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"requiredList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ShowOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optionalList"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[398,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[439,46]}},{"comments":"For required fields:\n\nEvery key in the given `Option.Record _ _` is written like normal and added to the `Foreign.Foreign`.\n\nFor optional fields:\n\nThis instance ignores keys that do not exist.\n\nIf a key does not exist in the given `Option.Record _ _`, it is not added to the `Foreign`.\n\nIf a key does exists in the given `Option.Record _ _`, it writes it like normal and adds it to the `Foreign.Foreign`.\n","title":"writeForeignRecordRequiredOptional","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"WriteForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"WriteForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Simple","JSON"],"WriteForeign"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[452,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[477,63]}}],"comments":"A combination of both language-level records and options.\nE.g. `Option.Record (foo :: Boolean) (bar :: Int)` means that `foo` exists with a value all of the time, and either `bar` exists with a value or `bar` doesn't exist with a value.\n","title":"Record","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["required",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["optional",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]]},"sourceSpan":{"start":[268,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[272,4]}},{"children":[],"comments":"Manipulates the values of an option.\n\nIf the field exists in the option, the given function is applied to the value.\n\nIf the field does not exist in the option, there is no change to the option.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.alter { bar: \\_ -> Data.Maybe.Just 41 } someOption\n```\n","title":"alter","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"Alter"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2253,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2258,16]}},{"children":[],"comments":"The given `Record record` must have no more fields than the expected `Option _`.\n\nE.g. The following definitions are valid.\n```PureScript\noption1 :: Option.Option ( foo :: Boolean, bar :: Int )\noption1 = Option.fromRecord { foo: true, bar: 31 }\n\noption2 :: Option.Option ( foo :: Boolean, bar :: Int )\noption2 = Option.fromRecord {}\n```\n\nHowever, the following definitions are not valid as the given records have more fields than the expected `Option _`.\n```PureScript\n-- This will not work as it has the extra field `baz`\noption3 :: Option.Option ( foo :: Boolean, bar :: Int )\noption3 = Option.fromRecord { foo: true, bar: 31, baz: \"hi\" }\n\n-- This will not work as it has the extra field `qux`\noption4 :: Option.Option ( foo :: Boolean, bar :: Int )\noption4 = Option.fromRecord { qux: [] }\n```\n","title":"fromRecord","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"FromRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"REmpty"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}]},null]},null]}},"sourceSpan":{"start":[2368,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2372,18]}},{"children":[],"comments":"The given `Record record` must have no more fields than expected.\n\nE.g. The following definitions are valid.\n```PureScript\noption1 ::\n  Record\n    ( optional :: Option.Option ( foo :: Boolean, bar :: Int )\n    , required :: Record ()\n    )\noption1 = Option.fromRecordWithRequired { foo: true, bar: 31 }\n\noption2 ::\n  Record\n    ( optional :: Option.Option ( foo :: Boolean, bar :: Int )\n    , required :: Record ()\n    )\noption2 = Option.fromRecordWithRequired {}\n\noption3 ::\n  Record\n    ( optional :: Option.Option ( bar :: Int )\n    , required :: Record ( foo :: Boolean )\n    )\noption3 = Option.fromRecordWithRequired { foo: true }\n```\n\nHowever, the following definitions are not valid as the given records have more fields than the expected `Option _`.\n```PureScript\n-- This will not work as it has the extra field `baz`\noption3 ::\n  Record\n    ( optional :: Option.Option ( foo :: Boolean, bar :: Int )\n    , required :: Record ()\n    )\noption3 = Option.fromRecordWithRequired { foo: true, bar: 31, baz: \"hi\" }\n\n-- This will not work as it has the extra field `qux`\noption4 ::\n  Record\n    ( optional :: Option.Option ( foo :: Boolean, bar :: Int )\n    , required :: Record ()\n    )\noption4 = Option.fromRecordWithRequired { qux: [] }\n```\n\nAnd, this definition is not valid as the given record lacks the required fields.\n```PureScript\noption5 ::\n  Record\n    ( optional :: Option.Option ( foo :: Boolean, bar :: Int )\n    , required :: Record ( baz :: String )\n    )\noption5 = Option.fromRecordWithRequired { foo: true, bar: 31 }\n```\n\nThis is an alias for `fromRecord'` so the documentation is a bit clearer.\n","title":"fromRecordWithRequired","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["required",{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"FromRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","TypeError"],"Warn"],"constraintArgs":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Above"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"annotation":[],"tag":"TypeLevelString","contents":"`Option.fromRecordWithRequired` is deprecated and will be removed in v6.0.0."}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"annotation":[],"tag":"TypeLevelString","contents":"Use `Option.recordFromRecord` instead."}]}}]}}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["optional",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]},{"annotation":[],"tag":"RCons","contents":["required",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2434,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2444,34]}},{"children":[],"comments":"Removes a key from an option\n\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.fromRecord { foo: true, bar: 31 }\n\nanotherOption :: Option.Option ( bar :: Int )\nanotherOption = Option.delete (Data.Symbol.SProxy :: _ \"foo\") someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"delete","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[2302,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2309,16]}},{"children":[],"comments":"Removes the given key/values from an option\n\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.fromRecord { foo: true, bar: 31 }\n\nanotherOption :: Option.Option ( bar :: Int )\nanotherOption = Option.delete { foo: unit } someOption\n```\n","title":"delete'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"Delete"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2324,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2329,16]}},{"children":[],"comments":"Creates an option with no key/values that matches any type of option.\n\nThis can be useful as a starting point for an option that is later built up.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.set' { bar: 31 } Option.empty\n```\n","title":"empty","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},null]}},"sourceSpan":{"start":[2344,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2344,38]}},{"children":[],"comments":"Attempts to fetch the value at the given key from an option.\n\nIf the key exists in the option, `Just _` is returned.\n\nIf the key does not exist in the option, `Nothing` is returned.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nbar :: Data.Maybe.Maybe Int\nbar = Option.get (Data.Symbol.SProxy :: _ \"bar\") someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"get","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[2473,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2479,25]}},{"children":[],"comments":"Attempts to fetch the values from the given option.\n\nThe behavior of what's returned depends on what the value is for each field in the record.\n\nIf the value in the record is of type `Maybe a -> b` ,\nthat function is run on the result of finding the field in the option.\n\nIf the value in the record is of type `Maybe a` and the type of the field in the option is `a`,\nthe result is `Just _` if the value exists in the option and whatever the provided `Maybe a` was otherwise.\n\nIf the value in the record is of type `a` and the type of the field in the option is `a`,\nthe result is whatever the value is in the option if it exists and whatever the provided `a` was otherwise.\n\nThese behaviors allow handling different fields differently without jumping through hoops to get the values from an option.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int, qux :: String )\nsomeOption = Option.empty\n\n-- Since `someOption` is empty,\n-- this will have a shape like:\n-- { foo: false, bar: \"not set\", qux: Data.Maybe.Nothing }\nsomeRecord :: Record ( foo :: Boolean, bar :: String, qux :: Data.Maybe.Maybe String )\nsomeRecord =\n  Option.get'\n    { foo: false\n    , bar: \\x -> case x of\n        Data.Maybe.Just x -> if x > 0 then \"positive\" else \"non-positive\"\n        Data.Maybe.Nothing -> \"not set\"\n    , qux: Data.Maybe.Nothing\n    }\n    someOption\n```\n","title":"get'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record'",{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"Get"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2519,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2524,21]}},{"children":[],"comments":"Attempts to fetch all of the values from all of the keys of an option.\n\nIf every key exists in the option, the record of values is returned in `Just _`.\n\nIf any key does not exist in the option, `Nothing` is returned.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\n-- This will be `Nothing` because the key `foo` does not exist in the option.\nbar :: Data.Maybe.Maybe (Record ( foo :: Boolean, bar :: Int))\nbar = Option.getAll someOption\n\n-- This will be `Just { foo: true, bar: 31 }` because all keys exist in the option.\nbar :: Data.Maybe.Maybe (Record ( foo :: Boolean, bar :: Int))\nbar = Option.getAll (Option.insert (Data.Symbol.SProxy :: _ \"foo\") true someOption)\n```\n","title":"getAll","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"GetAll"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[2546,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2550,40]}},{"children":[],"comments":"Attempts to fetch the value at the given key from an option falling back to the default.\n\nIf the key exists in the option, `Just _` is returned.\n\nIf the key does not exist in the option, `Nothing` is returned.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nbar :: Int\nbar = Option.getWithDefault 13 (Data.Symbol.SProxy :: _ \"bar\") someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"getWithDefault","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[2571,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2578,8]}},{"children":[],"comments":"Adds a new key with the given value to an option.\nThe key must not already exist in the option.\nIf the key might already exist in the option, `set` should be used instead.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"insert","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[2610,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2618,16]}},{"children":[],"comments":null,"title":"insert'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"Insert"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2653,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2658,16]}},{"children":[],"comments":"Creates a `Data.Codec.Argonaut.JsonCodec _` for an `Option.Option _` given a `Record _` of `Data.Codec.Argonaut.JsonCodec _`s.\n\nThe `String` is used in errors when decoding fails.\n\nE.g.\n```PureScript\ntype Example\n  = Option.Option\n      ( foo :: Boolean\n      , bar :: Int\n      )\n\njsonCodec :: Data.Codec.Argonaut.JsonCodec Example\njsonCodec =\n  Option.jsonCodec\n    \"Example\"\n    { foo: Data.Codec.Argonaut.boolean\n    , bar: Data.Codec.Argonaut.int\n    }\n```\n","title":"jsonCodec","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"REmpty"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[2681,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2686,50]}},{"children":[],"comments":"Creates a `Data.Codec.Argonaut.JsonCodec _` for an `Option.Record _ _` given a `Record _` of `Data.Codec.Argonaut.JsonCodec _`s.\n\nThe `String` is used in errors when decoding fails.\n\nE.g.\n```PureScript\ntype Example\n  = Option.Record\n      ( foo :: Boolean\n      )\n      ( bar :: Int\n      )\n\njsonCodec :: Data.Codec.Argonaut.JsonCodec Example\njsonCodec =\n  Option.jsonCodecRecord\n    \"Example\"\n    { foo: Data.Codec.Argonaut.boolean\n    , bar: Data.Codec.Argonaut.int\n    }\n```\n\nThis is an alias for `jsonCodec'` so the documentation is a bit clearer.\n","title":"jsonCodecRecord","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["required",{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2733,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2738,59]}},{"children":[],"comments":"Manipulates the value of a key in an option.\n\nIf the field exists in the option, the given function is applied to the value.\n\nIf the field does not exist in the option, there is no change to the option.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.modify (Data.Symbol.SProxy :: _ \"bar\") (_ + 1) someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"modify","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value'",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option''",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[2759,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2767,16]}},{"children":[],"comments":"Manipulates the values of an option.\n\nIf the field exists in the option, the given function is applied to the value.\n\nIf the field does not exist in the option, there is no change to the option.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.modify' { bar: \\x -> x + 1 } someOption\n```\n","title":"modify'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"Modify"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2789,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2794,16]}},{"children":[],"comments":"Retrieves all the optional fields from the given `Option.Record _ _`.\n\nE.g.\n```PureScript\nsomeRecord :: Option.Record ( foo :: Boolean ) ( bar :: Int, qux :: String )\nsomeRecord = Option.recordFromRecord { foo: false }\n\nsomeOption :: Option.Option ( bar :: Int, qux :: String )\nsomeOption = Option.optional someRecord\n```\n","title":"optional","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ForAll","contents":["required",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]},null]},null]}},"sourceSpan":{"start":[2807,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2810,18]}},{"children":[],"comments":"The given `Record record` must have no more fields than expected.\n\nE.g. The following definitions are valid.\n```PureScript\noption1 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption1 = Option.recordFromRecord { foo: true, bar: 31 }\n\noption2 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption2 = Option.recordFromRecord {}\n\noption3 :: Option.Record ( foo :: Boolean ) ( bar :: Int )\noption3 = Option.recordFromRecord { foo: true }\n```\n\nHowever, the following definitions are not valid as the given records have more fields than the expected `Option _`.\n```PureScript\n-- This will not work as it has the extra field `baz`\noption3 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption3 = Option.recordFromRecord { foo: true, bar: 31, baz: \"hi\" }\n\n-- This will not work as it has the extra field `qux`\noption4 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption4 = Option.recordFromRecord { qux: [] }\n```\n\nAnd, this definition is not valid as the given record lacks the required fields.\n```PureScript\noption5 :: Option.Record ( baz :: String ) ( foo :: Boolean, bar :: Int )\noption5 = Option.recordFromRecord { foo: true, bar: 31 }\n```\n\nThis is an alias for `fromRecord'` so the documentation is a bit clearer.\n","title":"recordFromRecord","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["required",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"FromRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2846,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2850,27]}},{"children":[],"comments":"Sets the given key/values in an `Option.Record _ _`.\nThe key must already exist in the `Option.Record _ _`.\nIf the key might not already exist in the `Option.Record _ _`, `recordInsert` should be used instead.\n\nE.g.\n```PureScript\nsomeRecord :: Option.Record ( foo :: Boolean ) ( bar :: Int )\nsomeRecord = Option.recordFromRecord { foo: true }\n\nanotherRecord :: Option.Record ( foo :: Boolean ) ( bar :: Int )\nanotherRecord = Option.recordSet { bar: 31 } someRecord\n```\nThis is an alias for `set''` so the documentation is a bit clearer.\n","title":"recordSet","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["required'",{"annotation":[],"tag":"ForAll","contents":["required",{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional'",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"Set"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required'"},{"annotation":[],"tag":"TypeVar","contents":"optional'"},{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required'"}]},{"annotation":[],"tag":"TypeVar","contents":"optional'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[2878,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2883,27]}},{"children":[],"comments":"The expected `Record record` will have the same fields as the given `Option.Record required optional` where each optional type is wrapped in a `Maybe`.\n\nE.g.\n```PureScript\nsomeOption :: Option.Record ( foo :: Boolean ) ( bar :: Int )\nsomeOption = Option.recordFromRecord { foo: true, bar: 31 }\n\nsomeRecord :: Record ( foo :: Boolean, bar :: Data.Maybe.Maybe Int )\nsomeRecord = Option.toRecord someOption\n```\n\nThis is an alias for `toRecord'` so the documentation is a bit clearer.\n","title":"recordToRecord","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["required",{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"ToRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"optional"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2898,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2902,21]}},{"children":[],"comments":"Retrieves all of the required fields from the given `Option.Record _ _`.\n\nE.g.\n```PureScript\nsomeRecord :: Option.Record ( foo :: Boolean, bar :: Int ) ( qux :: String )\nsomeRecord = Option.recordFromRecord { foo: false, bar: 3 }\n\nanotherRecord :: Record ( foo :: Boolean, bar :: Int )\nanotherRecord = Option.required someRecord\n```\n","title":"required","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ForAll","contents":["required",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}]},null]},null]}},"sourceSpan":{"start":[2915,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2918,23]}},{"children":[],"comments":"Changes a key with the given value to an option.\nThe key must already exist in the option.\nIf the key might not already exist in the option, `insert` should be used instead.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.set (Data.Symbol.SProxy :: _ \"bar\") 31 someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"set","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value'",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option''",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[2938,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2946,16]}},{"children":[],"comments":"Sets the given key/values in an option.\nThe key must already exist in the option.\nIf the key might not already exist in the option, `insert` should be used instead.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.set' { bar: 31 } someOption\n```\n","title":"set'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional'",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"Set"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"REmpty"},{"annotation":[],"tag":"TypeVar","contents":"optional'"},{"annotation":[],"tag":"REmpty"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[2964,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2969,18]}},{"children":[],"comments":"The expected `Record record` will have the same fields as the given `Option _` where each type is wrapped in a `Maybe`.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.fromRecord { foo: true, bar: 31 }\n\nsomeRecord :: Record ( foo :: Data.Maybe.Maybe Boolean, bar :: Data.Maybe.Maybe Int )\nsomeRecord = Option.toRecord someOption\n```\n","title":"toRecord","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["optional",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"ToRecord"],"constraintArgs":[{"annotation":[],"tag":"REmpty"},{"annotation":[],"tag":"TypeVar","contents":"optional"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}]},null]},null]}},"sourceSpan":{"start":[2992,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2996,21]}},{"children":[{"comments":null,"title":"alter''","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}},"sourceSpan":{"start":[494,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[497,18]}},{"comments":"This instance manipulates the values in an `Option _`.\n","title":"alterAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"AlterOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Alter"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[500,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[509,74]}}],"comments":"A typeclass that manipulates the values in an `Option _`.\n\nIf the field exists in the `Option _`, the given function is applied to the value.\n\nIf the field does not exist in the `Option _`, there is no change to the `Option _`.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.alter'' { bar: \\_ -> Data.Maybe.Just 41 } someOption\n```\n","title":"Alter","info":{"fundeps":[[["record","option"],["option'"]],[["record","option'"],["option"]]],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[493,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[497,18]}},{"children":[{"comments":null,"title":"alterOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]}},"sourceSpan":{"start":[513,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[518,18]}},{"comments":null,"title":"alterOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"AlterOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[520,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[528,34]}},{"comments":null,"title":"alterOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"AlterOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"AlterOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[529,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[567,42]}}],"comments":"A typeclass that iterates a `Prim.RowList.RowList` manipulating values in an `Option _`.\n","title":"AlterOption","info":{"fundeps":[[["list","option"],["option'"]],[["list","option'"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[512,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[518,18]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"decodeJsonOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode","Error"],"JsonDecodeError"]}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]},null]}},"sourceSpan":{"start":[574,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[578,82]}},{"comments":null,"title":"decodeJsonOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"DecodeJsonOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[580,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[586,49]}},{"comments":null,"title":"decodeJsonOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Argonaut","Decode","Class"],"DecodeJson"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"DecodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"DecodeJsonOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[587,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[619,18]}}],"comments":"A typeclass that iterates a `RowList` decoding an `Object Json` to an `Option _`.\n","title":"DecodeJsonOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[570,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[578,82]}},{"children":[{"comments":null,"title":"delete''","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}},"sourceSpan":{"start":[631,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[634,18]}},{"comments":"This instance removes keys from an `Option _`.\n","title":"deleteAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"DeleteOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Delete"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[637,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[646,48]}}],"comments":"A typeclass that removes keys from an option\n\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.fromRecord { foo: true, bar: 31 }\n\nanotherOption :: Option.Option ( bar :: Int )\nanotherOption = Option.delete'' { foo: unit } someOption\n```\n","title":"Delete","info":{"fundeps":[[["record","option'"],["option"]],[["record","option"],["option'"]],[["option'","option"],["record"]]],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[630,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[634,18]}},{"children":[{"comments":null,"title":"deleteOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]}},"sourceSpan":{"start":[650,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[655,18]}},{"comments":null,"title":"deleteOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"DeleteOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[657,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[665,35]}},{"comments":null,"title":"deleteOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"DeleteOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"DeleteOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[666,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[688,18]}}],"comments":"A typeclass that iterates a `Prim.RowList.RowList` removing keys from `Option _`.\n","title":"DeleteOption","info":{"fundeps":[[["list","option'"],["option"]],[["list","option"],["option'"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[649,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[655,18]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"encodeJsonOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]},null]}},"sourceSpan":{"start":[695,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[699,50]}},{"comments":null,"title":"encodeJsonOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EncodeJsonOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[701,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[708,46]}},{"comments":null,"title":"encodeJsonOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Argonaut","Encode","Class"],"EncodeJson"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"EncodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EncodeJsonOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[709,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[742,30]}}],"comments":"A typeclass that iterates a `RowList` encoding an `Option _` as `Json`.\n","title":"EncodeJsonOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[691,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[699,50]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"eqOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[749,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[754,12]}},{"comments":null,"title":"eqOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EqOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[756,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[763,24]}},{"comments":null,"title":"eqOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"EqOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EqOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[764,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[795,33]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` to a `Boolean`.\n","title":"EqOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[745,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[754,12]}},{"children":[{"comments":"The given `Record record` must have no more fields than expected.\n\nE.g. The following definitions are valid.\n```PureScript\noption1 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption1 = Option.fromRecord' { foo: true, bar: 31 }\n\noption2 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption2 = Option.fromRecord' {}\n\noption3 :: Option.Record ( foo :: Boolean ) ( bar :: Int )\noption3 = Option.fromRecord' { foo: true }\n```\n\nHowever, the following definitions are not valid as the given records have more fields than the expected `Option _`.\n```PureScript\n-- This will not work as it has the extra field `baz`\noption3 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption3 = Option.fromRecord' { foo: true, bar: 31, baz: \"hi\" }\n\n-- This will not work as it has the extra field `qux`\noption4 :: Option.Record () ( foo :: Boolean, bar :: Int )\noption4 = Option.fromRecord' { qux: [] }\n```\n\nAnd, this definition is not valid as the given record lacks the required fields.\n```PureScript\noption5 :: Option.Record ( baz :: String ) ( foo :: Boolean, bar :: Int )\noption5 = Option.fromRecord' { foo: true, bar: 31 }\n```\n","title":"fromRecord'","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]}},"sourceSpan":{"start":[855,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[857,29]}},{"comments":"This instance converts a record into an option.\n\nEvery field in the record is added to the option.\n\nAny fields in the expected option that do not exist in the record are not added.\n","title":"fromRecordAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"FromRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optionalList"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"FromRecordRequired"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"requiredList"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Union"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"optional'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optional'"},{"annotation":[],"tag":"TypeVar","contents":"optionalList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"requiredList"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecord"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}},"sourceSpan":{"start":[864,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[879,8]}}],"comments":"A typeclass for converting a `Record _` into an `Option _`.\n\nAn instance `FromRecord record required optional` states that we can make a `Record required` and an `Option optional` from a `Record record` where every required field is in the record and the rest of the present fields in the record is present in the option.\nE.g. `FromRecord () () ( name :: String )` says that the `Record ()` has no fields and the `Option ( name :: String )` will have no value;\n`FromRecord ( name :: String ) () ( name :: String )` says that the `Record ()` has no fields and the `Option ( name :: String )` will have the given `name` value;\n`FromRecord ( name :: String ) ( name :: String ) ()` says that the `Record ( name :: String )` has the given `name` value and the `Option ()` will have no value;\n`FromRecord () ( name :: String) ()` is a type error since the `name` field is required but the given record lacks the field.\n\nSince there is syntax for creating records, but no syntax for creating options, this typeclass can be useful for providing an easier to use interface to options.\n\nE.g. Someone can say:\n```PureScript\nOption.fromRecord' { foo: true, bar: 31 }\n```\nInstead of having to say:\n```PureScript\nOption.insert\n  (Data.Symbol.SProxy :: _ \"foo\")\n  true\n  ( Option.insert\n      (Data.Symbol.SProxy :: _ \"bar\")\n      31\n      Option.empty\n  )\n```\n\nNot only does it save a bunch of typing, it also mitigates the need for a direct dependency on `SProxy _`.\n","title":"FromRecord","info":{"fundeps":[],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["required",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["optional",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[824,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[857,29]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"fromRecordOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]},null]}},"sourceSpan":{"start":[886,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[890,18]}},{"comments":null,"title":"fromRecordOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecordOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[892,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[898,31]}},{"comments":null,"title":"fromRecordOptionConsMaybe","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"FromRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecordOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[899,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[926,37]}},{"comments":null,"title":"fromRecordOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"FromRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecordOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[927,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[952,36]}}],"comments":"A typeclass that iterates a `RowList` converting a `Record _` into an `Option _`.\n","title":"FromRecordOption","info":{"fundeps":[[["list"],["option","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[882,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[890,18]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"fromRecordRequired","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Record","Builder"],"Builder"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"REmpty"}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}}]}]}]},null]}},"sourceSpan":{"start":[959,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[963,67]}},{"comments":null,"title":"fromRecordRequiredNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecordRequired"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[965,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[971,36]}},{"comments":null,"title":"fromRecordRequiredCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"FromRecordRequired"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"required'"},{"annotation":[],"tag":"TypeVar","contents":"required"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"required'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecordRequired"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}},"sourceSpan":{"start":[972,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1000,36]}}],"comments":"A typeclass that iterates a `RowList` selecting the fields from a `Record _`.\n","title":"FromRecordRequired","info":{"fundeps":[[["list"],["required","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["required",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[955,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[963,67]}},{"children":[{"comments":"Attempts to fetch the values from the given option.\n\nThe behavior of what's returned depends on what the value is for each field in the record.\n\nIf the value in the record is of type `Maybe a -> b` ,\nthat function is run on the result of finding the field in the option.\n\nIf the value in the record is of type `Maybe a` and the type of the field in the option is `a`,\nthe result is `Just _` if the value exists in the option and whatever the provided `Maybe a` was otherwise.\n\nIf the value in the record is of type `a` and the type of the field in the option is `a`,\nthe result is whatever the value is in the option if it exists and whatever the provided `a` was otherwise.\n\nThese behaviors allow handling different fields differently without jumping through hoops to get the values from an option.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int, qux :: String )\nsomeOption = Option.empty\n\n-- Since `someOption` is empty,\n-- this will have a shape like:\n-- { foo: false, bar: \"not set\", qux: Data.Maybe.Nothing }\nsomeRecord :: Record ( foo :: Boolean, bar :: String, qux :: Data.Maybe.Maybe String )\nsomeRecord =\n  Option.get''\n    { foo: false\n    , bar: \\x -> case x of\n        Data.Maybe.Just x -> if x > 0 then \"positive\" else \"non-positive\"\n        Data.Maybe.Nothing -> \"not set\"\n    , qux: Data.Maybe.Nothing\n    }\n    someOption\n```\n","title":"get''","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}]}},"sourceSpan":{"start":[1039,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1042,23]}},{"comments":"This instance converts grabs the given fields of an `Option _`.\n","title":"getAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"GetOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Get"]},{"annotation":[],"tag":"TypeVar","contents":"record'"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[1045,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1050,70]}}],"comments":"A typeclass that grabs the given fields of an `Option _`.\n\n","title":"Get","info":{"fundeps":[[["option","record'"],["record"]],[["option","record"],["record'"]],[["record","record'"],["option"]]],"arguments":[["record'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1004,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1042,23]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"getOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}]}]},null]}},"sourceSpan":{"start":[1057,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1062,23]}},{"comments":null,"title":"getOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"GetOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record'"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[1064,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1066,23]}},{"comments":null,"title":"getOptionConsFunction","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"GetOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"result"}]},{"annotation":[],"tag":"TypeVar","contents":"givenRecord'"},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"result"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"GetOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"result"}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[1067,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1096,36]}},{"comments":null,"title":"getOptionConsMaybe","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"GetOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"givenRecord'"},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"GetOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[1097,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1123,43]}},{"comments":null,"title":"getOptionConsValue","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"GetOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"givenRecord'"},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"GetOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"givenRecord"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[1124,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1150,43]}}],"comments":"A typeclass that iterates a `RowList` grabbing the given fields of an `Option _`.\n","title":"GetOption","info":{"fundeps":[[["list"],["record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1053,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1062,23]}},{"children":[{"comments":"Attempts to fetch all of the values from all of the keys of an option.\n\nIf every key exists in the option, the record of values is returned in `Just _`.\n\nIf any key does not exist in the option, `Nothing` is returned.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\n-- This will be `Nothing` because the key `foo` does not exist in the option.\nbar :: Data.Maybe.Maybe (Record ( foo :: Boolean, bar :: Int))\nbar = Option.getAll' someOption\n\n-- This will be `Just { foo: true, bar: 31 }` because all keys exist in the option.\nbar :: Data.Maybe.Maybe (Record ( foo :: Boolean, bar :: Int))\nbar = Option.getAll' (Option.insert (Data.Symbol.SProxy :: _ \"foo\") true someOption)\n```\n","title":"getAll'","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}}]}]}},"sourceSpan":{"start":[1185,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1187,42]}},{"comments":"This instancce converts an `Option _` to a `Maybe (Record _)`.\n\nIf every key exists in the option, the record of values is returned in `Just _`.\n\nIf any key does not exist, `Nothing` is returned.\n","title":"getAllAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"GetAllOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"GetAll"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[1194,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1199,47]}}],"comments":"A typeclass that converts an `Option _` to a `Maybe (Record _)`.\n\nIf every key exists in the option, the record of values is returned in `Just _`.\n\nIf any key does not exist, `Nothing` is returned.\n\nE.g. Someone can say:\n```PureScript\nsomeRecord :: Data.Maybe.Maybe (Record ( foo :: Boolean, bar :: Int ))\nsomeRecord = Option.getAll' someOption\n```\n\nThis can also be roughtly thought of as a monomorphic `Data.Traversable.sequence`.\n","title":"GetAll","info":{"fundeps":[[["option"],["record"]]],"arguments":[["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1165,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1187,42]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"getAllOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}}]}]}]},null]}},"sourceSpan":{"start":[1206,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1210,42]}},{"comments":null,"title":"getAllOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"GetAllOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[1212,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1214,40]}},{"comments":null,"title":"getAllOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"GetAllOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"GetAllOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[1215,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1239,30]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` into a `Maybe (Record _)`.\n","title":"GetAllOption","info":{"fundeps":[[["list"],["option","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1202,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1210,42]}},{"children":[{"comments":null,"title":"insert''","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}},"sourceSpan":{"start":[1256,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1259,18]}},{"comments":"This instance inserts all values in an `Option _`.\n","title":"insertAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"InsertOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Insert"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1262,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1271,48]}}],"comments":"A typeclass that inserts values in an `Option _`.\n\nThe keys must not already exist in the option.\nIf any keys might already exist in the option,\n`set''` should be used instead.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.insert'' { bar: 31 } someOption\n```\n","title":"Insert","info":{"fundeps":[],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1255,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1259,18]}},{"children":[{"comments":null,"title":"insertOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]}},"sourceSpan":{"start":[1275,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1280,18]}},{"comments":null,"title":"insertOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"InsertOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1282,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1290,35]}},{"comments":null,"title":"insertOptionConsMaybe","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"InsertOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldOption"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"InsertOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1291,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1319,37]}},{"comments":null,"title":"insertOptionConsValue","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"InsertOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldOption"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"InsertOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1320,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1346,36]}}],"comments":"A typeclass that iterates a `Prim.RowList.RowList` inserting values in an `Option _`.\n","title":"InsertOption","info":{"fundeps":[[["list","option'"],["option"]],[["option'","record"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1274,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1280,18]}},{"children":[{"comments":"Creates a `JsonCodec` for an `Option.Record _ _` given a `Record _` of `JsonCodec`s.\n\nE.g.\nThe `String` is used in errors when decoding fails.\n\n```PureScript\ntype Example\n  = Option.Record\n      ( foo :: Boolean\n      )\n      ( bar :: Int\n      )\n\njsonCodec :: Data.Codec.Argonaut.JsonCodec Example\njsonCodec =\n  Option.jsonCodec'\n    \"Example\"\n    { foo: Data.Codec.Argonaut.boolean\n    , bar: Data.Codec.Argonaut.int\n    }\n```\n","title":"jsonCodec'","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}}]}]}]}},"sourceSpan":{"start":[1373,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1376,61]}},{"comments":"For required fields:\n\nIf a key does not exist in the JSON object, it will fail with an error.\n\nIf a key does exists in the JSON object but the value cannot be successfully decoded, it will fail with an error.\n\nIf a key does exists in the JSON object and the value can be successfully decoded, it will be added to the `Option.Record _ _`.\n\nEvery key in the given `Option.Record _ _` is encoded like normal and added it to the JSON object.\n\nFor optional fields:\n\nThis instance ignores keys that do not exist in the given JSON object and does not insert keys that do not exist in the given `Option.Record _ _`.\n\nIf a key does not exist in the JSON object, it will not be added to the `Option.Record _ _`.\n\nIf a key does exists in the JSON object but the value cannot be successfully decoded, it will fail with an error.\n\nIf a key does exists in the JSON object and the value can be successfully decoded, it will be added to the `Option.Record _ _`.\n\nIf a key does not exist in the given `Option.Record _ _`, it is not added to the JSON object.\n\nIf a key does exists in the given `Option.Record _ _`, it encodes it like normal and adds it to the JSON object.\n","title":"jsonCodecRecordRequiredOptional","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodecOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optionalList"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodecRequired"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"requiredList"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optional"},{"annotation":[],"tag":"TypeVar","contents":"optionalList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"requiredList"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}},"sourceSpan":{"start":[1401,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1455,46]}}],"comments":"A typeclass that converts a record of `Data.Codec.Argonaut.JsonCodec _`s into a `Data.Codec.Argonaut.JsonCodec _` for an `Option.Record _ _`.\n\nThis is useful to provide a straight-forward `Data.Codec.Argonaut.JsonCodec _` for an `Option.Record _ _`.\n","title":"JsonCodec","info":{"fundeps":[],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["required",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["optional",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1351,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1376,61]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"jsonCodecOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]},null]}},"sourceSpan":{"start":[1462,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1466,51]}},{"comments":null,"title":"jsonCodecOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodecOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1468,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1478,33]}},{"comments":null,"title":"jsonCodecOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodecOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodecOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1479,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1537,18]}}],"comments":"A typeclass that iterates a `RowList` converting a record of `JsonCodec`s into a `JsonCodec` for an option.\n","title":"JsonCodecOption","info":{"fundeps":[[["list"],["option","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1458,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1466,51]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"jsonCodecRequired","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}}]}]}]},null]}},"sourceSpan":{"start":[1544,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1548,58]}},{"comments":null,"title":"jsonCodecRequiredNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodecRequired"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[1550,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1560,33]}},{"comments":null,"title":"jsonCodecRequiredCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodecRequired"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"required'"},{"annotation":[],"tag":"TypeVar","contents":"required"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"required'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodecRequired"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}},"sourceSpan":{"start":[1561,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1616,18]}}],"comments":"A typeclass that iterates a `RowList` converting a record of `JsonCodec`s into a `JsonCodec` for an option.\n","title":"JsonCodecRequired","info":{"fundeps":[[["list"],["record","required"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["required",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1540,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1548,58]}},{"children":[{"comments":null,"title":"modify''","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}},"sourceSpan":{"start":[1633,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1636,18]}},{"comments":"This instance manipulates the values in an `Option _`.\n","title":"modifyAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"ModifyOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Modify"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1639,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1648,76]}}],"comments":"A typeclass that manipulates the values in an `Option _`.\n\nIf the field exists in the `Option _`, the given function is applied to the value.\n\nIf the field does not exist in the `Option _`, there is no change to the `Option _`.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.modify'' { bar: \\x -> x + 1 } someOption\n```\n","title":"Modify","info":{"fundeps":[[["record","option"],["option'"]],[["record","option'"],["option"]]],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1632,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1636,18]}},{"children":[{"comments":null,"title":"modifyOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]}},"sourceSpan":{"start":[1652,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1657,18]}},{"comments":null,"title":"modifyOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ModifyOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1659,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1667,35]}},{"comments":null,"title":"modifyOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ModifyOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ModifyOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1668,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1706,42]}}],"comments":"A typeclass that iterates a `Prim.RowList.RowList` manipulating values in an `Option _`.\n","title":"ModifyOption","info":{"fundeps":[[["list","option"],["option'"]],[["list","option'"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1651,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1657,18]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"compareOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}]},null]}},"sourceSpan":{"start":[1714,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1719,13]}},{"comments":null,"title":"ordOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"OrdOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1721,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1728,27]}},{"comments":null,"title":"ordOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"OrdOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"OrdOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1729,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1763,33]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` to a `Boolean`.\n","title":"OrdOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[{"constraintAnn":[],"constraintClass":[["Option"],"EqOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}]},"sourceSpan":{"start":[1709,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1719,13]}},{"children":[{"comments":null,"title":"partitionNilNilNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Partition"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"requiredInput"}]},{"annotation":[],"tag":"TypeVar","contents":"optionalInput"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[1774,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1774,120]}},{"comments":null,"title":"partitionConsConsAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"Partition"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"requiredInput"},{"annotation":[],"tag":"TypeVar","contents":"optionalInput"},{"annotation":[],"tag":"TypeVar","contents":"requiredOutput"},{"annotation":[],"tag":"TypeVar","contents":"optionalOutput"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Partition"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"requiredValue"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"requiredInput"}]}]},{"annotation":[],"tag":"TypeVar","contents":"optionalInput"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"requiredValue"}]},{"annotation":[],"tag":"TypeVar","contents":"requiredOutput"}]}]},{"annotation":[],"tag":"TypeVar","contents":"optionalOutput"}]}},"sourceSpan":{"start":[1775,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1778,187]}},{"comments":null,"title":"partitionConsAnyCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"Partition"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"requiredInput"},{"annotation":[],"tag":"TypeVar","contents":"optionalInput"},{"annotation":[],"tag":"TypeVar","contents":"requiredOutput"},{"annotation":[],"tag":"TypeVar","contents":"optionalOutput"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Partition"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"optionalValue"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"requiredInput"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"optionalInput"}]}]},{"annotation":[],"tag":"TypeVar","contents":"requiredOutput"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"optionalValue"}]},{"annotation":[],"tag":"TypeVar","contents":"optionalOutput"}]}]}},"sourceSpan":{"start":[1779,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1782,187]}}],"comments":"A typeclass that iterates a `RowList` partitioning required rows from the optional rows.\n\nThis is like the built in row-polymorphism,\nexcept it only cares about the labels of the row.\nThe type can vary between the iterated `RowList` and the required/optional rows.\nIf it differs,\nthe type from the iterated `RowList` is used.\n","title":"Partition","info":{"fundeps":[[["list","optionalInput","requiredInput"],["optionalOutput","requiredOutput"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["requiredInput",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["optionalInput",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["requiredOutput",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["optionalOutput",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1772,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1772,277]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"readImplOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"F"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]},null]}},"sourceSpan":{"start":[1789,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1793,30]}},{"comments":null,"title":"readForeignOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ReadForeignOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1795,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1801,34]}},{"comments":null,"title":"readForeignOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ReadForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"ReadForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ReadForeignOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1802,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1836,18]}}],"comments":"A typeclass that iterates a `RowList` attempting to read a `Foreign` to an `Option _`.\n","title":"ReadForeignOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1785,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1793,30]}},{"children":[{"comments":null,"title":"set''","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"requiredInput"}]},{"annotation":[],"tag":"TypeVar","contents":"optionalInput"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"requiredOutput"}]},{"annotation":[],"tag":"TypeVar","contents":"optionalOutput"}]}]}]}},"sourceSpan":{"start":[1853,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1856,41]}},{"comments":"This instance sets all values in an `Option.Record _ _`.\n","title":"setAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"Partition"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"recordList"},{"annotation":[],"tag":"TypeVar","contents":"requiredList'"},{"annotation":[],"tag":"TypeVar","contents":"optionalList'"},{"annotation":[],"tag":"TypeVar","contents":"requiredList"},{"annotation":[],"tag":"TypeVar","contents":"optionalList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optional'"},{"annotation":[],"tag":"TypeVar","contents":"optionalList'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"recordList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required'"},{"annotation":[],"tag":"TypeVar","contents":"requiredList'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"SetOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optionalList"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"optional'"},{"annotation":[],"tag":"TypeVar","contents":"optional"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"SetRequired"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"requiredList"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"required'"},{"annotation":[],"tag":"TypeVar","contents":"required"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Set"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"required'"}]},{"annotation":[],"tag":"TypeVar","contents":"optional'"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}},"sourceSpan":{"start":[1859,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1882,25]}}],"comments":"A typeclass that sets values in an `Option.Record _ _`.\n\nThe keys must already exist in the `Option.Record _ _`.\nIf any keys might not already exist in the `Option.Record _ _`,\n`insert''` should be used instead.\n\nE.g.\n```PureScript\nsomeRecord :: Option.Record ( foo :: Boolean ) ( bar :: Int )\nsomeRecord = Option.fromRecord' { foo: true }\n\nanotherRecord :: Option.Record ( foo :: Boolean ) ( bar :: Int )\nanotherRecord = Option.set'' { bar: 31 } someRecord\n```\n","title":"Set","info":{"fundeps":[],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["requiredInput",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["optionalInput",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["requiredOutput",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["optionalOutput",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1852,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1856,41]}},{"children":[{"comments":null,"title":"setOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]},null]}},"sourceSpan":{"start":[1886,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1891,18]}},{"comments":null,"title":"setOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"SetOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1893,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1901,32]}},{"comments":null,"title":"setOptionConsMaybe","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"SetOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"SetOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1902,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1937,37]}},{"comments":null,"title":"setOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"SetOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldOption'"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"SetOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldOption"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[1938,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1969,36]}}],"comments":"A typeclass that iterates a `Prim.RowList.RowList` setting values in an `Option _`.\n","title":"SetOption","info":{"fundeps":[[["list","option'"],["option"]],[["option'","record"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1885,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1891,18]}},{"children":[{"comments":null,"title":"setRequired","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}]}]}]},null]}},"sourceSpan":{"start":[1973,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1978,25]}},{"comments":null,"title":"setRequiredNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"SetRequired"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}},"sourceSpan":{"start":[1980,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1988,34]}},{"comments":null,"title":"setRequiredCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"required'"},{"annotation":[],"tag":"TypeVar","contents":"required"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"oldRequired'"},{"annotation":[],"tag":"TypeVar","contents":"oldRequired"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"oldRequired'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"required'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"SetRequired"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"oldRequired'"},{"annotation":[],"tag":"TypeVar","contents":"required'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"SetRequired"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"oldRequired"}]},{"annotation":[],"tag":"TypeVar","contents":"required"}]}},"sourceSpan":{"start":[1989,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2020,36]}}],"comments":"A typeclass that iterates a `Prim.RowList.RowList` setting values in a `Record _`.\n","title":"SetRequired","info":{"fundeps":[[["list","required'"],["required"]],[["required'","record"],["required"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["required'",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["required",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[1972,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[1978,25]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"showOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]},null]}},"sourceSpan":{"start":[2028,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2032,26]}},{"comments":null,"title":"showOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ShowOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[2034,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2040,33]}},{"comments":null,"title":"showOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ShowOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ShowOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[2041,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2070,30]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` to a `List String`.\nThe `List String` should be processed into a single `String`.\n","title":"ShowOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[2024,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2032,26]}},{"children":[{"comments":"The expected `Record record` will have the same fields as the given `Option.Record required optional` where each optional type is wrapped in a `Maybe`.\n\nE.g.\n```PureScript\nsomeOption :: Option.Record ( foo :: Boolean ) ( bar :: Int )\nsomeOption = Option.fromRecord' { foo: true, bar: 31 }\n\nsomeRecord :: Record ( foo :: Boolean, bar :: Data.Maybe.Maybe Int )\nsomeRecord = Option.toRecord' someOption\n```\n","title":"toRecord'","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}},"sourceSpan":{"start":[2098,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2100,23]}},{"comments":"This instance converts an `Option.Record _ _` into a `Record _`.\n\nEvery required field in the `Option.Record _ _` is added to the `Record _` with a `_` type.\nEvery optional field in the `Option.Record _ _` is added to the `Record _` with a `Maybe _` type.\n\nAll optional fields in the `Option.Record _ _` that exist will have the value `Just _`.\nAll optional fields in the `Option.Record _ _` that do not exist will have the value `Nothing`.\n","title":"toRecordAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Nub"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Union"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"required"},{"annotation":[],"tag":"TypeVar","contents":"optionalRecord"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optional"},{"annotation":[],"tag":"TypeVar","contents":"optionalList"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ToRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"optionalList"},{"annotation":[],"tag":"TypeVar","contents":"optional"},{"annotation":[],"tag":"TypeVar","contents":"optionalRecord"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ToRecord"]},{"annotation":[],"tag":"TypeVar","contents":"required"}]},{"annotation":[],"tag":"TypeVar","contents":"optional"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[2109,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2133,69]}}],"comments":"A typeclass for converting an `Option.Record _ _` into a `Record _`.\n\nSince there is syntax for operating on records, but no syntax for operating on `Option.Record _ _`.\nThis typeclass can be useful for providing an easier to use interface to `Option.Record _ _`.\n\nE.g. Someone can say:\n```PureScript\n(Option.toRecord' someOption).foo\n```\nInstead of having to say:\n```PureScript\nOption.get (Data.Symbol.SProxy :: _ \"foo\") someOption\n```\n\nNot only does it save a bunch of typing, it also mitigates the need for a direct dependency on `SProxy _`.\n","title":"ToRecord","info":{"fundeps":[[["optional","required"],["record"]]],"arguments":[["required",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["optional",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[2087,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2100,23]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"toRecordOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Record","Builder"],"Builder"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"REmpty"}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}}]}]}]},null]}},"sourceSpan":{"start":[2140,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2144,65]}},{"comments":null,"title":"toRecordOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ToRecordOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[2146,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2153,32]}},{"comments":null,"title":"toRecordOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ToRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ToRecordOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[2154,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2182,29]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` into a `Record _`.\n","title":"ToRecordOption","info":{"fundeps":[[["list"],["option","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[2136,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2144,65]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"writeForeignOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]},null]}},"sourceSpan":{"start":[2189,3],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2193,20]}},{"comments":null,"title":"writeForeignOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"WriteForeignOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[2195,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2202,54]}},{"comments":null,"title":"writeForeignOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"WriteForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"WriteForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"WriteForeignOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[2203,6],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2237,30]}}],"comments":"A typeclass that iterates a `RowList` writing an `Option _` to a `Foreign`.\n","title":"WriteForeignOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[2185,1],"name":"/home/joneshf/programming/joneshf/purescript-option/src/Option.purs","end":[2193,20]}}]}],"resolvedDependencies":{"purescript-free":"5.2.0","purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-ordered-collections":"1.6.1","purescript-control":"4.2.0","purescript-variant":"6.0.1","purescript-console":"4.4.0","purescript-either":"4.1.1","purescript-profunctor":"4.1.0","purescript-arrays":"5.3.1","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-exists":"4.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.1.0","purescript-invariant":"4.1.0","purescript-fork":"4.0.0","purescript-argonaut-core":"5.1.0","purescript-lazy":"4.0.0","purescript-foreign-object":"2.0.3","purescript-codec-argonaut":"7.1.0","purescript-now":"4.0.0","purescript-codec":"3.0.0","purescript-aff":"5.1.2","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.1.1","purescript-avar":"3.0.0","purescript-gen":"2.1.1","purescript-typelevel-prelude":"5.0.2","purescript-functors":"3.1.1","purescript-prelude":"4.1.1","purescript-st":"4.1.1","purescript-bifunctors":"4.0.0","purescript-pipes":"6.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.1","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-argonaut-codecs":"7.0.0","purescript-mmorph":"5.1.0","purescript-ansi":"5.0.0","purescript-orders":"4.0.0","purescript-const":"4.1.0","purescript-spec":"4.0.1","purescript-record":"2.0.2","purescript-transformers":"4.2.0","purescript-globals":"4.1.0","purescript-generics-rep":"6.1.1","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-psci-support":"4.0.0","purescript-catenable-lists":"5.0.1","purescript-simple-json":"7.0.0","purescript-parallel":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-strings":"4.0.2","purescript-identity":"4.1.0","purescript-foreign":"5.0.0","purescript-lists":"5.4.1","purescript-nullable":"4.1.1","purescript-datetime":"4.1.1","purescript-functions":"4.0.0"},"version":"6.0.0","github":["joneshf","purescript-option"],"versionTag":"v6.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Ansi.Output":"purescript-ansi","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Data.Functor.Product":"purescript-functors","Foreign.Keys":"purescript-foreign","Data.NonEmpty":"purescript-nonempty","Test.Spec.Console":"purescript-spec","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Test.Spec.Style":"purescript-spec","Effect.Now":"purescript-now","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Test.Spec.Summary":"purescript-spec","Data.Functor.Compose":"purescript-functors","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Control.Monad.Free.Class":"purescript-free","Type.Data.Row":"purescript-prelude","Data.Codec.Argonaut.Variant":"purescript-codec-argonaut","Data.Date":"purescript-datetime","Control.Comonad.Cofree.Class":"purescript-free","Data.Argonaut.Parser":"purescript-argonaut-core","Data.Argonaut.Encode.Combinators":"purescript-argonaut-codecs","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Data.Profunctor.Cowrap":"purescript-profunctor","Record.Builder":"purescript-record","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Pipes.Core":"purescript-pipes","Data.Coyoneda":"purescript-free","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Foreign.Object":"purescript-foreign-object","Test.Spec.Tree":"purescript-spec","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Codec.Argonaut.Record":"purescript-codec-argonaut","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Simple.JSON":"purescript-simple-json","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Codec.Argonaut.Common":"purescript-codec-argonaut","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Data.Codec":"purescript-codec","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Test.Spec.Runner":"purescript-spec","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Test.Spec.Reporter.Console":"purescript-spec","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Argonaut.Encode.Class":"purescript-argonaut-codecs","Test.Spec.Reporter.Dot":"purescript-spec","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Data.Profunctor.Clown":"purescript-profunctor","Pipes.Internal":"purescript-pipes","Control.Monad.Morph":"purescript-mmorph","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Foreign.Index":"purescript-foreign","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Pipes.Prelude":"purescript-pipes","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Yoneda":"purescript-free","Data.Functor.App":"purescript-functors","Data.Codec.Argonaut.Sum":"purescript-codec-argonaut","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Type.RowList":"purescript-typelevel-prelude","Control.Comonad.Store.Trans":"purescript-transformers","Test.Spec.Assertions.String":"purescript-spec","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.Argonaut.Decode":"purescript-argonaut-codecs","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.Profunctor.Strong":"purescript-profunctor","Test.Spec.Reporter.Base":"purescript-spec","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.Spec.Reporter.Tap":"purescript-spec","Data.Codec.Argonaut.Migration":"purescript-codec-argonaut","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.Spec.Speed":"purescript-spec","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Set":"purescript-ordered-collections","Data.Codec.Argonaut.Generic":"purescript-codec-argonaut","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Data.Argonaut.Decode.Error":"purescript-argonaut-codecs","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Pipes":"purescript-pipes","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Pipes.ListT":"purescript-pipes","Control.Comonad.Env.Class":"purescript-transformers","Effect.Aff.AVar":"purescript-avar","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Test.Spec.Result":"purescript-spec","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Test.Spec.Assertions":"purescript-spec","Data.Bifunctor":"purescript-bifunctors","Data.Argonaut.Encode.Encoders":"purescript-argonaut-codecs","Data.Argonaut.Decode.Decoders":"purescript-argonaut-codecs","Test.Spec.Reporter":"purescript-spec","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Effect.AVar":"purescript-avar","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Ansi.Codes":"purescript-ansi","Test.Spec":"purescript-spec","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Argonaut.Decode.Parser":"purescript-argonaut-codecs","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Variant":"purescript-variant","Data.Functor.Coproduct":"purescript-functors","Data.Variant.Internal":"purescript-variant","Control.Monad.Cont.Class":"purescript-transformers","Data.Argonaut.Decode.Combinators":"purescript-argonaut-codecs","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Math":"purescript-math","Data.Set.NonEmpty":"purescript-ordered-collections","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Data.Argonaut.Encode":"purescript-argonaut-codecs","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Data.Codec.Argonaut":"purescript-codec-argonaut","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Foreign":"purescript-foreign","Control.Monad.Error.Class":"purescript-transformers","Data.Argonaut.Core":"purescript-argonaut-core","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Fork.Class":"purescript-fork","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Test.Spec.Runner.Event":"purescript-spec","Data.String.Regex.Flags":"purescript-strings","Data.Argonaut.Decode.Class":"purescript-argonaut-codecs","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Data.Variant":"purescript-variant","Record.Unsafe":"purescript-prelude","Control.Monad.Writer":"purescript-transformers","Test.Spec.Reporter.Spec":"purescript-spec","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Profunctor.Choice":"purescript-profunctor","Data.Codec.Argonaut.Compat":"purescript-codec-argonaut","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.13.3"}