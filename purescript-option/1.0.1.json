{"uploader":"joneshf","packageMeta":{"repository":{"url":"https://github.com/joneshf/purescript-option.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":">= 4.0.0 < 5"},"authors":[{"email":"jones3.hardy@gmail.com","name":"Hardy Jones"}],"dependencies":{"purescript-either":">= 1.0.0 < 5.0.0","purescript-profunctor":">= 3.0.0 < 5.0.0","purescript-maybe":">= 1.0.0 < 5.0.0","purescript-type-equality":">= 1.0.0 < 4.0.0","purescript-argonaut-core":">= 4.0.0 < 6.0.0","purescript-foreign-object":">= 1.0.0 < 3.0.0","purescript-codec-argonaut":">= 2.0.0 < 8.0.0","purescript-codec":">= 2.0.0 < 4.0.0","purescript-prelude":">= 4.0.0 < 5.0.0","purescript-unsafe-coerce":">= 1.0.0 < 5.0.0","purescript-argonaut-codecs":">= 3.0.1 < 7.0.0","purescript-record":">= 1.0.0 < 3.0.0","purescript-transformers":">= 3.0.0 < 5.0.0","purescript-simple-json":">= 1.0.0 < 8.0.0","purescript-tuples":">= 4.0.0 < 6.0.0","purescript-foreign":">= 5.0.0 < 6.0.0","purescript-lists":">= 4.0.0 < 6.0.0"},"name":"purescript-option","license":["MIT"],"description":"Safe option handling"},"tagTime":"2019-09-25T05:54:27+0000","modules":[{"reExports":[],"name":"Option","comments":"There are a few different data types that encapsulate ideas in programming.\n\nRecords capture the idea of a collection of key/value pairs where every key and value exist.\nE.g. `Record (foo :: Boolean, bar :: Int)` means that both `foo` and `bar` exist and with values all of the time.\n\nVariants capture the idea of a collection of key/value pairs where exactly one of the key/value pairs exist.\nE.g. `Variant (foo :: Boolean, bar :: Int)` means that either only `foo` exists with a value or only `bar` exists with a value, but not both at the same time.\n\nOptions capture the idea of a collection of key/value pairs where any key and value may or may not exist.\nE.g. `Option (foo :: Boolean, bar :: Int)` means that either only `foo` exists with a value, only `bar` exists with a value, both `foo` and `bar` exist with values, or neither `foo` nor `bar` exist.\n\nThe distinction between these data types means that we can describe problems more accurately.\nOptions are typically what you find in dynamic languages or in weakly-typed static languages.\nTheir use cases range from making APIs more flexible to interfacing with serialization formats to providing better ergonomics around data types.\n","declarations":[{"children":[{"comments":"This instance ignores keys that do not exist in the given JSON object.\n\nIf a key does not exist in the JSON object, it will not be added to the `Option _`.\n\nIf a key does exists in the JSON object but the value cannot be successfully decoded, it will fail with an error.\n\nIf a key does exists in the JSON object and the value can be successfully decoded, it will be added to the `Option _`.\n","title":"decodeJsonOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"DecodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode","Class"],"DecodeJson"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[100,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[110,66]}},{"comments":"This instance ignores keys that do not exist.\n\nIf a key does not exist in the given `Option _`, it is not added to the JSON object.\n\nIf a key does exists in the given `Option _`, it encodes it like normal and adds it to the JSON object.\n","title":"encodeJsonOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"EncodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode","Class"],"EncodeJson"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[117,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[125,54]}},{"comments":null,"title":"eqOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"EqOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[127,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[132,38]}},{"comments":null,"title":"ordOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"OrdOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[134,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[139,48]}},{"comments":"This instance ignores keys that do not exist in the given `Foreign`.\n\nIf a key does not exist in the `Foreign`, it will not be added to the `Option _`.\n\nIf a key does exists in the `Foreign` but the value cannot be successfully read, it will fail with an error.\n\nIf a key does exists in the `Foreign` and the value can be successfully read, it will be added to the `Option _`.\n","title":"readForeignOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ReadForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Simple","JSON"],"ReadForeign"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[148,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[156,50]}},{"comments":null,"title":"showOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ShowOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[158,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[183,18]}},{"comments":"This instance ignores keys that do not exist.\n\nIf a key does not exist in the given `Option _`, it is not added to the `Foreign`.\n\nIf a key does exists in the given `Option _`, it writes it like normal and adds it to the `Foreign`.\n","title":"writeForeignOptionOption","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"WriteForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Simple","JSON"],"WriteForeign"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[190,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[198,55]}}],"comments":"A collection of key/value pairs where any key and value may or may not exist.\nE.g. `Option (foo :: Boolean, bar :: Int)` means that either only `foo` exists with a value, only `bar` exists with a value, both `foo` and `bar` exist with values, or neither `foo` nor `bar` exist.\n","title":"Option","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["row",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]]},"sourceSpan":{"start":[85,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[86,49]}},{"children":[],"comments":"The given `Record record` must have no more fields than the expected `Option _`.\n\nE.g. The following definitions are valid.\n```PureScript\noption1 :: Option.Option ( foo :: Boolean, bar :: Int )\noption1 = Option.fromRecord { foo: true, bar: 31 }\n\noption2 :: Option.Option ( foo :: Boolean, bar :: Int )\noption2 = Option.fromRecord {}\n```\n\nHowever, the following definitions are not valid as the given records have more fields than the expected `Option _`.\n```PureScript\n-- This will not work as it has the extra field `baz`\noption3 :: Option.Option ( foo :: Boolean, bar :: Int )\noption3 = Option.fromRecord { foo: true, bar: 31, baz: \"hi\" }\n\n-- This will not work as it has the extra field `qux`\noption4 :: Option.Option ( foo :: Boolean, bar :: Int )\noption4 = Option.fromRecord { qux: [] }\n```\n\nThis is an alias for `fromRecord'` so the documentation is a bit clearer.\n","title":"fromRecord","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"FromRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]},null]},null]}},"sourceSpan":{"start":[1041,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1045,16]}},{"children":[],"comments":"Removes a key from an option\n\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.fromRecord { foo: true, bar: 31 }\n\nanotherOption :: Option.Option ( bar :: Int )\nanotherOption = Option.delete (Data.Symbol.SProxy :: _ \"foo\") someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"delete","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[990,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[997,16]}},{"children":[],"comments":"Creates an option with no key/values that matches any type of option.\n\nThis can be useful as a starting point for an option that is later built up.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.set (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n```\n","title":"empty","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},null]}},"sourceSpan":{"start":[1015,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1015,38]}},{"children":[],"comments":"Attempts to fetch the value at the given key from an option.\n\nIf the key exists in the option, `Just _` is returned.\n\nIf the key does not exist in the option, `Nothing` is returned.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nbar :: Data.Maybe.Maybe Int\nbar = Option.get (Data.Symbol.SProxy :: _ \"bar\") someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"get","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[1066,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1072,25]}},{"children":[],"comments":"Attempts to fetch the value at the given key from an option falling back to the default.\n\nIf the key exists in the option, `Just _` is returned.\n\nIf the key does not exist in the option, `Nothing` is returned.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nbar :: Int\nbar = Option.getWithDefault 13 (Data.Symbol.SProxy :: _ \"bar\") someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"getWithDefault","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[1096,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1103,8]}},{"children":[],"comments":"Adds a new key with the given value to an option.\nThe key must not already exist in the option.\nIf the key might already exist in the option, `set` should be used instead.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"insert","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[1124,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1132,16]}},{"children":[],"comments":"Creates a `JsonCodec` for an `Option _` given a `Record _` of `JsonCodec`s.\n\nThe `String` is used in errors when decoding fails.\n\nE.g.\n```PureScript\ntype Example\n  = Option.Option\n      ( foo :: Boolean\n      , bar :: Int\n      )\n\njsonCodec :: Data.Codec.Argonaut.JsonCodec Example\njsonCodec =\n  Option.jsonCodec\n    \"Example\"\n    { foo: Data.Codec.Argonaut.boolean\n    , bar: Data.Codec.Argonaut.int\n    }\n```\n\nThis is an alias for `jsonCodec'` so the documentation is a bit clearer.\n","title":"jsonCodec","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[1160,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1165,48]}},{"children":[],"comments":"Manipulates the value of a key in an option.\n\nIf the field exists in the option, the given function is applied to the value.\n\nIf the field does not exist in the option, there is no change to the option.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.insert (Data.Symbol.SProxy :: _ \"bar\") 31 Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.modify (Data.Symbol.SProxy :: _ \"bar\") (_ + 1) someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"modify","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value'",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option''",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[1186,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1194,16]}},{"children":[],"comments":"Changes a key with the given value to an option.\nThe key must already exist in the option.\nIf the key might not already exist in the option, `insert` should be used instead.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.empty\n\nanotherOption :: Option.Option ( foo :: Boolean, bar :: Int )\nanotherOption = Option.set (Data.Symbol.SProxy :: _ \"bar\") 31 someOption\n```\n\nThe `proxy` can be anything so long as its type variable has kind `Symbol`.\n\nIt will commonly be `Data.Symbol.SProxy`, but doesn't have to be.\n","title":"set","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["value'",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"ForAll","contents":["option''",{"annotation":[],"tag":"ForAll","contents":["option'",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ForAll","contents":["label",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option''"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"label"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option'"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[1218,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1226,16]}},{"children":[],"comments":"The expected `Record record` will have the same fields as the given `Option _` where each type is wrapped in a `Maybe`.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.fromRecord { foo: true, bar: 31 }\n\nsomeRecord :: Record ( foo :: Data.Maybe.Maybe Boolean, bar :: Data.Maybe.Maybe Int )\nsomeRecord = Option.toRecord someOption\n```\n\nThis is an alias for `toRecord'` so the documentation is a bit clearer.\n","title":"toRecord","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["record",{"annotation":[],"tag":"ForAll","contents":["option",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Option"],"ToRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}]},null]},null]}},"sourceSpan":{"start":[1244,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[1248,16]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"decodeJsonOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]},null]}},"sourceSpan":{"start":[205,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[209,46]}},{"comments":null,"title":"decodeJsonOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"DecodeJsonOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[211,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[217,49]}},{"comments":null,"title":"decodeJsonOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Argonaut","Decode","Class"],"DecodeJson"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"DecodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"DecodeJsonOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[218,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[250,18]}}],"comments":"A typeclass that iterates a `RowList` decoding an `Object Json` to an `Option _`.\n","title":"DecodeJsonOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[201,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[209,46]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"encodeJsonOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},null]}},"sourceSpan":{"start":[257,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[261,28]}},{"comments":null,"title":"encodeJsonOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EncodeJsonOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[263,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[270,60]}},{"comments":null,"title":"encodeJsonOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Argonaut","Encode","Class"],"EncodeJson"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"EncodeJsonOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EncodeJsonOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[271,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[310,30]}}],"comments":"A typeclass that iterates a `RowList` encoding an `Option _` as `Json`.\n","title":"EncodeJsonOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[253,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[261,28]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"eqOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[317,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[322,12]}},{"comments":null,"title":"eqOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EqOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[324,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[331,24]}},{"comments":null,"title":"eqOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"EqOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"EqOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[332,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[370,34]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` to a `Boolean`.\n","title":"EqOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[313,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[322,12]}},{"children":[{"comments":"The given `Record record` must have no more fields than the expected `Option _`.\n\nE.g. The following definitions are valid.\n```PureScript\noption1 :: Option.Option ( foo :: Boolean, bar :: Int )\noption1 = Option.fromRecord' { foo: true, bar: 31 }\n\noption2 :: Option.Option ( foo :: Boolean, bar :: Int )\noption2 = Option.fromRecord' {}\n```\n\nHowever, the following definitions are not valid as the given records have more fields than the expected `Option _`.\n```PureScript\n-- This will not work as it has the extra field `baz`\noption3 :: Option.Option ( foo :: Boolean, bar :: Int )\noption3 = Option.fromRecord' { foo: true, bar: 31, baz: \"hi\" }\n\n-- This will not work as it has the extra field `qux`\noption4 :: Option.Option ( foo :: Boolean, bar :: Int )\noption4 = Option.fromRecord' { qux: [] }\n```\n","title":"fromRecord'","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}},"sourceSpan":{"start":[418,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[418,48]}},{"comments":"This instance converts a record into an option.\n\nEvery field in the record is added to the option.\n\nAny fields in the expected option that do not exist in the record are not added.\n","title":"fromRecordAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"FromRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecord"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[425,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[431,55]}}],"comments":"A typeclass for converting a `Record _` into an `Option _`.\n\nAn instance `FromRecord record option` states that we can make an `Option option` from a `Record record` where every field present in the record is present in the option.\nE.g. `FromRecord () ( name :: String )` says that the `Option ( name :: String )` will have no value; and `FromRecord ( name :: String ) ( name :: String )` says that the `Option ( name :: String )` will have the given `name` value.\n\nSince there is syntax for creating records, but no syntax for creating options, this typeclass can be useful for providing an easier to use interface to options.\n\nE.g. Someone can say:\n```PureScript\nOption.fromRecord' { foo: true, bar: 31 }\n```\nInstead of having to say:\n```PureScript\nOption.insert\n  (Data.Symbol.SProxy :: _ \"foo\")\n  true\n  ( Option.insert\n      (Data.Symbol.SProxy :: _ \"bar\")\n      31\n      Option.empty\n  )\n```\n\nNot only does it save a bunch of typing, it also mitigates the need for a direct dependency on `SProxy _`.\n","title":"FromRecord","info":{"fundeps":[],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[396,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[418,48]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"fromRecordOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]}]},null]}},"sourceSpan":{"start":[438,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[442,18]}},{"comments":null,"title":"fromRecordOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecordOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[444,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[450,31]}},{"comments":null,"title":"fromRecordOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"FromRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"FromRecordOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[451,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[480,36]}}],"comments":"A typeclass that iterates a `RowList` converting a `Record _` into an `Option _`.\n","title":"FromRecordOption","info":{"fundeps":[[["list"],["option","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[434,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[442,18]}},{"children":[{"comments":"Creates a `JsonCodec` for an `Option _` given a `Record _` of `JsonCodec`s.\n\nE.g.\nThe `String` is used in errors when decoding fails.\n\n```PureScript\ntype Example\n  = Option.Option\n      ( foo :: Boolean\n      , bar :: Int\n      )\n\njsonCodec :: Data.Codec.Argonaut.JsonCodec Example\njsonCodec =\n  Option.jsonCodec\n    \"Example\"\n    { foo: Data.Codec.Argonaut.boolean\n    , bar: Data.Codec.Argonaut.int\n    }\n```\n","title":"jsonCodec'","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]}},"sourceSpan":{"start":[506,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[509,50]}},{"comments":"This instance ignores keys that do not exist in the given JSON object and does not insert keys that do not exist in the given `Option _`.\n\nIf a key does not exist in the JSON object, it will not be added to the `Option _`.\n\nIf a key does exists in the JSON object but the value cannot be successfully decoded, it will fail with an error.\n\nIf a key does exists in the JSON object and the value can be successfully decoded, it will be added to the `Option _`.\n\nIf a key does not exist in the given `Option _`, it is not added to the JSON object.\n\nIf a key does exists in the given `Option _`, it encodes it like normal and adds it to the JSON object.\n","title":"jsonCodecOptionAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodecOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[522,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[534,53]}}],"comments":"A typeclass that converts a record of `JsonCodec`s into a `JsonCodec` for an option.\n\nThis is useful to provide a straight-forward `JsonCodec` for an `Option _`.\n","title":"JsonCodec","info":{"fundeps":[],"arguments":[["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[485,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[509,50]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"jsonCodecOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]},null]}},"sourceSpan":{"start":[541,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[545,51]}},{"comments":null,"title":"jsonCodecOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodecOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[547,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[557,33]}},{"comments":null,"title":"jsonCodecOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"JsonCodecOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value'"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"value'"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"JsonCodecOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[558,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[621,41]}}],"comments":"A typeclass that iterates a `RowList` converting a record of `JsonCodec`s into a `JsonCodec` for an option.\n","title":"JsonCodecOption","info":{"fundeps":[[["list"],["option","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[537,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[545,51]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"compareOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}]},null]}},"sourceSpan":{"start":[629,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[634,13]}},{"comments":null,"title":"ordOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"OrdOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[636,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[643,27]}},{"comments":null,"title":"ordOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"OrdOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"OrdOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[644,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[685,34]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` to a `Boolean`.\n","title":"OrdOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[{"constraintAnn":[],"constraintClass":[["Option"],"EqOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null}]},"sourceSpan":{"start":[624,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[634,13]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"readImplOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"F"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}}]}]}]},null]}},"sourceSpan":{"start":[692,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[696,30]}},{"comments":null,"title":"readForeignOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ReadForeignOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[698,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[704,34]}},{"comments":null,"title":"readForeignOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ReadForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"ReadForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ReadForeignOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[705,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[739,18]}}],"comments":"A typeclass that iterates a `RowList` attempting to read a `Foreign` to an `Option _`.\n","title":"ReadForeignOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[688,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[696,30]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"showOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]},null]}},"sourceSpan":{"start":[747,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[751,26]}},{"comments":null,"title":"showOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ShowOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[753,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[759,33]}},{"comments":null,"title":"showOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ShowOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ShowOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[760,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[793,30]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` to a `List String`.\nThe `List String` should be processed into a single `String`.\n","title":"ShowOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[743,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[751,26]}},{"children":[{"comments":"The expected `Record record` will have the same fields as the given `Option _` where each type is wrapped in a `Maybe`.\n\nE.g.\n```PureScript\nsomeOption :: Option.Option ( foo :: Boolean, bar :: Int )\nsomeOption = Option.fromRecord' { foo: true, bar: 31 }\n\nsomeRecord :: Record ( foo :: Data.Maybe.Maybe Boolean, bar :: Data.Maybe.Maybe Int )\nsomeRecord = Option.toRecord' someOption\n```\n","title":"toRecord'","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}},"sourceSpan":{"start":[820,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[822,18]}},{"comments":"This instance converts an option into a record.\n\nEvery field in the option is added to a record with a `Maybe _` type.\n\nAll fields in the option that exist will have the value `Just _`.\nAll fields in the option that do not exist will have the value `Nothing`.\n","title":"toRecordAny","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Option"],"ToRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"record"},{"annotation":[],"tag":"TypeVar","contents":"list"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ToRecord"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[830,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[838,51]}}],"comments":"A typeclass for converting an `Option _` into a `Record _`.\n\nSince there is syntax for operating on records, but no syntax for operating on options, this typeclass can be useful for providing an easier to use interface to options.\n\nE.g. Someone can say:\n```PureScript\n(Option.toRecord' someOption).foo\n```\nInstead of having to say:\n```PureScript\nOption.get (Data.Symbol.SProxy :: _ \"foo\") someOption\n```\n\nNot only does it save a bunch of typing, it also mitigates the need for a direct dependency on `SProxy _`.\n","title":"ToRecord","info":{"fundeps":[[["option"],["record"]]],"arguments":[["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[809,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[822,18]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"toRecordOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}]}]},null]}},"sourceSpan":{"start":[845,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[849,18]}},{"comments":null,"title":"toRecordOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ToRecordOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[851,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[858,26]}},{"comments":null,"title":"toRecordOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"record'"},{"annotation":[],"tag":"TypeVar","contents":"record"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"ToRecordOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"record'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"ToRecordOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]},{"annotation":[],"tag":"TypeVar","contents":"record"}]}},"sourceSpan":{"start":[859,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[888,29]}}],"comments":"A typeclass that iterates a `RowList` converting an `Option _` into a `Record _`.\n","title":"ToRecordOption","info":{"fundeps":[[["list"],["option","record"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["record",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[841,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[849,18]}},{"children":[{"comments":"The `proxy` can be anything so long as its type variable has kind `Prim.RowList.RowList`.\n\nIt will commonly be `Type.Data.RowList.RLProxy`, but doesn't have to be.\n","title":"writeForeignOption","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["proxy",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"proxy"},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]},null]}},"sourceSpan":{"start":[895,3],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[899,20]}},{"comments":null,"title":"writeForeignOptionNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"WriteForeignOption"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[901,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[908,54]}},{"comments":null,"title":"writeForeignOptionCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"value"},{"annotation":[],"tag":"TypeVar","contents":"option'"},{"annotation":[],"tag":"TypeVar","contents":"option"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Lacks"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"label"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Simple","JSON"],"WriteForeign"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Option"],"WriteForeignOption"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"list"},{"annotation":[],"tag":"TypeVar","contents":"option'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Option"],"WriteForeignOption"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"label"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeVar","contents":"list"}]}]},{"annotation":[],"tag":"TypeVar","contents":"option"}]}},"sourceSpan":{"start":[909,6],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[947,31]}}],"comments":"A typeclass that iterates a `RowList` writing an `Option _` to a `Foreign`.\n","title":"WriteForeignOption","info":{"fundeps":[[["list"],["option"]]],"arguments":[["list",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["option",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[891,1],"name":"/home/joneshf/programming/joneshf/purescript-option/publish/src/Option.purs","end":[899,20]}}]}],"resolvedDependencies":{"purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-ordered-collections":"1.6.1","purescript-control":"4.2.0","purescript-variant":"6.0.1","purescript-console":"4.4.0","purescript-either":"4.1.1","purescript-profunctor":"4.1.0","purescript-arrays":"5.3.1","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-exists":"4.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.1.0","purescript-invariant":"4.1.0","purescript-argonaut-core":"5.0.2","purescript-lazy":"4.0.0","purescript-foreign-object":"2.0.3","purescript-codec-argonaut":"7.1.0","purescript-codec":"3.0.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.1.1","purescript-gen":"2.1.1","purescript-typelevel-prelude":"5.0.2","purescript-prelude":"4.1.1","purescript-st":"4.1.1","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.1","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-argonaut-codecs":"6.1.0","purescript-orders":"4.0.0","purescript-record":"2.0.2","purescript-transformers":"4.2.0","purescript-globals":"4.1.0","purescript-generics-rep":"6.1.1","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-psci-support":"4.0.0","purescript-simple-json":"7.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-strings":"4.0.2","purescript-identity":"4.1.0","purescript-foreign":"5.0.0","purescript-lists":"5.4.1","purescript-nullable":"4.1.1","purescript-functions":"4.0.0"},"version":"1.0.1","github":["joneshf","purescript-option"],"versionTag":"v1.0.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Foreign.Keys":"purescript-foreign","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Codec.Argonaut.Variant":"purescript-codec-argonaut","Data.Argonaut.Parser":"purescript-argonaut-core","Data.Argonaut.Encode.Combinators":"purescript-argonaut-codecs","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Data.Profunctor.Cowrap":"purescript-profunctor","Record.Builder":"purescript-record","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Codec.Argonaut.Record":"purescript-codec-argonaut","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Simple.JSON":"purescript-simple-json","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Codec.Argonaut.Common":"purescript-codec-argonaut","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Data.Codec":"purescript-codec","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Argonaut.Encode.Class":"purescript-argonaut-codecs","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Data.Profunctor.Clown":"purescript-profunctor","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Foreign.Index":"purescript-foreign","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Codec.Argonaut.Sum":"purescript-codec-argonaut","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Type.RowList":"purescript-typelevel-prelude","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.Argonaut.Decode":"purescript-argonaut-codecs","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Data.Codec.Argonaut.Migration":"purescript-codec-argonaut","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Set":"purescript-ordered-collections","Data.Codec.Argonaut.Generic":"purescript-codec-argonaut","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Variant":"purescript-variant","Data.Variant.Internal":"purescript-variant","Control.Monad.Cont.Class":"purescript-transformers","Data.Argonaut.Decode.Combinators":"purescript-argonaut-codecs","Data.Identity":"purescript-identity","Math":"purescript-math","Data.Set.NonEmpty":"purescript-ordered-collections","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Data.Argonaut.Encode":"purescript-argonaut-codecs","Data.Map.Internal":"purescript-ordered-collections","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Data.Codec.Argonaut":"purescript-codec-argonaut","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Foreign":"purescript-foreign","Control.Monad.Error.Class":"purescript-transformers","Data.Argonaut.Core":"purescript-argonaut-core","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Argonaut.Decode.Class":"purescript-argonaut-codecs","Data.Either":"purescript-either","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Data.Variant":"purescript-variant","Record.Unsafe":"purescript-prelude","Control.Monad.Writer":"purescript-transformers","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Profunctor.Choice":"purescript-profunctor","Data.Codec.Argonaut.Compat":"purescript-codec-argonaut","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.13.3"}