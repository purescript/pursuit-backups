{"uploader":"fsoikin","packageMeta":{"repository":{"url":"https://github.com/collegevine/purescript-elmish-enzyme.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-exceptions":"^v5.0.0","purescript-effect":"^v3.0.0","purescript-console":"^v5.0.0","purescript-arrays":"^v6.0.1","purescript-elmish":"^v0.5.6","purescript-aff":"^v6.0.0","purescript-foldable-traversable":"^v5.0.1","purescript-debug":"^v5.0.0","purescript-prelude":"^v5.0.1","purescript-transformers":"^v5.2.0","purescript-psci-support":"^v5.0.0","purescript-foreign":"^v6.0.1","purescript-functions":"^v5.0.0"},"name":"purescript-elmish-enzyme","license":["MIT"]},"tagTime":"2022-01-02T02:52:36+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Elmish","Enzyme","Foreign"]},"declarations":[{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},"keyword":"data"},"children":[],"comments":null,"title":"Wrapper","info":{"declType":"data","dataDeclType":"data","typeArguments":[["w",{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]}]]},"sourceSpan":{"start":[51,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[51,37]}},{"kind":null,"children":[],"comments":null,"title":"SingleNode","info":{"kind":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]},"declType":"externData"},"sourceSpan":{"start":[48,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[48,51]}},{"kind":null,"children":[],"comments":null,"title":"ManyNodes","info":{"kind":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]},"declType":"externData"},"sourceSpan":{"start":[49,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[49,50]}},{"kind":null,"children":[],"comments":"Configures the correct Enzyme adapter. Called once in the main spec.\n","title":"configure","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[54,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[54,36]}}]}],"name":"Elmish.Enzyme","comments":"Bindings for the [Enzyme library](https://enzymejs.github.io/enzyme/) to\nuse with the [Elmish\nlibrary](https://github.com/collegevine/purescript-elmish).\n\nThe API here is presented in monadic style, with the idea that there is\nalways a \"current\" DOM element (or, more precisely, current\n`Wrapper`, which may refer to zero or more actual DOM elements),\nwith respect to which all operations run. A test starts with either\n`testComponent` or `testElement`, and it's that component (or element) that\nbecomes the \"current\" element at the start, for example:\n\n```purs\n-- The main module:\nmyComponent :: ComponentDef Message State\nmyComponent = { init, view, update } where ...\n\n-- The test module:\nimport Elmish.Enzyme (testComponent, text)\n\nsomeTest = it \"contains the right text\" do\n testComponent myComponent do\n   content <- text\n   content `shouldContain` \"right\"\n```\n\nFrom there, it's possible to \"drill down\" into a particular element, making\nit \"current\" temporarily, via `withSelector` or `withElement` (similar to\nCapybara's `within`), for example:\n\n```purs\nimport Elmish.Enzyme (testComponent, text, withSelector)\n\nsomeTest = it \"has two buttons with the right text\" do\n testComponent myComponent do\n   withSelector \"button.first-button\" do\n     content <- text\n     content `shouldEqual` \"I'm the first button!\"\n\n   withSelector \"button.second-button\" do\n     content <- text\n     content `shouldEqual` \"I'm the second button!\"\n```\n\nAlternatively, operations that return a `Wrapper` may be combined\nin a chain using the `>>` operator (which is just a convenient facade for\n`withElement` under the hood):\n\n```purs\nimport Elmish.Enzyme (testComponent, text, find, findAll, at, (>>))\n\nsomeTest = it \"has two buttons with the right text\" do\n testComponent myComponent do\n   -- A short chain, just two functions:\n   b1 <- find \"button.first-button\" >> text\n   b1 `shouldEqual` \"I'm the first button!\"\n\n   -- A longer chain: `findAll`, then `at`, then `text`\n   b2 <- findAll \"button\" >> at 1 >> text\n   b2 `shouldEqual` \"I'm the second button!\"\n\n   -- An even longer chain:\n   b3 <- findAll \".card\" >> at 3 >> findAll \"button\" >> at 1 >> text\n   b3 `shouldEqual` \"I'm second button in 4th card!\"\n```\n\nThe end result is an API that somewhat resembles how Emzyme would be used\nfrom JavaScript, as well as other similar testing libraries, sych as\nCapybara.\n","declarations":[{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"keyword":"type"},"children":[],"comments":"Monad for running Enzyme tests. Keeps a reference to the \"current\" DOM\nelement(s) and tracks the current element's multiplicity (whether it's a\nsingle node or multiple) at type level (the `context` parameter), allowing\nto check validity of certain functions at compile-time (e.g. `text` only\nworks on a single element).\n","title":"EnzymeM","info":{"arguments":[["context",{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]}]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Trans"],"ReaderT"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"context"}]}}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]}},"sourceSpan":{"start":[122,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[122,75]}},{"kind":null,"children":[],"comments":"Mounts the given component and runs the given action with the mounted\ncomponent as current context.\n\n```purescript\nit \"displays content\" do\n  testComponent (MyComponent.def props) do\n    exists \".t--my-content\" >>= shouldEqual true\n```\n","title":"testComponent","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[132,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[132,111]}},{"kind":null,"children":[],"comments":"Mounts the given element and runs the given action with the mounted element\nas current context.\n\n```purescript\npending' \"displays content\"\n  testElement (MyElement.render props) do\n    exists \".t--my-content\" >>= shouldEqual true\n```\n","title":"testElement","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[146,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[146,89]}},{"kind":null,"children":[],"comments":"The current context can contain multiple DOM elements. This function\nreturns the element at the given index (zero-based). See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/at.html for more\ninfo.\n\n```purs\nfindAll \"button\" >> at 3 >> text >>= shouldEqual \"Fourth button\"\n```\n","title":"at","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]}]}},"sourceSpan":{"start":[160,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[160,52]}},{"kind":null,"children":[],"comments":"A convienience shorthand for clicking an element known by CSS selector\n","title":"clickOn","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[267,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[267,46]}},{"kind":null,"children":[],"comments":"Returns the number of times a given selector appears.\n","title":"count","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}},"sourceSpan":{"start":[289,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[289,43]}},{"kind":null,"children":[],"comments":"Returns the string representing the DOM tree of the current element(s). See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/debug.html for more\ninfo.\n","title":"debug","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintArgs":[],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},null]}},"sourceSpan":{"start":[166,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[166,52]}},{"kind":null,"children":[],"comments":"Returns a `Boolean` indicating whether a given selector exists within the\ncurrent element.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/exists.html\nfor more info.\n","title":"exists","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]}},"sourceSpan":{"start":[177,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[177,48]}},{"kind":null,"children":[],"comments":"Finds a single element matching the given selector within the current\ncontext. If zero or multiple elements match the selector, crashes with a\ndescriptive error message.\n\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/find.html for\nmore info.\n","title":"find","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]}]},null]}},"sourceSpan":{"start":[194,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[194,59]}},{"kind":null,"children":[],"comments":"Finds all elements matching the given selector within the current\ncontext.\n\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/find.html for\nmore info.\n","title":"findAll","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]}}]}]},null]}},"sourceSpan":{"start":[185,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[185,61]}},{"kind":null,"children":[],"comments":"Basically, a DSL-friendly equivalent of `for_`: for each element in the\ncurrent `Wrapper` performs the given effect.\n\nExample:\n\n    findAll \"button\" >> forEach (simulate \"click\")\n\n    findAll \".t--foo\" >> forEach do\n      find \"input[type=text]\" >> simulate' \"change\" { target: { value: \"new text\" } }\n      find \"input[type=checkbox]\" >> simulate \"change\"\n      find \".t--bar\" >> text >>= shouldEqual \"qux\"\n\n","title":"forEach","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[358,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[358,61]}},{"kind":null,"children":[],"comments":"Returns a `Boolean` indicating whether the current element matches\nthe given selector.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/is.html\nfor more info.\n","title":"is","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[214,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[214,43]}},{"kind":null,"children":[],"comments":"Returns number of elements in the current context\n","title":"length","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[362,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[362,32]}},{"kind":null,"children":[],"comments":"Basically, a DSL-friendly equivalent of `map`: for each element in the\ncurrent `Wrapper` performs the given action and returns all results\nof that action as an array.\n\nExample:\n\n    allNames <- findAll \".t--foo\" >> mapEach text\n    allValues <- findAll \".t--foo\" >> mapEach (prop \"value\")\n\n","title":"mapEach","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[339,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[339,73]}},{"kind":null,"children":[],"comments":"Returns tag name of the current element.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/name.html\nfor more info.\n","title":"name","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[285,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[285,34]}},{"kind":null,"children":[],"comments":"Returns parent of the current element. When the current context contains\nmultiple elements, the result will contain exactly as many parents, even if\nsome of the elements have the same parent. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/parent.html for more\ninfo.\n","title":"parent","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}}]},null]}},"sourceSpan":{"start":[207,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[207,42]}},{"kind":null,"children":[],"comments":"Returns the value of the current element’s prop with a certain key.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/prop.html\nfor more info.\n","title":"prop","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[220,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[220,49]}},{"kind":null,"children":[],"comments":"A convenience function for calling `simulate'` without an `event` arg.\n","title":"simulate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[235,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[235,46]}},{"kind":null,"children":[],"comments":"Simulates a certain event type on the current element. The event argument\nis a record that gets merged with a simulated React synthetic event before\nbeing passed to the component’s event handler. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/simulate.html for\nmore info.\nNOTE: This doesn’t actually emit an event, but just triggers the event\nhandler on the wrapper.\n\nNOTE 2: This function only works for native HTML elements. For emitting\nevents on custom React components, use `simulateCustom`.\n","title":"simulate'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[250,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[250,69]}},{"kind":null,"children":[],"comments":"Simulates an event on a custom React component (i.e. not an HTML element).\nFor reasons to complicated to discuss here, the regular `simulate` doesn't\nwork on custom components, so we provide this workaround.\n\nNOTE: the second parameter is passed to the event handler without any\nchecks whatsoever. This is, of course, not type-safe, but it is in line\nwith what the event handler should expect anyway: after all, the underlying\nJavaScript component may pass anything at all as event argument.\n","title":"simulateCustom'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[262,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[262,68]}},{"kind":null,"children":[],"comments":"Returns the state of the current element. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/state.html for more\ninfo.\n","title":"state","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},"sourceSpan":{"start":[273,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[273,36]}},{"kind":null,"children":[],"comments":"Returns the text within the current element.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/text.html\nfor more info.\n","title":"text","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[279,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[279,34]}},{"kind":null,"children":[],"comments":"Returns all elements contained in the current `Wrapper` as an array.\n","title":"toArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]}}]}},"sourceSpan":{"start":[343,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[343,58]}},{"kind":null,"children":[],"comments":"Logs a string representing the DOM tree of the current element(s).\n","title":"trace","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintArgs":[],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[170,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[170,50]}},{"kind":null,"children":[],"comments":"Sets the state of the current element. Note that this is\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setState.html\nfor more info.\n\nNOTE: this is a type-unsafe operation. There is no check to make sure the\nstate being set here has the type of the actual state the component in\nquestion is using.\n","title":"unsafeSetState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[230,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[230,65]}},{"kind":null,"children":[],"comments":"Updates the current element to reflect the latest state. Call this function\nwhenever you think there could be an async change of state that caused a\nre-render. For some reason, Enzyme won't pick up the changes automatically.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/update.html for\nmore info.\n\nNOTE: this only works on the \"root\" element, which means it cannot be\ncalled inside `withSelector` or `withElement`.\n","title":"update","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}},"sourceSpan":{"start":[300,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[300,35]}},{"kind":null,"children":[],"comments":"Performs active wait while the given condition is false. Times out with a\ncrash after a second.\n","title":"waitUntil","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[385,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[385,59]}},{"kind":null,"children":[],"comments":"Performs active wait while the given condition is true. Times out with a\ncrash after given time period.\n","title":"waitUntil'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Time","Duration"],"Milliseconds"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[395,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[395,76]}},{"kind":null,"children":[],"comments":"Performs active wait while the given condition is true. Times out with a\ncrash after a second.\n","title":"waitWhile","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[380,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[380,59]}},{"kind":null,"children":[],"comments":"Performs active wait while the given condition is true. Times out with a\ncrash after given time period.\n","title":"waitWhile'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Time","Duration"],"Milliseconds"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[390,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[390,76]}},{"kind":null,"children":[],"comments":"Takes a `Wrapper` and runs an `EnzymeM` computation with the given\nwrapper as the new implicit wrapper. This can be thought of as analogous to\nCapybara’s `within`.\n\n```purescript\nbutton <- find \"button.my-button\"\nwithElement button do\n  simulate \"click\"\n  prop \"disabled\" >>= shouldEqual true\n```\n","title":"withElement","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["nOuter",{"annotation":[],"tag":"ForAll","contents":["nInner",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"nInner"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"nInner"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"nOuter"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[313,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[313,94]}},{"kind":null,"children":[],"comments":"A version of `withElement` that takes the `Wrapper` wrapped in\n`EnzymeM` rather than \"naked\". Aliased as the `>>` operator, this allows\nfor handy chaining of operations that return a `Wrapper`, for\nexample:\n\n```purescript\nfindAll \".foo\" >> at 1 >> find \".bar\" >> simulate \"click\"\n```\n","title":"withElementM","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["nOuter",{"annotation":[],"tag":"ForAll","contents":["nInner",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"nOuter"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"nInner"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"nInner"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"nOuter"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[325,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[325,112]}},{"kind":null,"children":[],"comments":"A convenience function which finds an element for the given selector and\npasses it to `withElement`.\n\n```purescript\nwithSelector \".t--my-button\" do\n  simulate \"click\"\n  prop \"disabled\" >>= shouldEqual true\n```\n","title":"withSelector","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme"],"EnzymeM"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[373,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[373,74]}},{"kind":null,"children":[],"comments":null,"title":"(>>)","info":{"declType":"alias","alias":[["Elmish","Enzyme"],{"Right":{"Left":{"Ident":"withElementM"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[328,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme.purs","end":[328,28]}}]},{"reExports":[],"name":"Elmish.Enzyme.Adapter","comments":null,"declarations":[{"kind":null,"children":[],"comments":null,"title":"Adapter","info":{"kind":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[15,36]}},{"kind":null,"children":[],"comments":null,"title":"unofficialReact_17","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[17,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[17,77]}},{"kind":null,"children":[],"comments":null,"title":"react_16_4","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[18,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[18,58]}},{"kind":null,"children":[],"comments":null,"title":"react_16_3","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[19,60]}},{"kind":null,"children":[],"comments":null,"title":"react_16_2","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[20,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[20,60]}},{"kind":null,"children":[],"comments":null,"title":"react_16_1","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[21,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[21,60]}},{"kind":null,"children":[],"comments":null,"title":"react_15_5","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[22,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[22,58]}},{"kind":null,"children":[],"comments":null,"title":"react_15_4","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[23,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[23,60]}},{"kind":null,"children":[],"comments":null,"title":"react_14","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[24,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[24,56]}},{"kind":null,"children":[],"comments":null,"title":"react_13","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}},"sourceSpan":{"start":[25,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Adapter.purs","end":[25,56]}}]},{"reExports":[],"name":"Elmish.Enzyme.Foreign","comments":"Provides an FFI bindings for the\n[Enzyme](https://enzymejs.github.io/enzyme/) library. This is a pretty thin\nwrapper around Enzyme with a few convenience functions added. For a\nconvenient API, use `Elmish.Enzyme` instead.\n","declarations":[{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},"keyword":"data"},"children":[],"comments":null,"title":"Wrapper","info":{"declType":"data","dataDeclType":"data","typeArguments":[["w",{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]}]]},"sourceSpan":{"start":[51,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[51,37]}},{"kind":null,"children":[],"comments":null,"title":"NodeMultiplicity","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[47,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[47,22]}},{"kind":null,"children":[],"comments":null,"title":"SingleNode","info":{"kind":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]},"declType":"externData"},"sourceSpan":{"start":[48,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[48,51]}},{"kind":null,"children":[],"comments":null,"title":"ManyNodes","info":{"kind":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"NodeMultiplicity"]},"declType":"externData"},"sourceSpan":{"start":[49,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[49,50]}},{"kind":null,"children":[],"comments":"Configures the correct Enzyme adapter. Called once in the main spec.\n","title":"configure","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Adapter"],"Adapter"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[54,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[54,36]}},{"kind":null,"children":[],"comments":"Returns the number of times a given selector appears within a wrapper.\n","title":"count","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[194,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[194,67]}},{"kind":null,"children":[],"comments":"Fully mounts a `ReactElement` and returns a `Wrapper`.\nSee https://enzymejs.github.io/enzyme/docs/api/shallow.html for more info.\n","title":"mount","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]}]}]},null]}},"sourceSpan":{"start":[59,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[59,75]}},{"kind":null,"children":[],"comments":"A convenience function for creating a full wrapper from a `ComponentDef`\nrather than a `ReactElement`. This also adds a `delay (Milliseconds 0.0)`\nto allow any effects in `def.init` to run.\n","title":"mountComponent","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[66,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[66,101]}},{"kind":null,"children":[],"comments":"A `Wrapper` can wrap multiple DOM nodes. This function returns the node at\nthe given index. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/at.html for more\ninfo.\n","title":"at","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]}]}]}]},null]}},"sourceSpan":{"start":[77,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[77,84]}},{"kind":null,"children":[],"comments":"Prints the shallow DOM tree up to any nested React components.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/debug.html\nfor more info.\n","title":"debug","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]},null]},null]}},"sourceSpan":{"start":[92,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[92,60]}},{"kind":null,"children":[],"comments":"Returns a `Boolean` indicating whether a given selector exists within the\ngiven `Wrapper`.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/exists.html\nfor more info.\n","title":"exists","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[99,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[99,72]}},{"kind":null,"children":[],"comments":"Finds all elements with the given selector within the given\n`Wrapper`. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/find.html for\nmore info.\n","title":"find","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[106,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[106,82]}},{"kind":null,"children":[],"comments":"Runs the given action for every element contained in the given\n`Wrapper` as an array.\n","title":"forEach","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[86,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[86,100]}},{"kind":null,"children":[],"comments":"Returns a `Boolean` indicating whether the given `Wrapper` matches\nthe given selector.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/is.html\nfor more info.\n","title":"is","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[119,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[119,77]}},{"kind":null,"children":[],"comments":"Returns number of elements in a given wrapper\n","title":"length","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[123,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[123,50]}},{"kind":null,"children":[],"comments":"Returns tag name of the given `Wrapper`.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/name.html\nfor more info.\n","title":"name","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]},null]}},"sourceSpan":{"start":[190,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[190,66]}},{"kind":null,"children":[],"comments":"Returns parent of the given `Wrapper`. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/parent.html for\nmore info.\n","title":"parent","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[112,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[112,66]}},{"kind":null,"children":[],"comments":"Returns the value of a `Wrapper`’s prop with a certain key.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/prop.html\nfor more info.\n","title":"prop","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[128,73]}},{"kind":null,"children":[],"comments":"A convenience function for calling `simulate'` without an `event` arg.\n","title":"simulate","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[144,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[144,78]}},{"kind":null,"children":[],"comments":"Simulates a certain event type on a given `Wrapper`. The event argument\nis a record that gets merged with a simulated React synthetic event before\nbeing passed to the component’s event handler. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/simulate.html for\nmore info.\nNOTE: This doesn’t actually emit an event, but just triggers the event\nhandler on the wrapper.\n\nNOTE 2: This function only works for native HTML elements. For emitting\nevents on custom React components, use `simulateCustom`.\n","title":"simulate'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[159,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[159,93]}},{"kind":null,"children":[],"comments":"Simulates an event on a custom React component (i.e. not an HTML element).\nFor reasons to complicated to discuss here, the regular `simulate` doesn't\nwork on custom components, so we provide this workaround.\n\nNOTE: the second parameter is passed to the event handler without any\nchecks whatsoever. This is, of course, not type-safe, but it is in line\nwith what the event handler should expect anyway: after all, the underlying\nJavaScript component may pass anything at all as event argument.\n","title":"simulateCustom'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[171,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[171,92]}},{"kind":null,"children":[],"comments":"Returns the state of the given `Wrapper`.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/state.html\nfor more info.\n","title":"state","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}]},null]}},"sourceSpan":{"start":[178,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[178,68]}},{"kind":null,"children":[],"comments":"Returns the text within the given `Wrapper`.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/text.html\nfor more info.\n","title":"text","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]},null]}},"sourceSpan":{"start":[184,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[184,66]}},{"kind":null,"children":[],"comments":"Returns all elements contained in the given `Wrapper` as an array.\n","title":"toArray","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"ManyNodes"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}}]}}]}]}]},null]}},"sourceSpan":{"start":[81,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[81,90]}},{"kind":null,"children":[],"comments":"Unmounts a fully mounted component.\nSee https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/unmount.html\nfor more info.\n","title":"unmount","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[201,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[201,67]}},{"kind":null,"children":[],"comments":"Sets the state of the given `Wrapper`. This is asynchronous, so runs\nin a `MonadAff`. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setState.html for\nmore info.\n\nNOTE: this is a type-unsafe operation. There is no check to make sure the\nstate being set here has the type of the actual state the component in\nquestion is using.\n","title":"unsafeSetState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"SingleNode"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[139,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[139,86]}},{"kind":null,"children":[],"comments":"Updates the given `Wrapper` to reflect the latest state. Call this\nfunction whenever you think there could be an async change of state that\ncaused a re-render. For some reason, Enzyme won't pick up the changes\nautomatically. See\nhttps://enzymejs.github.io/enzyme/docs/api/ReactWrapper/update.html for\nmore info.\n","title":"update","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Enzyme","Foreign"],"Wrapper"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[211,1],"name":"C:\\w\\elmish-enzyme\\src\\Elmish\\Enzyme\\Foreign.purs","end":[211,59]}}]}],"resolvedDependencies":{"purescript-web-storage":"4.0.0","purescript-exceptions":"5.0.0","purescript-newtype":"4.0.0","purescript-effect":"3.0.0","purescript-ordered-collections":"2.0.2","purescript-control":"5.0.0","purescript-console":"5.0.0","purescript-either":"5.0.0","purescript-profunctor":"5.0.0","purescript-media-types":"5.0.0","purescript-web-events":"3.0.0","purescript-arrays":"6.0.1","purescript-maybe":"5.0.0","purescript-type-equality":"4.0.0","purescript-exists":"5.1.0","purescript-distributive":"5.0.0","purescript-unfoldable":"5.0.0","purescript-invariant":"5.0.0","purescript-web-html":"3.2.0","purescript-argonaut-core":"6.0.0","purescript-lazy":"5.0.0","purescript-foreign-object":"3.0.0","purescript-now":"5.0.0","purescript-elmish":"0.5.6","purescript-aff":"6.0.0","purescript-foldable-traversable":"5.0.1","purescript-debug":"5.0.0","purescript-tailrec":"5.0.1","purescript-gen":"3.0.0","purescript-typelevel-prelude":"6.0.0","purescript-functors":"4.1.1","purescript-prelude":"5.0.1","purescript-st":"5.0.1","purescript-bifunctors":"5.0.0","purescript-nonempty":"6.1.0","purescript-contravariant":"5.0.0","purescript-unsafe-coerce":"5.0.0","purescript-refs":"5.0.0","purescript-integers":"5.0.0","purescript-orders":"5.0.0","purescript-const":"5.0.0","purescript-record":"3.0.0","purescript-transformers":"5.2.0","purescript-numbers":"8.0.0","purescript-js-date":"7.0.0","purescript-math":"3.0.0","purescript-enums":"5.0.0","purescript-psci-support":"5.0.0","purescript-web-file":"3.0.0","purescript-web-dom":"5.0.0","purescript-parallel":"5.0.0","purescript-tuples":"6.0.1","purescript-partial":"3.0.0","purescript-strings":"5.0.0","purescript-identity":"5.0.0","purescript-foreign":"6.0.1","purescript-safe-coerce":"1.0.0","purescript-lists":"6.0.1","purescript-nullable":"5.0.0","purescript-datetime":"5.0.2","purescript-functions":"5.0.0"},"version":"0.0.2","github":["collegevine","purescript-elmish-enzyme"],"versionTag":"v0.0.2","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Web.DOM.NodeList":"purescript-web-dom","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Web.HTML.HTMLDataListElement":"purescript-web-html","Control.Monad.Trans.Class":"purescript-transformers","Web.HTML.HTMLTextAreaElement":"purescript-web-html","Record.Unsafe.Union":"purescript-record","Data.Functor.Product":"purescript-functors","Type.Function":"purescript-typelevel-prelude","Data.Functor.Flip":"purescript-functors","Foreign.Keys":"purescript-foreign","Data.NonEmpty":"purescript-nonempty","Web.HTML.HTMLMediaElement.CanPlayType":"purescript-web-html","Effect.Uncurried":"purescript-effect","Web.DOM.ChildNode":"purescript-web-dom","Control.Monad.Identity.Trans":"purescript-transformers","Data.Char.Gen":"purescript-strings","Web.HTML.Event.DataTransfer.DataTransferItem":"purescript-web-html","Web.HTML.HTMLHRElement":"purescript-web-html","Web.DOM.NonDocumentTypeChildNode":"purescript-web-dom","Effect.Now":"purescript-now","Data.Monoid.Generic":"purescript-prelude","Data.String.NonEmpty":"purescript-strings","Web.File.FileReader.ReadyState":"purescript-web-file","Effect":"purescript-effect","Web.HTML.HTMLLegendElement":"purescript-web-html","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Elmish.Component":"purescript-elmish","Web.HTML.Event.HashChangeEvent":"purescript-web-html","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Costar":"purescript-functors","Elmish.State":"purescript-elmish","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Functor.Compose":"purescript-functors","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Web.HTML.Event.BeforeUnloadEvent":"purescript-web-html","Web.DOM.MutationObserver":"purescript-web-dom","Web.HTML.HTMLHyperlinkElementUtils":"purescript-web-html","Data.DateTime":"purescript-datetime","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Web.HTML.History":"purescript-web-html","Control.Monad.Gen":"purescript-gen","Data.Bounded.Generic":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Data.Argonaut.Parser":"purescript-argonaut-core","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Web.HTML.Event.PopStateEvent.EventTypes":"purescript-web-html","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Web.DOM.ParentNode":"purescript-web-dom","Record.Builder":"purescript-record","Web.HTML.Event.DragEvent.EventTypes":"purescript-web-html","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Web.HTML.HTMLSpanElement":"purescript-web-html","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-prelude","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.Enum.Generic":"purescript-enums","Data.DateTime.Gen":"purescript-datetime","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Web.HTML.HTMLOptionElement":"purescript-web-html","Data.Int":"purescript-integers","Web.DOM.HTMLCollection":"purescript-web-dom","Data.Profunctor.Cochoice":"purescript-profunctor","Web.HTML.Event.TrackEvent.EventTypes":"purescript-web-html","Data.Show":"purescript-prelude","Web.HTML.HTMLDivElement":"purescript-web-html","Control.Monad.Writer.Trans":"purescript-transformers","Web.File.FileReader":"purescript-web-file","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Number":"purescript-numbers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Web.HTML.HTMLKeygenElement":"purescript-web-html","Data.List.Internal":"purescript-lists","Control.Monad":"purescript-prelude","Web.HTML.Event.EventTypes":"purescript-web-html","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Elmish.JsCallback":"purescript-elmish","Web.HTML.Common":"purescript-web-html","Control.Monad.List.Trans":"purescript-transformers","Data.Ord.Generic":"purescript-prelude","Web.HTML.HTMLLabelElement":"purescript-web-html","Web.HTML.HTMLAudioElement":"purescript-web-html","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Web.HTML.HTMLFormElement":"purescript-web-html","Data.Profunctor.Split":"purescript-profunctor","Web.DOM.Element":"purescript-web-dom","Data.Number.Format":"purescript-numbers","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Web.HTML.HTMLMediaElement.ReadyState":"purescript-web-html","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Web.HTML.HTMLTableElement":"purescript-web-html","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Web.HTML.HTMLLIElement":"purescript-web-html","Data.Ring.Generic":"purescript-prelude","Web.HTML.HTMLMetaElement":"purescript-web-html","Web.HTML.HTMLOListElement":"purescript-web-html","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Web.HTML.Event.DragEvent":"purescript-web-html","Control.Monad.Reader":"purescript-transformers","Web.HTML.HTMLHtmlElement":"purescript-web-html","Data.Const":"purescript-const","Web.HTML.Event.PopStateEvent":"purescript-web-html","Web.Event.CustomEvent":"purescript-web-events","Web.HTML.Event.ErrorEvent":"purescript-web-html","Control.Comonad.Traced.Trans":"purescript-transformers","Web.DOM.Text":"purescript-web-dom","Web.HTML.HTMLObjectElement":"purescript-web-html","Web.HTML.HTMLSourceElement":"purescript-web-html","Data.Ord.Down":"purescript-orders","Data.Number.Approximate":"purescript-numbers","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Web.DOM.NodeType":"purescript-web-dom","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Functor.Clown":"purescript-functors","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Foreign.Index":"purescript-foreign","Control.Alternative":"purescript-control","Web.HTML.HTMLSelectElement":"purescript-web-html","Data.Semiring":"purescript-prelude","Elmish":"purescript-elmish","Data.Functor.Product2":"purescript-functors","Web.HTML.HTMLCanvasElement":"purescript-web-html","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Web.HTML.HTMLTableDataCellElement":"purescript-web-html","Web.HTML.HTMLTableCaptionElement":"purescript-web-html","Data.Functor.App":"purescript-functors","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Elmish.Boot":"purescript-elmish","Web.HTML.HTMLTemplateElement":"purescript-web-html","Web.HTML.SelectionMode":"purescript-web-html","Type.RowList":"purescript-typelevel-prelude","Web.HTML.HTMLTitleElement":"purescript-web-html","Web.HTML.Event.PageTransitionEvent.EventTypes":"purescript-web-html","Web.HTML.HTMLTableCellElement":"purescript-web-html","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Web.HTML.HTMLUListElement":"purescript-web-html","Elmish.React":"purescript-elmish","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Web.HTML.HTMLParamElement":"purescript-web-html","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Web.HTML.HTMLTableSectionElement":"purescript-web-html","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Web.HTML.HTMLImageElement.CORSMode":"purescript-web-html","Web.Event.EventTarget":"purescript-web-events","Elmish.React.DOM":"purescript-elmish","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Debug":"purescript-debug","Web.HTML.HTMLOutputElement":"purescript-web-html","Web.DOM.DocumentType":"purescript-web-dom","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Web.HTML.HTMLQuoteElement":"purescript-web-html","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Set":"purescript-ordered-collections","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Web.DOM.Internal.Types":"purescript-web-dom","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Web.HTML.Event.DataTransfer":"purescript-web-html","Data.EuclideanRing":"purescript-prelude","Web.HTML.Event.TrackEvent":"purescript-web-html","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Web.HTML.HTMLVideoElement":"purescript-web-html","Web.HTML.HTMLAnchorElement":"purescript-web-html","Control.Comonad.Traced":"purescript-transformers","Web.DOM.CharacterData":"purescript-web-dom","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Web.HTML.HTMLDocument":"purescript-web-html","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Web.HTML.Event.PageTransitionEvent":"purescript-web-html","Control.Comonad.Env.Class":"purescript-transformers","Web.Event.EventPhase":"purescript-web-events","Web.HTML.HTMLOptGroupElement":"purescript-web-html","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Web.HTML.HTMLIFrameElement":"purescript-web-html","Data.Either.Nested":"purescript-either","Web.HTML.Navigator":"purescript-web-html","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Elmish.React.Import":"purescript-elmish","Data.Bifunctor":"purescript-bifunctors","Web.File.FileList":"purescript-web-file","Data.Monoid.Disj":"purescript-prelude","Data.MediaType":"purescript-media-types","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Web.HTML.HTMLMapElement":"purescript-web-html","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Web.HTML.HTMLImageElement.Laziness":"purescript-web-html","Web.DOM.MutationRecord":"purescript-web-dom","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Web.HTML.HTMLMediaElement":"purescript-web-html","Web.HTML.HTMLTableRowElement":"purescript-web-html","Data.DateTime.Instant":"purescript-datetime","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Web.HTML.HTMLImageElement.DecodingHint":"purescript-web-html","Web.HTML.HTMLEmbedElement":"purescript-web-html","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Web.File.Url":"purescript-web-file","Web.HTML.HTMLDocument.ReadyState":"purescript-web-html","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Web.HTML.HTMLMediaElement.NetworkState":"purescript-web-html","Web.DOM.Comment":"purescript-web-dom","Web.File.Blob":"purescript-web-file","Data.Eq.Generic":"purescript-prelude","Web.HTML.HTMLMeterElement":"purescript-web-html","Web.DOM.ProcessingInstruction":"purescript-web-dom","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Web.HTML.HTMLParagraphElement":"purescript-web-html","Web.DOM":"purescript-web-dom","Data.List.Lazy.NonEmpty":"purescript-lists","Web.HTML.HTMLButtonElement":"purescript-web-html","Elmish.Dispatch":"purescript-elmish","Data.Ordering":"purescript-prelude","Web.HTML.HTMLModElement":"purescript-web-html","Data.Functor.Coproduct":"purescript-functors","Web.Event.Event":"purescript-web-events","Web.HTML.HTMLDListElement":"purescript-web-html","Control.Monad.Cont.Class":"purescript-transformers","Web.File.File":"purescript-web-file","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Web.HTML.Location":"purescript-web-html","Web.HTML.ValidityState":"purescript-web-html","Math":"purescript-math","Web.HTML.HTMLTableColElement":"purescript-web-html","Data.Set.NonEmpty":"purescript-ordered-collections","Web.Storage.Storage":"purescript-web-storage","Control.Comonad.Trans.Class":"purescript-transformers","Web.HTML.HTMLInputElement":"purescript-web-html","Data.String":"purescript-strings","Control.Plus":"purescript-control","Web.HTML.HTMLTimeElement":"purescript-web-html","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.JSDate":"purescript-js-date","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Web.HTML":"purescript-web-html","Web.HTML.HTMLProgressElement":"purescript-web-html","Web.HTML.HTMLTrackElement.ReadyState":"purescript-web-html","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Web.DOM.NonElementParentNode":"purescript-web-dom","Web.HTML.HTMLBaseElement":"purescript-web-html","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Web.DOM.Node":"purescript-web-dom","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Functor.Joker":"purescript-functors","Type.Data.Symbol":"purescript-typelevel-prelude","Web.Storage.Event.StorageEvent":"purescript-web-storage","Web.HTML.HTMLElement":"purescript-web-html","Data.Array.ST":"purescript-arrays","Web.Event.Internal.Types":"purescript-web-events","Foreign":"purescript-foreign","Control.Monad.Error.Class":"purescript-transformers","Data.Argonaut.Core":"purescript-argonaut-core","Web.DOM.ShadowRoot":"purescript-web-dom","Control.Semigroupoid":"purescript-prelude","Web.Internal.FFI":"purescript-web-events","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-prelude","Web.HTML.HTMLFieldSetElement":"purescript-web-html","Web.HTML.HTMLLinkElement":"purescript-web-html","Web.HTML.Event.HashChangeEvent.EventTypes":"purescript-web-html","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Web.HTML.HTMLBRElement":"purescript-web-html","Web.HTML.HTMLHeadingElement":"purescript-web-html","Web.HTML.HTMLHeadElement":"purescript-web-html","Web.HTML.HTMLDataElement":"purescript-web-html","Elmish.Foreign":"purescript-elmish","Web.HTML.HTMLBodyElement":"purescript-web-html","Data.Bifoldable":"purescript-foldable-traversable","Web.HTML.Event.BeforeUnloadEvent.EventTypes":"purescript-web-html","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Web.HTML.Window":"purescript-web-html","Data.Semiring.Generic":"purescript-prelude","Web.HTML.HTMLTableHeaderCellElement":"purescript-web-html","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Web.HTML.HTMLImageElement":"purescript-web-html","Data.Op":"purescript-contravariant","Web.HTML.HTMLPreElement":"purescript-web-html","Web.HTML.HTMLScriptElement":"purescript-web-html","Record.Unsafe":"purescript-prelude","Data.MediaType.Common":"purescript-media-types","Web.DOM.DocumentFragment":"purescript-web-dom","Elmish.Ref":"purescript-elmish","Control.Monad.Writer":"purescript-transformers","Web.DOM.DOMTokenList":"purescript-web-dom","Web.HTML.HTMLAreaElement":"purescript-web-html","Web.DOM.Document":"purescript-web-dom","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Profunctor.Choice":"purescript-profunctor","Data.Time.Gen":"purescript-datetime","Web.HTML.HTMLTrackElement":"purescript-web-html","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings","Web.HTML.HTMLStyleElement":"purescript-web-html","Elmish.Trace":"purescript-elmish"},"compilerVersion":"0.14.5"}