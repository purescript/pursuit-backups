{"uploader":"JordanMartinez","packageMeta":{"homepage":"https://github.com/purescript/purescript-integers","repository":{"url":"https://github.com/purescript/purescript-integers.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-console":"^6.0.0","purescript-assert":"^6.0.0","purescript-partial":"^4.0.0"},"dependencies":{"purescript-maybe":"^6.0.0","purescript-prelude":"^6.0.0","purescript-numbers":"^9.0.0"},"name":"purescript-integers","license":["BSD-3-Clause"]},"tagTime":"2022-04-27T19:25:19+0000","modules":[{"reExports":[],"name":"Data.Int","comments":null,"declarations":[{"kind":null,"children":[],"comments":"Creates an `Int` from a `Number` value. The number must already be an\ninteger and fall within the valid range of values for the `Int` type\notherwise `Nothing` is returned.\n","title":"fromNumber","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[37,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[37,34]}},{"kind":null,"children":[],"comments":"Convert a `Number` to an `Int`, by taking the closest integer equal to or\ngreater than the argument. Values outside the `Int` range are clamped,\n`NaN` and `Infinity` values return 0.\n","title":"ceil","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[55,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[55,22]}},{"kind":null,"children":[],"comments":"Convert a `Number` to an `Int`, by taking the closest integer equal to or\nless than the argument. Values outside the `Int` range are clamped, `NaN`\nand `Infinity` values return 0.\n","title":"floor","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[49,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[49,23]}},{"kind":null,"children":[],"comments":"Convert a `Number` to an `Int`, by dropping the decimal.\nValues outside the `Int` range are clamped, `NaN` and `Infinity`\nvalues return 0.\n","title":"trunc","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[61,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[61,23]}},{"kind":null,"children":[],"comments":"Convert a `Number` to an `Int`, by taking the nearest integer to the\nargument. Values outside the `Int` range are clamped, `NaN` and `Infinity`\nvalues return 0.\n","title":"round","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[67,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[67,23]}},{"kind":null,"children":[],"comments":"Converts an `Int` value back into a `Number`. Any `Int` is a valid `Number`\nso there is no loss of precision with this function.\n","title":"toNumber","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[81,41]}},{"kind":null,"children":[],"comments":"Reads an `Int` from a `String` value. The number must parse as an integer\nand fall within the valid range of values for the `Int` type, otherwise\n`Nothing` is returned.\n","title":"fromString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[86,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[86,34]}},{"kind":null,"children":[],"comments":"The number of unique digits (including zero) used to represent integers in\na specific base.\n","title":"Radix","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[175,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[175,26]}},{"kind":null,"children":[],"comments":"Create a `Radix` from a number between 2 and 36.\n","title":"radix","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}]}]}},"sourceSpan":{"start":[198,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[198,28]}},{"kind":null,"children":[],"comments":"The base-2 system.\n","title":"binary","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[178,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[178,16]}},{"kind":null,"children":[],"comments":"The base-8 system.\n","title":"octal","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[182,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[182,15]}},{"kind":null,"children":[],"comments":"The base-10 system.\n","title":"decimal","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[186,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[186,17]}},{"kind":null,"children":[],"comments":"The base-16 system.\n","title":"hexadecimal","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[190,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[190,21]}},{"kind":null,"children":[],"comments":"The base-36 system.\n","title":"base36","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[194,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[194,16]}},{"kind":null,"children":[],"comments":"Like `fromString`, but the integer can be specified in a different base.\n\nExample:\n``` purs\nfromStringAs binary      \"100\" == Just 4\nfromStringAs hexadecimal \"ff\"  == Just 255\n```\n","title":"fromStringAs","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[209,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[209,45]}},{"kind":null,"children":[],"comments":null,"title":"toStringAs","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[257,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[257,52]}},{"kind":null,"children":[{"comments":null,"title":"Even","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"start":[112,13],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[112,19]}},{"comments":null,"title":"Odd","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"start":[112,20],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[112,25]}},{"comments":null,"title":"eqParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[114,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[114,38]}},{"comments":null,"title":"ordParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[115,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[115,40]}},{"comments":null,"title":"showParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[117,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[119,19]}},{"comments":null,"title":"boundedParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[121,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[123,12]}},{"comments":null,"title":"semiringParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[125,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[130,17]}},{"comments":null,"title":"ringParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[132,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[133,12]}},{"comments":null,"title":"commutativeRingParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[135,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[135,57]}},{"comments":null,"title":"euclideanRingParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[137,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[141,17]}},{"comments":null,"title":"divisionRingParity","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","DivisionRing"],"DivisionRing"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[143,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[144,19]}}],"comments":"A type for describing whether an integer is even or odd.\n\nThe `Ord` instance considers `Even` to be less than `Odd`.\n\nThe `Semiring` instance allows you to ask about the parity of the results\nof arithmetical operations, given only the parities of the inputs. For\nexample, the sum of an odd number and an even number is odd, so\n`Odd + Even == Odd`. This also works for multiplication, eg. the product\nof two odd numbers is odd, and therefore `Odd * Odd == Odd`.\n\nMore generally, we have that\n\n```purescript\nparity x + parity y == parity (x + y)\nparity x * parity y == parity (x * y)\n```\n\nfor any integers `x`, `y`. (A mathematician would say that `parity` is a\n*ring homomorphism*.)\n\nAfter defining addition and multiplication on `Parity` in this way, the\n`Semiring` laws now force us to choose `zero = Even` and `one = Odd`.\nThis `Semiring` instance actually turns out to be a `Field`.\n","title":"Parity","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[112,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[112,25]}},{"kind":null,"children":[],"comments":"Returns whether an `Int` is `Even` or `Odd`.\n\n``` purescript\nparity 0 == Even\nparity 1 == Odd\n```\n","title":"parity","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[152,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[152,24]}},{"kind":null,"children":[],"comments":"Returns whether an `Int` is an even number.\n\n``` purescript\neven 0 == true\neven 1 == false\n```\n","title":"even","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[161,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[161,23]}},{"kind":null,"children":[],"comments":"The negation of `even`.\n\n``` purescript\nodd 0 == false\nodd 1 == true\n```\n","title":"odd","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[170,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[170,22]}},{"kind":null,"children":[],"comments":"The `quot` function provides _truncating_ integer division (see the\ndocumentation for the `EuclideanRing` class). It is identical to `div` in\nthe `EuclideanRing Int` instance if the dividend is positive, but will be\nslightly different if the dividend is negative. For example:\n\n```purescript\ndiv 2 3 == 0\nquot 2 3 == 0\n\ndiv (-2) 3 == (-1)\nquot (-2) 3 == 0\n\ndiv 2 (-3) == 0\nquot 2 (-3) == 0\n```\n","title":"quot","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[227,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[227,41]}},{"kind":null,"children":[],"comments":"The `rem` function provides the remainder after _truncating_ integer\ndivision (see the documentation for the `EuclideanRing` class). It is\nidentical to `mod` in the `EuclideanRing Int` instance if the dividend is\npositive, but will be slightly different if the dividend is negative. For\nexample:\n\n```purescript\nmod 2 3 == 2\nrem 2 3 == 2\n\nmod (-2) 3 == 1\nrem (-2) 3 == (-2)\n\nmod 2 (-3) == 2\nrem 2 (-3) == 2\n```\n","title":"rem","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[245,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[245,40]}},{"kind":null,"children":[],"comments":"Raise an Int to the power of another Int.\n","title":"pow","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[248,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int.purs","end":[248,40]}}]},{"reExports":[],"name":"Data.Int.Bits","comments":"This module defines bitwise operations for the `Int` type.\n","declarations":[{"kind":null,"children":[],"comments":"Bitwise AND.\n","title":"and","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[13,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[13,40]}},{"kind":null,"children":[],"comments":null,"title":"(.&.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"and"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[15,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[15,21]}},{"kind":null,"children":[],"comments":"Bitwise OR.\n","title":"or","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[18,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[18,39]}},{"kind":null,"children":[],"comments":null,"title":"(.|.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"or"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[20,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[20,20]}},{"kind":null,"children":[],"comments":"Bitwise XOR.\n","title":"xor","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[23,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[23,40]}},{"kind":null,"children":[],"comments":null,"title":"(.^.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"xor"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[25,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[25,21]}},{"kind":null,"children":[],"comments":"Bitwise shift left.\n","title":"shl","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[28,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[28,40]}},{"kind":null,"children":[],"comments":"Bitwise shift right.\n","title":"shr","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[31,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[31,40]}},{"kind":null,"children":[],"comments":"Bitwise zero-fill shift right.\n","title":"zshr","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[34,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[34,41]}},{"kind":null,"children":[],"comments":"Bitwise NOT.\n","title":"complement","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[37,1],"name":"/home/jordan/Programming/ps-libs/lib/integers/src/Data/Int/Bits.purs","end":[37,40]}}]}],"resolvedDependencies":{"purescript-newtype":"5.0.0","purescript-effect":"4.0.0","purescript-control":"6.0.0","purescript-console":"6.0.0","purescript-maybe":"6.0.0","purescript-invariant":"6.0.0","purescript-prelude":"6.0.0","purescript-assert":"6.0.0","purescript-unsafe-coerce":"6.0.0","purescript-numbers":"9.0.0","purescript-partial":"4.0.0","purescript-safe-coerce":"2.0.0","purescript-functions":"6.0.0"},"version":"6.0.0","github":["purescript","purescript-integers"],"versionTag":"v6.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Effect.Uncurried":"purescript-effect","Data.Monoid.Generic":"purescript-prelude","Effect":"purescript-effect","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Ord":"purescript-prelude","Data.Bounded.Generic":"purescript-prelude","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Type.Proxy":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Data.Number":"purescript-numbers","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.Ord.Generic":"purescript-prelude","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Number.Format":"purescript-numbers","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Number.Approximate":"purescript-numbers","Effect.Unsafe":"purescript-effect","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Data.Eq":"purescript-prelude","Data.Newtype":"purescript-newtype","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-prelude","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Data.Eq.Generic":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Reflectable":"purescript-prelude","Control.Plus":"purescript-control","Partial":"purescript-partial","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Generic.Rep":"purescript-prelude","Effect.Class.Console":"purescript-console","Data.Monoid.Endo":"purescript-prelude","Data.Semiring.Generic":"purescript-prelude","Control.Applicative":"purescript-prelude","Record.Unsafe":"purescript-prelude"},"compilerVersion":"0.14.5"}