{"uploader":"JordanMartinez","packageMeta":{"homepage":"https://github.com/purescript/purescript-numbers","repository":{"url":"https://github.com/purescript/purescript-numbers.git","type":"git"},"ignore":["**/.*","bower_components","output"],"devDependencies":{"purescript-console":"^6.0.0","purescript-assert":"^6.0.0"},"authors":[{"email":"mail@david-peter.de","name":"David Peter"}],"dependencies":{"purescript-maybe":"^6.0.0","purescript-functions":"^6.0.0"},"name":"purescript-numbers","license":["MIT"],"description":"Functions for working with Numbers"},"tagTime":"2022-04-27T19:12:17+0000","modules":[{"reExports":[],"name":"Data.Number","comments":"Functions for working with PureScripts builtin `Number` type.\n","declarations":[{"kind":null,"children":[],"comments":"Attempt to parse a `Number` using JavaScripts `parseFloat`. Returns\n`Nothing` if the parse fails or if the result is not a finite number.\n\nExample:\n```purs\n> fromString \"123\"\n(Just 123.0)\n\n> fromString \"12.34\"\n(Just 12.34)\n\n> fromString \"1e4\"\n(Just 10000.0)\n\n> fromString \"1.2e4\"\n(Just 12000.0)\n\n> fromString \"bad\"\nNothing\n```\n\nNote that `parseFloat` allows for trailing non-digit characters and\nwhitespace as a prefix:\n```\n> fromString \"  1.2 ??\"\n(Just 1.2)\n```\n","title":"fromString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[112,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[112,37]}},{"kind":null,"children":[],"comments":"Not a number (NaN).\n```purs\n> nan\nNaN\n```\n","title":"nan","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[47,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[47,29]}},{"kind":null,"children":[],"comments":"Test whether a number is NaN.\n```purs\n> isNaN 0.0\nfalse\n\n> isNaN nan\ntrue\n```\n","title":"isNaN","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[57,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[57,42]}},{"kind":null,"children":[],"comments":"Positive infinity. For negative infinity use `(-infinity)`\n```purs\n> infinity\nInfinity\n\n> (-infinity)\n- Infinity\n```\n","title":"infinity","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[67,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[67,34]}},{"kind":null,"children":[],"comments":"Test whether a number is finite.\n```purs\n> isFinite 0.0\ntrue\n\n> isFinite infinity\nfalse\n\n> isFinite (-infinity)\nfalse\n\n> isFinite nan\nfalse\n```\n","title":"isFinite","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[83,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[83,45]}},{"kind":null,"children":[],"comments":"Returns the absolute value of the argument.\n```purs\n> x = -42.0\n> sign x * abs x == x\ntrue\n```\n","title":"abs","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[123,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[123,39]}},{"kind":null,"children":[],"comments":"Returns the inverse cosine in radians of the argument.\n```purs\n> acos 0.0 == pi / 2.0\ntrue\n```\n","title":"acos","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[130,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[130,40]}},{"kind":null,"children":[],"comments":"Returns the inverse sine in radians of the argument.\n```purs\n> asin 1.0 == pi / 2.0\ntrue\n```\n","title":"asin","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[137,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[137,40]}},{"kind":null,"children":[],"comments":"Returns the inverse tangent in radians of the argument.\n```purs\n> atan 1.0 == pi / 4.0\ntrue\n```\n","title":"atan","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[144,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[144,40]}},{"kind":null,"children":[],"comments":"Four-quadrant tangent inverse. Given the arguments `y` and `x`, returns\nthe inverse tangent of `y / x`, where the signs of both arguments are used\nto determine the sign of the result.\nIf the first argument is negative, the result will be negative.\nThe result is the angle between the positive x axis and a point `(x, y)`.\n```purs\n> atan2 0.0 1.0\n0.0\n> atan2 1.0 0.0 == pi / 2.0\ntrue\n```\n","title":"atan2","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[157,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[157,51]}},{"kind":null,"children":[],"comments":"Returns the smallest integer not smaller than the argument.\n```purs\n> ceil 1.5\n2.0\n```\n","title":"ceil","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[164,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[164,40]}},{"kind":null,"children":[],"comments":"Returns the cosine of the argument, where the argument is in radians.\n```purs\n> cos (pi / 4.0) == sqrt2 / 2.0\ntrue\n```\n","title":"cos","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[171,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[171,39]}},{"kind":null,"children":[],"comments":"Returns `e` exponentiated to the power of the argument.\n```purs\n> exp 1.0\n2.718281828459045\n```\n","title":"exp","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[178,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[178,39]}},{"kind":null,"children":[],"comments":"Returns the largest integer not larger than the argument.\n```purs\n> floor 1.5\n1.0\n```\n","title":"floor","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[185,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[185,41]}},{"kind":null,"children":[],"comments":"Returns the natural logarithm of a number.\n```purs\n> log e\n1.0\n","title":"log","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[191,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[191,39]}},{"kind":null,"children":[],"comments":"Returns the largest of two numbers. Unlike `max` in Data.Ord this version\nreturns NaN if either argument is NaN.\n","title":"max","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[195,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[195,49]}},{"kind":null,"children":[],"comments":"Returns the smallest of two numbers. Unlike `min` in Data.Ord this version\nreturns NaN if either argument is NaN.\n","title":"min","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[199,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[199,49]}},{"kind":null,"children":[],"comments":"Return  the first argument exponentiated to the power of the second argument.\n```purs\n> pow 3.0 2.0\n9.0\n> sqrt 42.0 == pow 42.0 0.5\ntrue\n```\n","title":"pow","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[209,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[209,49]}},{"kind":null,"children":[],"comments":"Computes the remainder after division. This is the same as JavaScript's `%` operator.\n","title":"remainder","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[216,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[216,55]}},{"kind":null,"children":[],"comments":null,"title":"(%)","info":{"declType":"alias","alias":[["Data","Number"],{"Right":{"Left":{"Ident":"remainder"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[218,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[218,24]}},{"kind":null,"children":[],"comments":"Returns the integer closest to the argument.\n```purs\n> round 1.5\n2.0\n```\n","title":"round","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[225,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[225,41]}},{"kind":null,"children":[],"comments":"Returns either a positive or negative +/- 1, indicating the sign of the\nargument. If the argument is 0, it will return a +/- 0. If the argument is\nNaN it will return NaN.\n```purs\n> x = -42.0\n> sign x * abs x == x\ntrue\n```\n","title":"sign","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[235,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[235,40]}},{"kind":null,"children":[],"comments":"Returns the sine of the argument, where the argument is in radians.\n```purs\n> sin (pi / 2.0)\n1.0\n```\n","title":"sin","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[242,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[242,39]}},{"kind":null,"children":[],"comments":"Returns the square root of the argument.\n```purs\n> sqrt 49.0\n7.0\n```\n","title":"sqrt","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[249,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[249,40]}},{"kind":null,"children":[],"comments":"Returns the tangent of the argument, where the argument is in radians.\n```\n> tan (pi / 4.0)\n0.9999999999999999\n```\n","title":"tan","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[256,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[256,39]}},{"kind":null,"children":[],"comments":"Truncates the decimal portion of a number. Equivalent to `floor` if the\nnumber is positive, and `ceil` if the number is negative.\n```purs\nceil 1.5\n2.0\n```\n","title":"trunc","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[264,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[264,41]}},{"kind":null,"children":[],"comments":"The base of the natural logarithm, also known as Euler's number or *e*.\n```purs\n> log e\n1.0\n\n> exp 1.0 == e\ntrue\n\n> e\n2.718281828459045\n```\n","title":"e","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[277,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[277,12]}},{"kind":null,"children":[],"comments":"The natural logarithm of 2.\n```purs\n> log 2.0 == ln2\ntrue\n\n> ln2\n0.6931471805599453\n```\n","title":"ln2","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[288,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[288,14]}},{"kind":null,"children":[],"comments":"The natural logarithm of 10.\n```purs\n> log 10.0 == ln10\ntrue\n\n> ln10\n2.302585092994046\n```\n","title":"ln10","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[299,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[299,15]}},{"kind":null,"children":[],"comments":"Base 10 logarithm of `e`.\n```purs\n> 1.0 / ln10 - log10e\n-5.551115123125783e-17\n\n> log10e\n0.4342944819032518\n```\n","title":"log10e","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[310,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[310,17]}},{"kind":null,"children":[],"comments":"The base 2 logarithm of `e`.\n```purs\n> 1.0 / ln2 == log2e\ntrue\n\n> log2e\n1.4426950408889634\n```\n","title":"log2e","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[321,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[321,16]}},{"kind":null,"children":[],"comments":"The ratio of the circumference of a circle to its diameter.\n```purs\n> pi\n3.141592653589793\n```\n","title":"pi","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[329,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[329,13]}},{"kind":null,"children":[],"comments":"The square root of one half.\n```purs\n> sqrt 0.5 == sqrt1_2\ntrue\n\n> sqrt1_2\n0.7071067811865476\n```\n","title":"sqrt1_2","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[340,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[340,18]}},{"kind":null,"children":[],"comments":"The square root of two.\n```purs\n> sqrt 2.0 == sqrt2\ntrue\n\n> sqrt2\n1.4142135623730951\n```\n","title":"sqrt2","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[351,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[351,16]}},{"kind":null,"children":[],"comments":"The ratio of the circumference of a circle to its radius.\n```purs\n> 2.0 * pi == tau\ntrue\n\n> tau\n6.283185307179586\n```\n","title":"tau","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[362,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number.purs","end":[362,14]}}]},{"reExports":[],"name":"Data.Number.Approximate","comments":"This module defines functions for comparing numbers.\n","declarations":[{"kind":null,"children":[{"comments":null,"title":"Fraction","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[20,18],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[20,35]}}],"comments":"A newtype for (small) numbers, typically in the range *[0:1]*. It is used\nas an argument for `eqRelative`.\n","title":"Fraction","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[20,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[20,35]}},{"kind":null,"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the\ngiven *relative* error (`Fraction` parameter).\n\nThis comparison is scale-invariant, i.e. if `eqRelative frac x y`, then\n`eqRelative frac (s * x) (s * y)` for a given scale factor `s > 0.0`\n(unless one of x, y is exactly `0.0`).\n\nNote that the relation that `eqRelative frac` induces on `Number` is\nnot an equivalence relation. It is reflexive and symmetric, but not\ntransitive.\n\nExample:\n``` purs\n> (eqRelative (Fraction 0.01)) 133.7 133.0\ntrue\n\n> (eqRelative (Fraction 0.001)) 133.7 133.0\nfalse\n\n> (eqRelative (Fraction 0.01)) (0.1 + 0.2) 0.3\ntrue\n```\n","title":"eqRelative","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Approximate"],"Fraction"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[44,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[44,54]}},{"kind":null,"children":[],"comments":"Test if two numbers are approximately equal, up to a relative difference\nof one part in a million:\n``` purs\neqApproximate = eqRelative (Fraction 1.0e-6)\n```\n\nExample\n``` purs\n> 0.1 + 0.2 == 0.3\nfalse\n\n> 0.1 + 0.2 ≅ 0.3\ntrue\n```\n","title":"eqApproximate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[63,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[63,45]}},{"kind":null,"children":[],"comments":null,"title":"(~=)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[69,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[69,28]}},{"kind":null,"children":[],"comments":null,"title":"(≅)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[70,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[70,27]}},{"kind":null,"children":[],"comments":"The complement of `eqApproximate`.\n","title":"neqApproximate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[73,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[73,46]}},{"kind":null,"children":[],"comments":null,"title":"(≇)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"neqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[76,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[76,28]}},{"kind":null,"children":[{"comments":null,"title":"Tolerance","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[79,19],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[79,37]}}],"comments":"A newtype for (small) numbers. It is used as an argument for `eqAbsolute`.\n","title":"Tolerance","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[79,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[79,37]}},{"kind":null,"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the given\n(absolute) tolerance value. Note that this type of comparison is *not*\nscale-invariant. The relation induced by `(eqAbsolute (Tolerance eps))` is\nsymmetric and reflexive, but not transitive.\n\nExample:\n``` purs\n> (eqAbsolute (Tolerance 1.0)) 133.7 133.0\ntrue\n\n> (eqAbsolute (Tolerance 0.1)) 133.7 133.0\nfalse\n```\n","title":"eqAbsolute","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Approximate"],"Tolerance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[94,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Approximate.purs","end":[94,55]}}]},{"reExports":[],"name":"Data.Number.Format","comments":"A module for formatting numbers as strings.\n\nUsage:\n``` purs\n> let x = 1234.56789\n\n> toStringWith (precision 6) x\n\"1234.57\"\n\n> toStringWith (fixed 3) x\n\"1234.568\"\n\n> toStringWith (exponential 2) x\n\"1.23e+3\"\n```\n\nThe main method of this module is the `toStringWith` function that accepts\na `Format` argument which can be constructed through one of the smart\nconstructors `precision`, `fixed` and `exponential`. Internally, the\nnumber will be formatted with JavaScripts `toPrecision`, `toFixed` or\n`toExponential`.\n","declarations":[{"kind":null,"children":[],"comments":"The `Format` data type specifies how a number will be formatted.\n","title":"Format","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[38,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Format.purs","end":[41,20]}},{"kind":null,"children":[],"comments":"Create a `toPrecision`-based format from an integer. Values smaller than\n`1` and larger than `21` will be clamped.\n","title":"precision","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[45,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Format.purs","end":[45,27]}},{"kind":null,"children":[],"comments":"Create a `toFixed`-based format from an integer. Values smaller than `0`\nand larger than `20` will be clamped.\n","title":"fixed","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[50,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Format.purs","end":[50,23]}},{"kind":null,"children":[],"comments":"Create a `toExponential`-based format from an integer. Values smaller than\n`0` and larger than `20` will be clamped.\n","title":"exponential","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[55,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Format.purs","end":[55,29]}},{"kind":null,"children":[],"comments":"Convert a number to a string with a given format.\n","title":"toStringWith","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[59,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Format.purs","end":[59,43]}},{"kind":null,"children":[],"comments":"Convert a number to a string via JavaScript's toString method.\n\n```purs\n> toString 12.34\n\"12.34\"\n\n> toString 1234.0\n\"1234\"\n\n> toString 1.2e-10\n\"1.2e-10\"\n```\n","title":"toString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[76,1],"name":"/home/jordan/Programming/ps-libs/lib/numbers/src/Data/Number/Format.purs","end":[76,44]}}]}],"resolvedDependencies":{"purescript-newtype":"5.0.0","purescript-effect":"4.0.0","purescript-control":"6.0.0","purescript-console":"6.0.0","purescript-maybe":"6.0.0","purescript-invariant":"6.0.0","purescript-prelude":"6.0.0","purescript-assert":"6.0.0","purescript-unsafe-coerce":"6.0.0","purescript-safe-coerce":"2.0.0","purescript-functions":"6.0.0"},"version":"9.0.0","github":["purescript","purescript-numbers"],"versionTag":"v9.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Effect.Uncurried":"purescript-effect","Data.Monoid.Generic":"purescript-prelude","Effect":"purescript-effect","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Ord":"purescript-prelude","Data.Bounded.Generic":"purescript-prelude","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Type.Proxy":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.Ord.Generic":"purescript-prelude","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Effect.Unsafe":"purescript-effect","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Data.Eq":"purescript-prelude","Data.Newtype":"purescript-newtype","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-prelude","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Data.Eq.Generic":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Reflectable":"purescript-prelude","Control.Plus":"purescript-control","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Generic.Rep":"purescript-prelude","Effect.Class.Console":"purescript-console","Data.Monoid.Endo":"purescript-prelude","Data.Semiring.Generic":"purescript-prelude","Control.Applicative":"purescript-prelude","Record.Unsafe":"purescript-prelude"},"compilerVersion":"0.14.5"}