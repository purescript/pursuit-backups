{"uploader":"thomashoneyman","packageMeta":{"homepage":"https://github.com/purescript/purescript-numbers","repository":{"url":"https://github.com/purescript/purescript-numbers.git","type":"git"},"ignore":["**/.*","bower_components","output"],"devDependencies":{"purescript-console":"^5.0.0","purescript-assert":"^5.0.0"},"authors":[{"email":"mail@david-peter.de","name":"David Peter"}],"dependencies":{"purescript-maybe":"^5.0.0","purescript-math":"^3.0.0","purescript-functions":"^5.0.0"},"name":"purescript-numbers","license":["MIT"],"description":"Functions for working with Numbers"},"tagTime":"2021-02-26T17:36:09+0000","modules":[{"reExports":[],"name":"Data.Number","comments":"Functions for working with PureScripts builtin `Number` type.\n","declarations":[{"children":[],"comments":"Attempt to parse a `Number` using JavaScripts `parseFloat`. Returns\n`Nothing` if the parse fails or if the result is not a finite number.\n\nExample:\n```purs\n> fromString \"123\"\n(Just 123.0)\n\n> fromString \"12.34\"\n(Just 12.34)\n\n> fromString \"1e4\"\n(Just 10000.0)\n\n> fromString \"1.2e4\"\n(Just 12000.0)\n\n> fromString \"bad\"\nNothing\n```\n\nNote that `parseFloat` allows for trailing non-digit characters and\nwhitespace as a prefix:\n```\n> fromString \"  1.2 ??\"\n(Just 1.2)\n```\n","title":"fromString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[52,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number.purs","end":[52,37]}},{"children":[],"comments":"Not a number (NaN)\n","title":"nan","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[14,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number.purs","end":[14,29]}},{"children":[],"comments":"Test whether a number is NaN\n","title":"isNaN","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number.purs","end":[17,42]}},{"children":[],"comments":"Positive infinity\n","title":"infinity","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[20,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number.purs","end":[20,34]}},{"children":[],"comments":"Test whether a number is finite\n","title":"isFinite","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number.purs","end":[23,45]}}]},{"reExports":[],"name":"Data.Number.Approximate","comments":"This module defines functions for comparing numbers.\n","declarations":[{"children":[{"comments":null,"title":"Fraction","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A newtype for (small) numbers, typically in the range *[0:1]*. It is used\nas an argument for `eqRelative`.\n","title":"Fraction","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[20,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[20,35]}},{"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the\ngiven *relative* error (`Fraction` parameter).\n\nThis comparison is scale-invariant, i.e. if `eqRelative frac x y`, then\n`eqRelative frac (s * x) (s * y)` for a given scale factor `s > 0.0`\n(unless one of x, y is exactly `0.0`).\n\nNote that the relation that `eqRelative frac` induces on `Number` is\nnot an equivalence relation. It is reflexive and symmetric, but not\ntransitive.\n\nExample:\n``` purs\n> (eqRelative (Fraction 0.01)) 133.7 133.0\ntrue\n\n> (eqRelative (Fraction 0.001)) 133.7 133.0\nfalse\n\n> (eqRelative (Fraction 0.01)) (0.1 + 0.2) 0.3\ntrue\n```\n","title":"eqRelative","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Approximate"],"Fraction"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[44,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[44,54]}},{"children":[],"comments":"Test if two numbers are approximately equal, up to a relative difference\nof one part in a million:\n``` purs\neqApproximate = eqRelative (Fraction 1.0e-6)\n```\n\nExample\n``` purs\n> 0.1 + 0.2 == 0.3\nfalse\n\n> 0.1 + 0.2 ≅ 0.3\ntrue\n```\n","title":"eqApproximate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[63,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[63,45]}},{"children":[],"comments":null,"title":"(~=)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[69,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[69,28]}},{"children":[],"comments":null,"title":"(≅)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[70,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[70,27]}},{"children":[],"comments":"The complement of `eqApproximate`.\n","title":"neqApproximate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[73,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[73,46]}},{"children":[],"comments":null,"title":"(≇)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"neqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[76,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[76,28]}},{"children":[{"comments":null,"title":"Tolerance","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A newtype for (small) numbers. It is used as an argument for `eqAbsolute`.\n","title":"Tolerance","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[79,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[79,37]}},{"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the given\n(absolute) tolerance value. Note that this type of comparison is *not*\nscale-invariant. The relation induced by `(eqAbsolute (Tolerance eps))` is\nsymmetric and reflexive, but not transitive.\n\nExample:\n``` purs\n> (eqAbsolute (Tolerance 1.0)) 133.7 133.0\ntrue\n\n> (eqAbsolute (Tolerance 0.1)) 133.7 133.0\nfalse\n```\n","title":"eqAbsolute","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Approximate"],"Tolerance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[94,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Approximate.purs","end":[94,55]}}]},{"reExports":[],"name":"Data.Number.Format","comments":"A module for formatting numbers as strings.\n\nUsage:\n``` purs\n> let x = 1234.56789\n\n> toStringWith (precision 6) x\n\"1234.57\"\n\n> toStringWith (fixed 3) x\n\"1234.568\"\n\n> toStringWith (exponential 2) x\n\"1.23e+3\"\n```\n\nThe main method of this module is the `toStringWith` function that accepts\na `Format` argument which can be constructed through one of the smart\nconstructors `precision`, `fixed` and `exponential`. Internally, the\nnumber will be formatted with JavaScripts `toPrecision`, `toFixed` or\n`toExponential`.\n","declarations":[{"children":[],"comments":"The `Format` data type specifies how a number will be formatted.\n","title":"Format","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[38,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Format.purs","end":[41,20]}},{"children":[],"comments":"Create a `toPrecision`-based format from an integer. Values smaller than\n`1` and larger than `21` will be clamped.\n","title":"precision","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Format.purs","end":[45,27]}},{"children":[],"comments":"Create a `toFixed`-based format from an integer. Values smaller than `0`\nand larger than `20` will be clamped.\n","title":"fixed","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[50,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Format.purs","end":[50,23]}},{"children":[],"comments":"Create a `toExponential`-based format from an integer. Values smaller than\n`0` and larger than `20` will be clamped.\n","title":"exponential","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[55,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Format.purs","end":[55,29]}},{"children":[],"comments":"Convert a number to a string with a given format.\n","title":"toStringWith","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[59,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Format.purs","end":[59,43]}},{"children":[],"comments":"Convert a number to a string via JavaScript's toString method.\n\n```purs\n> toString 12.34\n\"12.34\"\n\n> toString 1234.0\n\"1234\"\n\n> toString 1.2e-10\n\"1.2e-10\"\n```\n","title":"toString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[76,1],"name":"/Users/trh/Desktop/release/purescript-numbers/src/Data/Number/Format.purs","end":[76,44]}}]}],"resolvedDependencies":{"purescript-newtype":"4.0.0","purescript-effect":"3.0.0","purescript-control":"5.0.0","purescript-console":"5.0.0","purescript-maybe":"5.0.0","purescript-invariant":"5.0.0","purescript-prelude":"5.0.0","purescript-assert":"5.0.0","purescript-unsafe-coerce":"5.0.0","purescript-math":"3.0.0","purescript-safe-coerce":"1.0.0","purescript-functions":"5.0.0"},"version":"8.0.0","github":["purescript","purescript-numbers"],"versionTag":"v8.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Effect.Uncurried":"purescript-effect","Data.Monoid.Generic":"purescript-prelude","Effect":"purescript-effect","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Ord":"purescript-prelude","Data.Bounded.Generic":"purescript-prelude","Type.Data.Row":"purescript-prelude","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Type.Proxy":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.Ord.Generic":"purescript-prelude","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Type.Data.RowList":"purescript-prelude","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Effect.Unsafe":"purescript-effect","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Data.Eq":"purescript-prelude","Data.Newtype":"purescript-newtype","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-prelude","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Eq.Generic":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Math":"purescript-math","Control.Plus":"purescript-control","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Generic.Rep":"purescript-prelude","Effect.Class.Console":"purescript-console","Data.Monoid.Endo":"purescript-prelude","Data.Semiring.Generic":"purescript-prelude","Control.Applicative":"purescript-prelude","Record.Unsafe":"purescript-prelude"},"compilerVersion":"0.14.0"}