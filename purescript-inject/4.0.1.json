{"uploader":"thomashoneyman","packageMeta":{"homepage":"https://github.com/purescript/purescript-inject","repository":{"url":"https://github.com/purescript/purescript-inject.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"dependencies":{"purescript-functors":"^2.0.0"},"name":"purescript-inject","keywords":["pursuit-deprecated"],"license":["MIT"],"description":"Inject typeclass"},"tagTime":"2020-10-03T19:57:58+0000","modules":[{"reExports":[],"name":"Data.Inject","comments":"This module defines a type class `Inject` which is useful\nwhen working with coproducts of functors.\n","declarations":[{"children":[{"comments":null,"title":"inj","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"g"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"prj","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"g"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":null},{"comments":"Any functor is isomorphic to the coproduct of itself with the\nconstantly-`Void` functor.\n","title":"injectReflexive","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Inject"],"Inject"]},{"annotation":[],"tag":"TypeVar","contents":"f"}]},{"annotation":[],"tag":"TypeVar","contents":"f"}]}},"sourceSpan":{"start":[29,1],"name":"/Users/trh/Desktop/contrib/purescript-inject/src/Data/Inject.purs","end":[31,13]}},{"comments":"Left injection\n","title":"injectLeft","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Inject"],"Inject"]},{"annotation":[],"tag":"TypeVar","contents":"f"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"annotation":[],"tag":"TypeVar","contents":"f"}]},{"annotation":[],"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/Users/trh/Desktop/contrib/purescript-inject/src/Data/Inject.purs","end":[36,39]}},{"comments":"Right injection\n","title":"injectRight","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Inject"],"Inject"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Inject"],"Inject"]},{"annotation":[],"tag":"TypeVar","contents":"f"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"annotation":[],"tag":"TypeVar","contents":"h"}]},{"annotation":[],"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[39,1],"name":"/Users/trh/Desktop/contrib/purescript-inject/src/Data/Inject.purs","end":[41,35]}}],"comments":"The `Inject` class asserts a coproduct relationship between two functors.\n\nSpecifically, an instance `Inject f g` indicates that `g` is isomorphic to\na coproduct of `f` and some third functor.\n\nLaws:\n\n- `prj g = Just f` if and only if `inj f = g`\n","title":"Inject","info":{"fundeps":[],"arguments":[["f",null],["g",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[23,1],"name":"/Users/trh/Desktop/contrib/purescript-inject/src/Data/Inject.purs","end":[25,38]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-control":"3.3.1","purescript-either":"3.2.0","purescript-maybe":"3.1.0","purescript-type-equality":"2.1.0","purescript-distributive":"3.0.0","purescript-invariant":"3.0.0","purescript-monoid":"3.3.1","purescript-foldable-traversable":"3.7.1","purescript-functors":"2.2.0","purescript-prelude":"3.3.0","purescript-bifunctors":"3.0.0","purescript-contravariant":"3.3.0","purescript-unsafe-coerce":"3.0.0","purescript-eff":"3.2.3","purescript-const":"3.2.0","purescript-tuples":"4.1.0","purescript-identity":"3.1.0"},"version":"4.0.1","github":["purescript","purescript-inject"],"versionTag":"v4.0.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Data.Functor.Product":"purescript-functors","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Const":"purescript-const","Control.Monad.Eff":"purescript-eff","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Functor.App":"purescript-functors","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Data.Comparison":"purescript-contravariant","Prelude":"purescript-prelude","Data.Predicate":"purescript-contravariant","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Functor.Product.Nested":"purescript-functors","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Data.Identity":"purescript-identity","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Type.Row.Effect.Equality":"purescript-type-equality","Data.Decidable":"purescript-contravariant","Data.Monoid.Multiplicative":"purescript-monoid","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.13.3"}