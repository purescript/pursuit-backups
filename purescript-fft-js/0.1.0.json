{"compilerVersion":"0.15.10","github":["jeslie0","purescript-fft-js"],"moduleMap":{"Control.Alt":"purescript-control","Control.Alternative":"purescript-control","Control.Applicative":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Control.Biapply":"purescript-bifunctors","Control.Bind":"purescript-prelude","Control.Category":"purescript-prelude","Control.Comonad":"purescript-control","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Control.Monad":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Control.Monad.ST":"purescript-st","Control.Monad.ST.Class":"purescript-st","Control.Monad.ST.Global":"purescript-st","Control.Monad.ST.Internal":"purescript-st","Control.Monad.ST.Ref":"purescript-st","Control.Monad.ST.Uncurried":"purescript-st","Control.MonadPlus":"purescript-control","Control.Plus":"purescript-control","Control.Semigroupoid":"purescript-prelude","Data.Array":"purescript-arrays","Data.Array.NonEmpty":"purescript-arrays","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.Partial":"purescript-arrays","Data.Array.ST":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.Array.ST.Partial":"purescript-arrays","Data.Bifoldable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.BooleanAlgebra":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Bounded.Generic":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.Comparison":"purescript-contravariant","Data.Complex":"purescript-cartesian","Data.Const":"purescript-const","Data.Decidable":"purescript-contravariant","Data.Decide":"purescript-contravariant","Data.Distributive":"purescript-distributive","Data.Divide":"purescript-contravariant","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Either":"purescript-either","Data.Either.Inject":"purescript-either","Data.Either.Nested":"purescript-either","Data.Eq":"purescript-prelude","Data.Eq.Generic":"purescript-prelude","Data.Equivalence":"purescript-contravariant","Data.EuclideanRing":"purescript-prelude","Data.Exists":"purescript-exists","Data.Field":"purescript-prelude","Data.Foldable":"purescript-foldable-traversable","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Function":"purescript-prelude","Data.Function.Uncurried":"purescript-functions","Data.Functor":"purescript-prelude","Data.Functor.App":"purescript-functors","Data.Functor.Clown":"purescript-functors","Data.Functor.Compose":"purescript-functors","Data.Functor.Contravariant":"purescript-contravariant","Data.Functor.Coproduct":"purescript-functors","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Functor.Costar":"purescript-functors","Data.Functor.Flip":"purescript-functors","Data.Functor.Invariant":"purescript-invariant","Data.Functor.Joker":"purescript-functors","Data.Functor.Product":"purescript-functors","Data.Functor.Product.Nested":"purescript-functors","Data.Functor.Product2":"purescript-functors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Generic.Rep":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Identity":"purescript-identity","Data.Int":"purescript-integers","Data.Int.Bits":"purescript-integers","Data.Maybe":"purescript-maybe","Data.Maybe.First":"purescript-maybe","Data.Maybe.Last":"purescript-maybe","Data.Monoid":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Monoid.Conj":"purescript-prelude","Data.Monoid.Disj":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Monoid.Endo":"purescript-prelude","Data.Monoid.Generic":"purescript-prelude","Data.Monoid.Multiplicative":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Newtype":"purescript-newtype","Data.NonEmpty":"purescript-nonempty","Data.Number":"purescript-numbers","Data.Number.Approximate":"purescript-numbers","Data.Number.Format":"purescript-numbers","Data.Op":"purescript-contravariant","Data.Ord":"purescript-prelude","Data.Ord.Down":"purescript-orders","Data.Ord.Generic":"purescript-prelude","Data.Ord.Max":"purescript-orders","Data.Ord.Min":"purescript-orders","Data.Ordering":"purescript-prelude","Data.Predicate":"purescript-contravariant","Data.Profunctor":"purescript-profunctor","Data.Profunctor.Choice":"purescript-profunctor","Data.Profunctor.Closed":"purescript-profunctor","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Profunctor.Costrong":"purescript-profunctor","Data.Profunctor.Join":"purescript-profunctor","Data.Profunctor.Split":"purescript-profunctor","Data.Profunctor.Star":"purescript-profunctor","Data.Profunctor.Strong":"purescript-profunctor","Data.Reflectable":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Semigroup.Foldable":"purescript-foldable-traversable","Data.Semigroup.Generic":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Semiring":"purescript-prelude","Data.Semiring.Generic":"purescript-prelude","Data.Show":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable","Data.Traversable.Accum":"purescript-foldable-traversable","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Tuple":"purescript-tuples","Data.Tuple.Nested":"purescript-tuples","Data.Unfoldable":"purescript-unfoldable","Data.Unfoldable1":"purescript-unfoldable","Data.Unit":"purescript-prelude","Data.Void":"purescript-prelude","Effect":"purescript-effect","Effect.Class":"purescript-effect","Effect.Class.Console":"purescript-console","Effect.Console":"purescript-console","Effect.Ref":"purescript-refs","Effect.Uncurried":"purescript-effect","Effect.Unsafe":"purescript-effect","PSCI.Support":"purescript-psci-support","Partial":"purescript-partial","Partial.Unsafe":"purescript-partial","Prelude":"purescript-prelude","Record.Unsafe":"purescript-prelude","Safe.Coerce":"purescript-safe-coerce","Type.Equality":"purescript-type-equality","Type.Proxy":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce"},"modules":[{"comments":"Functions to compute the Fast Fourier Transform of an array.\n\nThis module wraps the functionality of\nhttps://github.com/indutny/fft.js/ and makes it usable in\nPureScript, with a sprinkling of type safety.\n\nThere are examples of how to use this module in the tests\ndirectory. Essentially, you need to make a new FFT object, then\npass it to the required functions.\n\nfft.js provides different functions to take the Fourier Transform\nof both real and complex arrays. To separate these functions, we\nintroduce the newtype wrappers ComplexArray and RealArray, to add\nsemantic information to the type signature of the function.\n\nA complex valued array is simply an interwoven array of the real\nand imaginary parts. It looks like: [re0, im0, re1, im1, ...].\n","declarations":[{"children":[],"comments":"A type representing the foreign FFT class.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[53,32],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[53,1]},"title":"FFT"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[35,51],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[35,22]},"title":"ComplexArray"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Show"],"Show"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[38,37],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[37,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"FFTArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[41,49],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[40,1]},"title":"<anonymous>"}],"comments":"Newtype wrapper for complex arrays. A complex array is equivalent\nto Array Number, where the values are of the form\n[re, im, re, im, ...].\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[35,51],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[35,1]},"title":"ComplexArray"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[44,45],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[44,19]},"title":"RealArray"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Show"],"Show"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[47,34],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[46,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"FFTArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[50,42],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[49,1]},"title":"<anonymous>"}],"comments":"Newtype wrapper for real arrays.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[44,45],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[44,1]},"title":"RealArray"},{"children":[{"comments":null,"info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[30,19],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[30,3]},"title":"size"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"FFTArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[41,49],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[40,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"FFTArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[50,42],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[49,1]},"title":"<anonymous>"}],"comments":"A class of arrays that you can take an FFT of. This class makes\nit easier to get the size of an array, which should match the\nfftSize of the FFT object used to compute a transform with.\n","info":{"arguments":[["a",null]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[30,19],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[29,1]},"title":"FFTArray"},{"children":[],"comments":"Construct a new FFT object. The input is the length of the array\nthat will have a Fourier Transform taking of. It must be a power\nof 2, and be greater than 1.\nThe size is the number of numbers used in the array. For a real\nvalued array, this is just the length. For a complex array, this\nis the length of the array / 2.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[61,37],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[61,1]},"title":"makeFFT"},{"children":[],"comments":"Get the size of the given FFT object.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[64,37],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[64,1]},"title":"fftSize"},{"children":[],"comments":"Create an array consisting of the real parts of the complex\nnumbers provided in the given array.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[68,61],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[68,1]},"title":"fromComplexArray"},{"children":[],"comments":"Create a zero filled complex array.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[71,57],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[71,1]},"title":"createComplexArray"},{"children":[],"comments":"Create a complex array from a given real array.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[74,66],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[74,1]},"title":"toComplexArray"},{"children":[],"comments":"Compute the Fast Fourier Transform of the given complex valued\narray.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[78,64],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[78,1]},"title":"transform"},{"children":[],"comments":"Compute the Fast Fourier Transform of the given real valued\narray. This is faster than creating a complex array from a real\none and taking the Fourier Transformation.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[83,65],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[83,1]},"title":"realTransform"},{"children":[],"comments":"Compute the inverse Fourier transform of the given complex valued\narray.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[87,71],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[87,1]},"title":"inverseTransform"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Array","ST"],"STArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[94,69],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[94,26]},"title":"STComplexArray"}],"comments":"ST\nNewtype wrapper for complex arrays. A complex array is equivalent\nto STArray s Number, where the values are of the form\n[re, im, re, im, ...].\n","info":{"dataDeclType":"newtype","declType":"data","roles":["Nominal"],"typeArguments":[["s",null]]},"kind":{"keyword":"newtype","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"Region"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[94,69],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[94,1]},"title":"STComplexArray"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Array","ST"],"STArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[97,63],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[97,23]},"title":"STRealArray"}],"comments":"Newtype wrapper for real arrays.\n","info":{"dataDeclType":"newtype","declType":"data","roles":["Nominal"],"typeArguments":[["s",null]]},"kind":{"keyword":"newtype","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"Region"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[97,63],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[97,1]},"title":"STRealArray"},{"children":[],"comments":"Update an array with the real parts of the complex numbers\nprovided in the given array.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"s","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"STRealArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[101,97],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[101,1]},"title":"fromComplexArrayST"},{"children":[],"comments":"Turn the given mutable array into a complex valued mutable array, formed from\nthe real valued array provided. Note - the mutable array must\nhave size double that of the real valued array.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"s","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"STComplexArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[106,95],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[106,1]},"title":"toComplexArrayST"},{"children":[],"comments":"Update the given mutable array with the Fourier transform of the\ngiven complex valued array.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"s","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"STComplexArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[110,93],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[110,1]},"title":"transformST"},{"children":[],"comments":"Update the given mutable array with the fourier transform of the\ngiven real valued array.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"s","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"RealArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"STRealArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[114,91],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[114,1]},"title":"realTransformST"},{"children":[],"comments":"Update the given mutable array with the Inverse Fourier transform\nof the given complex valued array.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"s","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"STComplexArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[118,100],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[118,1]},"title":"inverseTransformST"},{"children":[],"comments":"According to the issue:\nhttps://github.com/indutny/fft.js/issues/10, the realTransform\nonly fills the left half of the array with data. This function is\nthen used to complete that. However, I find that the\nrealTransform function gives the correct result and that I don't\never need to use this function.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"s","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["FFT"],"STComplexArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[126,82],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT.purs","start":[126,1]},"title":"completeSpectrum"}],"name":"FFT","reExports":[{"declarations":[{"children":[],"comments":"Create a mutable array that is unfilled. This is not as safe as\ngenerating a filled one, but is faster.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"h","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"h","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Array","ST"],"STArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"h","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[9,51],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT/Internal/Array.purs","start":[9,1]},"title":"newUnsafe"}],"moduleName":{"item":["FFT","Internal","Array"],"package":null}}]},{"comments":"Take the Fast Fourier Transform of a complex valued array from,\nthe Cartesian package, returning. Note, this is much slower than\nthe functions provided by the FFT module.\n","declarations":[{"children":[],"comments":"Compute the Fast Fourier Transform of an array of complex numbers.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Complex"],"Cartesian"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Complex"],"Cartesian"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[17,73],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT/Complex.purs","start":[17,1]},"title":"transform"},{"children":[],"comments":"Convert an array of complex values numbers to a ComplexArray.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Complex"],"Cartesian"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[24,59],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT/Complex.purs","start":[24,1]},"title":"toComplexArray"},{"children":[],"comments":"Convert ComplexArray to an array of complex values numbers.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"ComplexArray"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Complex"],"Cartesian"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[29,61],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT/Complex.purs","start":[29,1]},"title":"fromComplexArray"}],"name":"FFT.Complex","reExports":[]},{"comments":null,"declarations":[{"children":[],"comments":"Create a mutable array that is unfilled. This is not as safe as\ngenerating a filled one, but is faster.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"h","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","ST","Internal"],"ST"],"tag":"TypeConstructor"},{"annotation":[],"contents":"h","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Array","ST"],"STArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":"h","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[9,51],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT/Internal/Array.purs","start":[9,1]},"title":"newUnsafe"}],"name":"FFT.Internal.Array","reExports":[]},{"comments":"Take the Fast Fourier Transform of a real valued array, returning\na complex valued array using the Cartesian package. Note, this is\nmuch slower than the functions provided by the FFT module. Note\nthat this module doesn't expose any conversions between RealArray\nand Array Number. It is more efficient to unwrap the RealArray\nnewtype constructor.\n","declarations":[{"children":[],"comments":"Compute the Fast Fourier Transform of an array of real numbers.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["FFT"],"FFT"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Complex"],"Cartesian"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[16,61],"name":"/tmp/tmp-2038051-UF0ge1yHO1m3/purescript-fft-js/src/FFT/Real.purs","start":[16,1]},"title":"transform"}],"name":"FFT.Real","reExports":[]}],"packageMeta":{"dependencies":{"purescript-arrays":">=7.3.0 <8.0.0","purescript-cartesian":">=1.0.6 <2.0.0","purescript-partial":">=4.0.0 <5.0.0","purescript-prelude":">=6.0.1 <7.0.0","purescript-st":">=6.2.0 <7.0.0"},"homepage":"https://github.com/jeslie0/purescript-fft-js.git","license":["MIT"],"name":"purescript-fft-js","repository":{"type":"git","url":"https://github.com/jeslie0/purescript-fft-js.git"}},"resolvedDependencies":{"purescript-arrays":"7.3.0","purescript-bifunctors":"6.0.0","purescript-cartesian":"1.0.6","purescript-console":"6.1.0","purescript-const":"6.0.0","purescript-contravariant":"6.0.0","purescript-control":"6.0.0","purescript-distributive":"6.0.0","purescript-effect":"4.0.0","purescript-either":"6.1.0","purescript-exists":"6.0.0","purescript-foldable-traversable":"6.0.0","purescript-functions":"6.0.0","purescript-functors":"5.0.0","purescript-identity":"6.0.0","purescript-integers":"6.0.0","purescript-invariant":"6.0.0","purescript-maybe":"6.0.0","purescript-newtype":"5.0.0","purescript-nonempty":"7.0.0","purescript-numbers":"9.0.1","purescript-orders":"6.0.0","purescript-partial":"4.0.0","purescript-prelude":"6.0.1","purescript-profunctor":"6.0.0","purescript-psci-support":"6.0.0","purescript-refs":"6.0.0","purescript-safe-coerce":"2.0.0","purescript-st":"6.2.0","purescript-tailrec":"6.1.0","purescript-tuples":"7.0.0","purescript-type-equality":"4.0.1","purescript-unfoldable":"6.0.0","purescript-unsafe-coerce":"6.0.0"},"tagTime":"2024-01-12T02:46:28+0000","uploader":"pacchettibotti","version":"0.1.0","versionTag":"v0.1.0"}