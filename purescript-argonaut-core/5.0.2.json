{"uploader":"thomashoneyman","packageMeta":{"homepage":"https://github.com/purescript-contrib/purescript-argonaut-core","repository":{"url":"git://github.com/purescript-contrib/purescript-argonaut-core.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-quickcheck":"^6.0.0"},"authors":[{"email":"zimaliev@yandex.ru","name":"Maxim Zimaliev"},{"email":"","name":"Hardy Jones"},{"email":"john@degoes.net","name":"John A. De Goes"}],"dependencies":{"purescript-control":"^4.0.0","purescript-either":"^4.0.0","purescript-arrays":"^5.0.0","purescript-maybe":"^4.0.0","purescript-foreign-object":"^2.0.0","purescript-tailrec":"^4.0.0","purescript-gen":"^2.0.0","purescript-prelude":"^4.0.0","purescript-nonempty":"^5.0.0","purescript-strings":"^4.0.0","purescript-functions":"^4.0.0"},"name":"purescript-argonaut-core","keywords":["purescript","argonaut","json"],"license":["MIT"],"description":"Core of the purescript-argonaut library, providing basic types, folds, and combinators for `Json`"},"tagTime":"2020-03-05T05:26:33+0000","modules":[{"reExports":[],"name":"Data.Argonaut.Core","comments":"This module defines a data type and various functions for creating and\nmanipulating JSON values. The README contains additional documentation\nfor this module.\n","declarations":[{"children":[{"comments":null,"title":"eqJson","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[55,33]}},{"comments":null,"title":"ordJson","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[57,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[58,45]}}],"comments":"The type of JSON data. The underlying representation is the same as what\nwould be returned from JavaScript's `JSON.parse` function; that is,\nordinary JavaScript booleans, strings, arrays, objects, etc.\n","title":"Json","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[52,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[52,33]}},{"children":[],"comments":"Case analysis for `Json` values. See the README for more information.\n","title":"caseJson","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[72,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[80,15]}},{"children":[],"comments":"A simpler version of `caseJson` which accepts a callback for when the\n`Json` argument was null, and a default value for all other cases.\n","title":"caseJsonNull","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[85,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[85,56]}},{"children":[],"comments":"A simpler version of `caseJson` which accepts a callback for when the\n`Json` argument was a `Boolean`, and a default value for all other cases.\n","title":"caseJsonBoolean","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[90,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[90,62]}},{"children":[],"comments":"A simpler version of `caseJson` which accepts a callback for when the\n`Json` argument was a `Number`, and a default value for all other cases.\n","title":"caseJsonNumber","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[95,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[95,60]}},{"children":[],"comments":"A simpler version of `caseJson` which accepts a callback for when the\n`Json` argument was a `String`, and a default value for all other cases.\n","title":"caseJsonString","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[100,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[100,60]}},{"children":[],"comments":"A simpler version of `caseJson` which accepts a callback for when the\n`Json` argument was a `Array Json`, and a default value for all other cases.\n","title":"caseJsonArray","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[105,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[105,63]}},{"children":[],"comments":"A simpler version of `caseJson` which accepts a callback for when the\n`Json` argument was an `Object`, and a default value for all other cases.\n","title":"caseJsonObject","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[110,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[110,65]}},{"children":[],"comments":"Check if the provided `Json` is the `null` value\n","title":"isNull","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[122,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[122,26]}},{"children":[],"comments":"Check if the provided `Json` is a `Boolean`\n","title":"isBoolean","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[126,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[126,29]}},{"children":[],"comments":"Check if the provided `Json` is a `Number`\n","title":"isNumber","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[130,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[130,28]}},{"children":[],"comments":"Check if the provided `Json` is a `String`\n","title":"isString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[134,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[134,28]}},{"children":[],"comments":"Check if the provided `Json` is an `Array`\n","title":"isArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[138,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[138,27]}},{"children":[],"comments":"Check if the provided `Json` is an `Object`\n","title":"isObject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[142,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[142,28]}},{"children":[],"comments":"Construct `Json` from a `Boolean` value \n","title":"fromBoolean","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[182,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[182,46]}},{"children":[],"comments":"Construct `Json` from a `Number` value \n","title":"fromNumber","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[185,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[185,44]}},{"children":[],"comments":"Construct `Json` from a `String` value. If you would like to parse a string \nof JSON into valid `Json`, see `jsonParser`.\n","title":"fromString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[189,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[189,44]}},{"children":[],"comments":"Construct `Json` from an array of `Json` values\n","title":"fromArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[192,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[192,47]}},{"children":[],"comments":"Construct `Json` from an object with `Json` values\n","title":"fromObject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[195,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[195,49]}},{"children":[],"comments":"Convert `Json` to the `Unit` value if the `Json` is the null value\n","title":"toNull","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[155,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[155,29]}},{"children":[],"comments":"Convert `Json` to a `Boolean` value, if the `Json` is a boolean.\n","title":"toBoolean","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[159,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[159,35]}},{"children":[],"comments":"Convert `Json` to a `Number` value, if the `Json` is a number.\n","title":"toNumber","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[163,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[163,33]}},{"children":[],"comments":"Convert `Json` to a `String` value, if the `Json` is a string. To write a\n`Json` value to a JSON string, see `stringify`.\n","title":"toString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[168,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[168,33]}},{"children":[],"comments":"Convert `Json` to an `Array` of `Json` values, if the `Json` is an array.\n","title":"toArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}]}},"sourceSpan":{"start":[172,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[172,38]}},{"children":[],"comments":"Convert `Json` to an `Object` of `Json` values, if the `Json` is an object.\n","title":"toObject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}]}},"sourceSpan":{"start":[176,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[176,40]}},{"children":[],"comments":"The JSON null value represented as `Json`\n","title":"jsonNull","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[200,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[200,32]}},{"children":[],"comments":"The true boolean value represented as `Json`\n","title":"jsonTrue","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[203,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[203,17]}},{"children":[],"comments":"The false boolean value represented as `Json`\n","title":"jsonFalse","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[207,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[207,18]}},{"children":[],"comments":"The number zero represented as `Json`\n","title":"jsonZero","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[211,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[211,17]}},{"children":[],"comments":"An empty string represented as `Json`\n","title":"jsonEmptyString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[215,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[215,24]}},{"children":[],"comments":"An empty array represented as `Json`\n","title":"jsonEmptyArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[219,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[219,23]}},{"children":[],"comments":"Constructs a `Json` array value containing only the provided value\n","title":"jsonSingletonArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[227,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[227,35]}},{"children":[],"comments":"An empty object represented as `Json`\n","title":"jsonEmptyObject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[223,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[223,24]}},{"children":[],"comments":"Constructs a `Json` object value containing only the provided key and value\n","title":"jsonSingletonObject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}},"sourceSpan":{"start":[231,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[231,46]}},{"children":[],"comments":"Converts a `Json` value to a JSON string. To retrieve a string from a `Json`\nstring value, see `fromString`.\n","title":"stringify","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[236,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[236,43]}}]},{"reExports":[],"name":"Data.Argonaut.Gen","comments":null,"declarations":[{"children":[],"comments":"A generator for `Json` values. Especially useful for writing property-based\ntests.\n","title":"genJson","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}]},null]}},"sourceSpan":{"start":[17,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Gen.purs","end":[17,77]}}]},{"reExports":[],"name":"Data.Argonaut.Parser","comments":null,"declarations":[{"children":[],"comments":"Parse a JSON string, constructing the `Json` value described by the string.\nTo convert a string into a `Json` string, see `fromString`.\n","title":"jsonParser","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}},"sourceSpan":{"start":[11,1],"name":"/Users/thoneyman/Desktop/purescript-argonaut-core/src/Data/Argonaut/Parser.purs","end":[11,43]}}]}],"resolvedDependencies":{"purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-control":"4.2.0","purescript-console":"4.4.0","purescript-either":"4.1.1","purescript-arrays":"5.3.1","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.1.0","purescript-invariant":"4.1.0","purescript-lcg":"2.0.0","purescript-lazy":"4.0.0","purescript-foreign-object":"2.0.3","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.1.0","purescript-gen":"2.1.1","purescript-typelevel-prelude":"5.0.2","purescript-prelude":"4.1.1","purescript-st":"4.1.1","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-record":"2.0.1","purescript-transformers":"4.2.0","purescript-globals":"4.1.0","purescript-generics-rep":"6.1.1","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-random":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-quickcheck":"6.1.0","purescript-strings":"4.0.1","purescript-identity":"4.1.0","purescript-lists":"5.4.1","purescript-functions":"4.0.0"},"version":"5.0.2","github":["purescript-contrib","purescript-argonaut-core"],"versionTag":"v5.0.2","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Record.Builder":"purescript-record","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Random.LCG":"purescript-lcg","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Unfoldable":"purescript-unfoldable","Type.RowList":"purescript-typelevel-prelude","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Test.QuickCheck":"purescript-quickcheck","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.13.3"}