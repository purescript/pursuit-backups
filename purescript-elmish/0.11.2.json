{"compilerVersion":"0.15.10","github":["collegevine","purescript-elmish"],"moduleMap":{"Control.Alt":"purescript-control","Control.Alternative":"purescript-control","Control.Applicative":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Control.Biapply":"purescript-bifunctors","Control.Bind":"purescript-prelude","Control.Category":"purescript-prelude","Control.Comonad":"purescript-control","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Control.Comonad.Env.Trans":"purescript-transformers","Control.Comonad.Store":"purescript-transformers","Control.Comonad.Store.Class":"purescript-transformers","Control.Comonad.Store.Trans":"purescript-transformers","Control.Comonad.Traced":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Control.Comonad.Traced.Trans":"purescript-transformers","Control.Comonad.Trans.Class":"purescript-transformers","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Control.Monad":"purescript-prelude","Control.Monad.Cont":"purescript-transformers","Control.Monad.Cont.Class":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Control.Monad.Error.Class":"purescript-transformers","Control.Monad.Except":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Control.Monad.Gen":"purescript-gen","Control.Monad.Gen.Class":"purescript-gen","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.Identity.Trans":"purescript-transformers","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Reader":"purescript-transformers","Control.Monad.Reader.Class":"purescript-transformers","Control.Monad.Reader.Trans":"purescript-transformers","Control.Monad.Rec.Class":"purescript-tailrec","Control.Monad.ST":"purescript-st","Control.Monad.ST.Class":"purescript-st","Control.Monad.ST.Global":"purescript-st","Control.Monad.ST.Internal":"purescript-st","Control.Monad.ST.Ref":"purescript-st","Control.Monad.ST.Uncurried":"purescript-st","Control.Monad.State":"purescript-transformers","Control.Monad.State.Class":"purescript-transformers","Control.Monad.State.Trans":"purescript-transformers","Control.Monad.Trans.Class":"purescript-transformers","Control.Monad.Writer":"purescript-transformers","Control.Monad.Writer.Class":"purescript-transformers","Control.Monad.Writer.Trans":"purescript-transformers","Control.MonadPlus":"purescript-control","Control.Parallel":"purescript-parallel","Control.Parallel.Class":"purescript-parallel","Control.Plus":"purescript-control","Control.Semigroupoid":"purescript-prelude","Data.Argonaut.Core":"purescript-argonaut-core","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Argonaut.Parser":"purescript-argonaut-core","Data.Array":"purescript-arrays","Data.Array.NonEmpty":"purescript-arrays","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.Partial":"purescript-arrays","Data.Array.ST":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.Array.ST.Partial":"purescript-arrays","Data.Bifoldable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.BooleanAlgebra":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Bounded.Generic":"purescript-prelude","Data.Char":"purescript-strings","Data.Char.Gen":"purescript-strings","Data.CommutativeRing":"purescript-prelude","Data.Comparison":"purescript-contravariant","Data.Const":"purescript-const","Data.Date":"purescript-datetime","Data.Date.Component":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Data.Date.Gen":"purescript-datetime","Data.DateTime":"purescript-datetime","Data.DateTime.Gen":"purescript-datetime","Data.DateTime.Instant":"purescript-datetime","Data.Decidable":"purescript-contravariant","Data.Decide":"purescript-contravariant","Data.Distributive":"purescript-distributive","Data.Divide":"purescript-contravariant","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Either":"purescript-either","Data.Either.Inject":"purescript-either","Data.Either.Nested":"purescript-either","Data.Enum":"purescript-enums","Data.Enum.Gen":"purescript-enums","Data.Enum.Generic":"purescript-enums","Data.Eq":"purescript-prelude","Data.Eq.Generic":"purescript-prelude","Data.Equivalence":"purescript-contravariant","Data.EuclideanRing":"purescript-prelude","Data.Exists":"purescript-exists","Data.Field":"purescript-prelude","Data.Foldable":"purescript-foldable-traversable","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Function":"purescript-prelude","Data.Function.Uncurried":"purescript-functions","Data.Functor":"purescript-prelude","Data.Functor.App":"purescript-functors","Data.Functor.Clown":"purescript-functors","Data.Functor.Compose":"purescript-functors","Data.Functor.Contravariant":"purescript-contravariant","Data.Functor.Coproduct":"purescript-functors","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Functor.Costar":"purescript-functors","Data.Functor.Flip":"purescript-functors","Data.Functor.Invariant":"purescript-invariant","Data.Functor.Joker":"purescript-functors","Data.Functor.Product":"purescript-functors","Data.Functor.Product.Nested":"purescript-functors","Data.Functor.Product2":"purescript-functors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Generic.Rep":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Identity":"purescript-identity","Data.Int":"purescript-integers","Data.Int.Bits":"purescript-integers","Data.Interval":"purescript-datetime","Data.Interval.Duration":"purescript-datetime","Data.Interval.Duration.Iso":"purescript-datetime","Data.JSDate":"purescript-js-date","Data.Lazy":"purescript-lazy","Data.List":"purescript-lists","Data.List.Internal":"purescript-lists","Data.List.Lazy":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.List.Lazy.Types":"purescript-lists","Data.List.NonEmpty":"purescript-lists","Data.List.Partial":"purescript-lists","Data.List.Types":"purescript-lists","Data.List.ZipList":"purescript-lists","Data.Map":"purescript-ordered-collections","Data.Map.Gen":"purescript-ordered-collections","Data.Map.Internal":"purescript-ordered-collections","Data.Maybe":"purescript-maybe","Data.Maybe.First":"purescript-maybe","Data.Maybe.Last":"purescript-maybe","Data.MediaType":"purescript-media-types","Data.MediaType.Common":"purescript-media-types","Data.Monoid":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Monoid.Conj":"purescript-prelude","Data.Monoid.Disj":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Monoid.Endo":"purescript-prelude","Data.Monoid.Generic":"purescript-prelude","Data.Monoid.Multiplicative":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Newtype":"purescript-newtype","Data.NonEmpty":"purescript-nonempty","Data.Nullable":"purescript-nullable","Data.Number":"purescript-numbers","Data.Number.Approximate":"purescript-numbers","Data.Number.Format":"purescript-numbers","Data.Op":"purescript-contravariant","Data.Ord":"purescript-prelude","Data.Ord.Down":"purescript-orders","Data.Ord.Generic":"purescript-prelude","Data.Ord.Max":"purescript-orders","Data.Ord.Min":"purescript-orders","Data.Ordering":"purescript-prelude","Data.Predicate":"purescript-contravariant","Data.Profunctor":"purescript-profunctor","Data.Profunctor.Choice":"purescript-profunctor","Data.Profunctor.Closed":"purescript-profunctor","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Profunctor.Costrong":"purescript-profunctor","Data.Profunctor.Join":"purescript-profunctor","Data.Profunctor.Split":"purescript-profunctor","Data.Profunctor.Star":"purescript-profunctor","Data.Profunctor.Strong":"purescript-profunctor","Data.Reflectable":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Semigroup.Foldable":"purescript-foldable-traversable","Data.Semigroup.Generic":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Semiring":"purescript-prelude","Data.Semiring.Generic":"purescript-prelude","Data.Set":"purescript-ordered-collections","Data.Set.NonEmpty":"purescript-ordered-collections","Data.Show":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Data.String":"purescript-strings","Data.String.CaseInsensitive":"purescript-strings","Data.String.CodePoints":"purescript-strings","Data.String.CodeUnits":"purescript-strings","Data.String.Common":"purescript-strings","Data.String.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.String.NonEmpty.Internal":"purescript-strings","Data.String.Pattern":"purescript-strings","Data.String.Regex":"purescript-strings","Data.String.Regex.Flags":"purescript-strings","Data.String.Regex.Unsafe":"purescript-strings","Data.String.Unsafe":"purescript-strings","Data.Symbol":"purescript-prelude","Data.Time":"purescript-datetime","Data.Time.Component":"purescript-datetime","Data.Time.Component.Gen":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Time.Duration.Gen":"purescript-datetime","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.Traversable.Accum":"purescript-foldable-traversable","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Tuple":"purescript-tuples","Data.Tuple.Nested":"purescript-tuples","Data.Undefined.NoProblem":"purescript-undefined-is-not-a-problem","Data.Undefined.NoProblem.Closed":"purescript-undefined-is-not-a-problem","Data.Undefined.NoProblem.Open":"purescript-undefined-is-not-a-problem","Data.Unfoldable":"purescript-unfoldable","Data.Unfoldable1":"purescript-unfoldable","Data.Unit":"purescript-prelude","Data.Void":"purescript-prelude","Debug":"purescript-debug","Effect":"purescript-effect","Effect.Aff":"purescript-aff","Effect.Aff.Class":"purescript-aff","Effect.Aff.Compat":"purescript-aff","Effect.Class":"purescript-effect","Effect.Class.Console":"purescript-console","Effect.Console":"purescript-console","Effect.Exception":"purescript-exceptions","Effect.Exception.Unsafe":"purescript-exceptions","Effect.Now":"purescript-now","Effect.Random":"purescript-random","Effect.Ref":"purescript-refs","Effect.Uncurried":"purescript-effect","Effect.Unsafe":"purescript-effect","Foreign":"purescript-foreign","Foreign.Index":"purescript-foreign","Foreign.Keys":"purescript-foreign","Foreign.Object":"purescript-foreign-object","Foreign.Object.Gen":"purescript-foreign-object","Foreign.Object.ST":"purescript-foreign-object","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Foreign.Object.Unsafe":"purescript-foreign-object","Partial":"purescript-partial","Partial.Unsafe":"purescript-partial","Prelude":"purescript-prelude","Record.Unsafe":"purescript-prelude","Safe.Coerce":"purescript-safe-coerce","Test.Assert":"purescript-assert","Type.Data.Boolean":"purescript-typelevel-prelude","Type.Data.Ordering":"purescript-typelevel-prelude","Type.Data.Symbol":"purescript-typelevel-prelude","Type.Equality":"purescript-type-equality","Type.Function":"purescript-typelevel-prelude","Type.Prelude":"purescript-typelevel-prelude","Type.Proxy":"purescript-prelude","Type.Row":"purescript-typelevel-prelude","Type.Row.Homogeneous":"purescript-typelevel-prelude","Type.RowList":"purescript-typelevel-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Web.DOM":"purescript-web-dom","Web.DOM.CharacterData":"purescript-web-dom","Web.DOM.ChildNode":"purescript-web-dom","Web.DOM.Comment":"purescript-web-dom","Web.DOM.DOMTokenList":"purescript-web-dom","Web.DOM.Document":"purescript-web-dom","Web.DOM.DocumentFragment":"purescript-web-dom","Web.DOM.DocumentType":"purescript-web-dom","Web.DOM.Element":"purescript-web-dom","Web.DOM.HTMLCollection":"purescript-web-dom","Web.DOM.Internal.Types":"purescript-web-dom","Web.DOM.MutationObserver":"purescript-web-dom","Web.DOM.MutationRecord":"purescript-web-dom","Web.DOM.Node":"purescript-web-dom","Web.DOM.NodeList":"purescript-web-dom","Web.DOM.NodeType":"purescript-web-dom","Web.DOM.NonDocumentTypeChildNode":"purescript-web-dom","Web.DOM.NonElementParentNode":"purescript-web-dom","Web.DOM.ParentNode":"purescript-web-dom","Web.DOM.ProcessingInstruction":"purescript-web-dom","Web.DOM.ShadowRoot":"purescript-web-dom","Web.DOM.Text":"purescript-web-dom","Web.Event.CustomEvent":"purescript-web-events","Web.Event.Event":"purescript-web-events","Web.Event.EventPhase":"purescript-web-events","Web.Event.EventTarget":"purescript-web-events","Web.Event.Internal.Types":"purescript-web-events","Web.File.Blob":"purescript-web-file","Web.File.File":"purescript-web-file","Web.File.FileList":"purescript-web-file","Web.File.FileReader":"purescript-web-file","Web.File.FileReader.ReadyState":"purescript-web-file","Web.File.Url":"purescript-web-file","Web.HTML":"purescript-web-html","Web.HTML.Common":"purescript-web-html","Web.HTML.Event.BeforeUnloadEvent":"purescript-web-html","Web.HTML.Event.BeforeUnloadEvent.EventTypes":"purescript-web-html","Web.HTML.Event.DataTransfer":"purescript-web-html","Web.HTML.Event.DataTransfer.DataTransferItem":"purescript-web-html","Web.HTML.Event.DragEvent":"purescript-web-html","Web.HTML.Event.DragEvent.EventTypes":"purescript-web-html","Web.HTML.Event.ErrorEvent":"purescript-web-html","Web.HTML.Event.EventTypes":"purescript-web-html","Web.HTML.Event.HashChangeEvent":"purescript-web-html","Web.HTML.Event.HashChangeEvent.EventTypes":"purescript-web-html","Web.HTML.Event.PageTransitionEvent":"purescript-web-html","Web.HTML.Event.PageTransitionEvent.EventTypes":"purescript-web-html","Web.HTML.Event.PopStateEvent":"purescript-web-html","Web.HTML.Event.PopStateEvent.EventTypes":"purescript-web-html","Web.HTML.Event.TrackEvent":"purescript-web-html","Web.HTML.Event.TrackEvent.EventTypes":"purescript-web-html","Web.HTML.HTMLAnchorElement":"purescript-web-html","Web.HTML.HTMLAreaElement":"purescript-web-html","Web.HTML.HTMLAudioElement":"purescript-web-html","Web.HTML.HTMLBRElement":"purescript-web-html","Web.HTML.HTMLBaseElement":"purescript-web-html","Web.HTML.HTMLBodyElement":"purescript-web-html","Web.HTML.HTMLButtonElement":"purescript-web-html","Web.HTML.HTMLCanvasElement":"purescript-web-html","Web.HTML.HTMLDListElement":"purescript-web-html","Web.HTML.HTMLDataElement":"purescript-web-html","Web.HTML.HTMLDataListElement":"purescript-web-html","Web.HTML.HTMLDivElement":"purescript-web-html","Web.HTML.HTMLDocument":"purescript-web-html","Web.HTML.HTMLDocument.ReadyState":"purescript-web-html","Web.HTML.HTMLDocument.VisibilityState":"purescript-web-html","Web.HTML.HTMLElement":"purescript-web-html","Web.HTML.HTMLEmbedElement":"purescript-web-html","Web.HTML.HTMLFieldSetElement":"purescript-web-html","Web.HTML.HTMLFormElement":"purescript-web-html","Web.HTML.HTMLHRElement":"purescript-web-html","Web.HTML.HTMLHeadElement":"purescript-web-html","Web.HTML.HTMLHeadingElement":"purescript-web-html","Web.HTML.HTMLHtmlElement":"purescript-web-html","Web.HTML.HTMLHyperlinkElementUtils":"purescript-web-html","Web.HTML.HTMLIFrameElement":"purescript-web-html","Web.HTML.HTMLImageElement":"purescript-web-html","Web.HTML.HTMLImageElement.CORSMode":"purescript-web-html","Web.HTML.HTMLImageElement.DecodingHint":"purescript-web-html","Web.HTML.HTMLImageElement.Laziness":"purescript-web-html","Web.HTML.HTMLInputElement":"purescript-web-html","Web.HTML.HTMLKeygenElement":"purescript-web-html","Web.HTML.HTMLLIElement":"purescript-web-html","Web.HTML.HTMLLabelElement":"purescript-web-html","Web.HTML.HTMLLegendElement":"purescript-web-html","Web.HTML.HTMLLinkElement":"purescript-web-html","Web.HTML.HTMLMapElement":"purescript-web-html","Web.HTML.HTMLMediaElement":"purescript-web-html","Web.HTML.HTMLMediaElement.CanPlayType":"purescript-web-html","Web.HTML.HTMLMediaElement.NetworkState":"purescript-web-html","Web.HTML.HTMLMediaElement.ReadyState":"purescript-web-html","Web.HTML.HTMLMetaElement":"purescript-web-html","Web.HTML.HTMLMeterElement":"purescript-web-html","Web.HTML.HTMLModElement":"purescript-web-html","Web.HTML.HTMLOListElement":"purescript-web-html","Web.HTML.HTMLObjectElement":"purescript-web-html","Web.HTML.HTMLOptGroupElement":"purescript-web-html","Web.HTML.HTMLOptionElement":"purescript-web-html","Web.HTML.HTMLOutputElement":"purescript-web-html","Web.HTML.HTMLParagraphElement":"purescript-web-html","Web.HTML.HTMLParamElement":"purescript-web-html","Web.HTML.HTMLPreElement":"purescript-web-html","Web.HTML.HTMLProgressElement":"purescript-web-html","Web.HTML.HTMLQuoteElement":"purescript-web-html","Web.HTML.HTMLScriptElement":"purescript-web-html","Web.HTML.HTMLSelectElement":"purescript-web-html","Web.HTML.HTMLSourceElement":"purescript-web-html","Web.HTML.HTMLSpanElement":"purescript-web-html","Web.HTML.HTMLStyleElement":"purescript-web-html","Web.HTML.HTMLTableCaptionElement":"purescript-web-html","Web.HTML.HTMLTableCellElement":"purescript-web-html","Web.HTML.HTMLTableColElement":"purescript-web-html","Web.HTML.HTMLTableDataCellElement":"purescript-web-html","Web.HTML.HTMLTableElement":"purescript-web-html","Web.HTML.HTMLTableHeaderCellElement":"purescript-web-html","Web.HTML.HTMLTableRowElement":"purescript-web-html","Web.HTML.HTMLTableSectionElement":"purescript-web-html","Web.HTML.HTMLTemplateElement":"purescript-web-html","Web.HTML.HTMLTextAreaElement":"purescript-web-html","Web.HTML.HTMLTimeElement":"purescript-web-html","Web.HTML.HTMLTitleElement":"purescript-web-html","Web.HTML.HTMLTrackElement":"purescript-web-html","Web.HTML.HTMLTrackElement.ReadyState":"purescript-web-html","Web.HTML.HTMLUListElement":"purescript-web-html","Web.HTML.HTMLVideoElement":"purescript-web-html","Web.HTML.History":"purescript-web-html","Web.HTML.Location":"purescript-web-html","Web.HTML.Navigator":"purescript-web-html","Web.HTML.SelectionMode":"purescript-web-html","Web.HTML.ValidityState":"purescript-web-html","Web.HTML.Window":"purescript-web-html","Web.Internal.FFI":"purescript-web-events","Web.Storage.Event.StorageEvent":"purescript-web-storage","Web.Storage.Storage":"purescript-web-storage"},"modules":[{"comments":null,"declarations":[],"name":"Elmish","reExports":[{"declarations":[{"children":[],"comments":"Support for the most common case entry point - i.e. mounting an Elmish\ncomponent (i.e. `ComponentDef'` structure) to an HTML DOM element with a\nknown ID, with support for server-side rendering.\n\nThe function `boot` returns what we call `BootRecord` - a record of three\nfunctions:\n\n   * `mount` - takes HTML element ID and props¹, creates an instance of the\n      component, and mounts it to the HTML element in question\n   * `hydrate` - same as `mount`, but expects the HTML element to already\n      contain pre-rendered HTML inside. See React docs for more on\n      server-side rendering:\n      https://reactjs.org/docs/react-dom.html#hydrate\n   * `renderToString` - meant to be called on the server (e.g. by running\n      the code under NodeJS) to perform the server-side render. Takes\n      props¹ and returns a `String` containing the resulting HTML.\n\nThe idea is that the PureScript code would export such `BootRecord` for\nconsumption by bootstrap JavaScript code in the page and/or server-side\nNodeJS code (which could be written in PureScript or not). For \"plain\nReact\" scenario, the JavaScript code in the page would just call `mount`.\nFor \"server-side rendering\", the server would first call `renderToString`\nand serve the HTML to the client, and then the client-side JavaScript code\nwould call `hydrate`.\n\n-------------------------------------------------------------------------\n ¹ \"props\" here is a parameter used to instantiate the component (see\n example below). It is recommended that this parameter is a JavaScript\n record (hence the name \"props\"), because it would likely need to be\n supplied by some bootstrap JavaScript code.\n\n-------------------------------------------------------------------------\n\nExample:\n\n    -- PureScript:\n    module Foo(bootRecord) where\n\n    type Props = { hello :: String, world :: Int }\n\n    component :: Props -> ComponentDef' Aff Message State\n    component = ...\n\n    bootRecord :: BootRecord Props\n    bootRecord = boot component\n\n\n    // Server-side JavaScript NodeJS code\n    const foo = require('output/Foo/index.js')\n    const fooHtml = foo.bootRecord.renderToString({ hello: \"Hi!\", world: 42 })\n    serveToClient(\"<html><body><div id='foo'>\" + fooHtml + \"</div></body></html>\")\n\n\n    // Client-side HTML + JS:\n    <html>\n       <body>\n         <div id='foo'>\n           ... server-side-rendered HTML goes here\n         </div>\n       </body>\n       <script src=\"foo_bundle.js\" />\n       <script>\n         Foo.bootRecord.hydrate('foo', { hello: \"Hi!\", world: 42 })\n       </script>\n    </html>\n\n","info":{"arguments":[["props",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["mount",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":["renderToString",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":["hydrate",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[97,4],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Boot.purs","start":[85,1]},"title":"BootRecord"},{"children":[],"comments":"Creates a boot record for the given component. See comments for `BootRecord`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"props","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Boot"],"BootRecord"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[101,91],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Boot.purs","start":[101,1]},"title":"boot"}],"moduleName":{"item":["Elmish","Boot"],"package":null}},{"declarations":[{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":"state","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Command"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[61,42],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[61,30]},"title":"Transition"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Data","Functor"],"Functor"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Bifunctor"],"Bifunctor"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[77,104],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[75,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Functor"],"Functor"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[79,54],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[78,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Apply"],"Apply"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[81,88],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[80,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Applicative"],"Applicative"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[83,29],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[82,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Bind"],"Bind"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[87,41],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[84,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad"],"Monad"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[88,35],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[88,1]},"title":"<anonymous>"}],"comments":"A UI component state transition: wraps the new state value together with a\n(possibly empty) list of effects that the transition has caused (called\n\"commands\"), with each command possibly producing some new messages.\n\nInstances of this type may be created either by using the smart constructor:\n\n    update :: State -> Message -> Transition Message State\n    update state m = transition state [someCommand]\n\nor in monadic style (see comments on `fork` for more on this):\n\n    update :: State -> Message -> Transition Message State\n    update state m = do\n        s1 <- Child1.update state.child1 Child1.SomeMessage # lmap Child1Msg\n        s2 <- Child2.modifyFoo state.child2 # lmap Child2Msg\n        fork someEffect\n        pure state { child1 = s1, child2 = s2 }\n\nor, for simple sub-component delegation, the `BiFunctor` instance may be\nused:\n\n    update :: State -> Message -> Transition Message State\n    update state (ChildMsg m) =\n        Child.update state.child m\n        # bimap ChildMsg (state { child = _ })\n\n","info":{"dataDeclType":"data","declType":"data","roles":["Representational","Representational","Representational"],"typeArguments":[["m",null],["msg",null],["state",null]]},"kind":{"keyword":"data","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[61,72],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[61,1]},"title":"Transition'"},{"children":[],"comments":null,"info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Effect","Aff"],"Aff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[64,54],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[64,1]},"title":"Transition"},{"children":[],"comments":"Definition of a component according to The Elm Architecture. Consists of\nthree functions - `init`, `view`, `update`, - that together describe the\nlifecycle of a component.\n\nType parameters:\n\n  * `m` - a monad in which the effects produced by `update` and `init`\n    functions run.\n  * `msg` - component's message.\n  * `state` - component's state.\n","info":{"arguments":[["m",null],["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["init",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":["view",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":["update",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[210,2],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[206,1]},"title":"ComponentDef'"},{"children":[],"comments":"A `ComponentDef'` in which effects run in `Aff`.\n","info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Effect","Aff"],"Aff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[213,58],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[213,1]},"title":"ComponentDef"},{"children":[],"comments":"Wraps the given component, intercepts its update cycle, and traces (i.e.\nprints to dev console) every command and every state value (as JSON\nobjects), plus timing of renders and state transitions.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[242,33],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[239,1]},"title":"withTrace"},{"children":[],"comments":"Smart constructor for the `Transition'` type. See comments there. This\nfunction takes the new (i.e. updated) state and an array of commands - i.e.\neffects producing messages - and constructs a `Transition'` out of them\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Bind"],"Bind"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[93,106],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[93,1]},"title":"transition"},{"children":[],"comments":"Map a function over the second type arguments of a `Bifunctor`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"c","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[29,66],"name":"/tmp/tmp-2509-3n2Q2pLEN1sa/.registry/bifunctors-6.0.0/src/Data/Bifunctor.purs","start":[29,1]},"title":"rmap"},{"children":[],"comments":"Monad transformation applied to `ComponentDef'`\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"n","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","NaturalTransformation"],"~>"],"tag":"TypeOp"},{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"n","tag":"TypeVar"}],"tag":"BinaryNoParensType"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"n","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[326,91],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[326,1]},"title":"nat"},{"children":[],"comments":"Map a function over the first type argument of a `Bifunctor`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"c","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[25,66],"name":"/tmp/tmp-2509-3n2Q2pLEN1sa/.registry/bifunctors-6.0.0/src/Data/Bifunctor.purs","start":[25,1]},"title":"lmap"},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\nparameter is a function that takes `dispatch` - a message-dispatching\ncallback, as well as `onStop` - a way to be notified when the component is\ndestroyed (aka \"unmounted\"). This structure allows the command to produce\nzero or multiple messages, unlike `fork`, whose callback has to produce\nexactly one, as well as stop listening or free resources etc. when the\ncomponent is unmounted.\n\nNOTE: the `onStop` callback is not recommended for direct use, use the\nsubscriptions API in `Elmish.Subscription` instead.\n\nExample:\n\n    update :: State -> Message -> Transition Message State\n    update state msg = do\n        forks countTo10\n        forks listenToUrl\n        pure state\n\n    countTo10 :: Command Aff Message\n    countTo10 { dispatch } =\n        for_ (1..10) \\n ->\n            delay $ Milliseconds 1000.0\n            dispatch $ Count n\n\n    listenToUrl :: Command Aff Message\n    listenToUrl { dispatch, onStop } =\n        listener <-\n          window >>= addEventListener \"popstate\" do\n            newUrl <- window >>= location >>= href\n            dispatch $ UrlChanged newUrl\n\n        onStop $\n           window >>= removeEventListener listener\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Command"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[181,70],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[181,1]},"title":"forks"},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect doesn't produce any messages, it's a fire-and-forget sort of effect.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[186,62],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[186,1]},"title":"forkVoid"},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect may or may not produce a message, as modeled by returning `Maybe`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[191,91],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[191,1]},"title":"forkMaybe"},{"children":[],"comments":"Creates a `Transition'` that contains the given command (i.e. a\nmessage-producing effect). This is intended to be used for \"accumulating\"\neffects while constructing a transition in imperative-ish style. When used\nas an action inside a `do` block, this function will have the effect of\n\"adding the command to the list\" to be executed. The name `fork` reflects\nthe fact that the given effect will be executed asynchronously, after the\n`update` function returns.\n\nIn more precise terms, the following:\n\n    trs :: Transition' m Message State\n    trs = do\n        fork f\n        fork g\n        pure s\n\nIs equivalent to this:\n\n    trs :: Transition' m Message State\n    trs = transition s [f, g]\n\nAt first glance it may seem that it's shorter to just call the `transition`\nsmart constructor, but monadic style comes in handy for composing the\nupdate out of smaller pieces. Here's a more full example:\n\n    data Message = ButtonClicked | OnNewItem String\n\n    update :: State -> Message -> Transition Message State\n    update state ButtonClick = do\n        fork $ insertItem \"new list\"\n        incButtonClickCount state\n    update state (OnNewItem str) =\n        ...\n\n    insertItem :: Aff Message\n    insertItem name = do\n        delay $ Milliseconds 1000.0\n        pure $ OnNewItem name\n\n    incButtonClickCount :: Transition Message State\n    incButtonClickCount state = do\n        forkVoid $ trackingEvent \"Button click\"\n        pure $ state { buttonsClicked = state.buttonsClicked + 1 }\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[143,78],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[143,1]},"title":"fork"},{"children":[],"comments":"Given a `ComponentDef'`, binds that def to a freshly created React class,\ninstantiates that class, and returns a rendering function.\n\nUnlike `wrapWithLocalState`, this function uses the bullet-proof strategy\nof storing the component state in a dedicated mutable cell, but that\nhappens at the expense of being effectful.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[319,27],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[317,1]},"title":"construct"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"c","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"d","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[[0,0],"Bifunctor"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"d","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"d","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[22,66],"name":"/tmp/tmp-2509-3n2Q2pLEN1sa/.registry/bifunctors-6.0.0/src/Data/Bifunctor.purs","start":[22,3]},"title":"bimap"}],"moduleName":{"item":["Elmish","Component"],"package":null}},{"declarations":[{"children":[],"comments":"A function that a view can use to report messages originating from JS/DOM.\n","info":{"arguments":[["msg",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[23,39],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[23,1]},"title":"Dispatch"},{"children":[],"comments":"A convenience function to make construction of event handlers with\narguments (i.e. `EffectFn1`) a bit shorter. The first parameter is a\n`Dispatch`. The second parameter can be either a message or a function\nfrom the event object to a message.\n\nExpected usage for this function is in its operator form `<|`\n\n    textarea\n      { value: state.text\n      , onChange: dispatch <| \\e -> TextAreaChanged (E.textareaText e)\n      , onMouseDown: dispatch <| TextareaClicked\n      }\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"event","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"msg","tag":"TypeVar"},{"annotation":[],"contents":"event","tag":"TypeVar"},{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[[0,0],"Handle"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"f","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[42,58],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[42,5]},"title":"handle"},{"children":[],"comments":"A variant of `handle` (aka `<|`) that allows to dispatch a message or\nnot conditionally via returning a `Maybe message`.\n\nExpected usage for this function is in its operator form `<?|`\n\n    div\n      { onMouseDown: dispatch <?| \\(E.MouseEvent e) ->\n          if e.ctrlKey then Just ClickedWithControl else Nothing\n      }\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"event","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"msg","tag":"TypeVar"},{"annotation":[],"contents":"event","tag":"TypeVar"},{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[[0,0],"HandleMaybe"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"f","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[55,63],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[55,5]},"title":"handleMaybe"},{"children":[],"comments":null,"info":{"alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handle"}}}],"declType":"alias","fixity":{"associativity":"infixr","precedence":0}},"kind":null,"sourceSpan":{"end":[25,22],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[25,1]},"title":"(<|)"},{"children":[],"comments":null,"info":{"alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handleMaybe"}}}],"declType":"alias","fixity":{"associativity":"infixr","precedence":0}},"kind":null,"sourceSpan":{"end":[26,28],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[26,1]},"title":"(<?|)"}],"moduleName":{"item":["Elmish","Dispatch"],"package":null}},{"declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Ref"],"Ref"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[20,37],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[20,1]},"title":"<anonymous>"}],"comments":"An opaque type representing the type for React `ref` props\n","info":{"dataDeclType":"data","declType":"data","roles":["Phantom"],"typeArguments":[["el",{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}]]},"kind":null,"sourceSpan":{"end":[18,22],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[18,1]},"title":"Ref"},{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactChildren"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[103,77],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[103,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactChildren"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[105,68],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[105,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[149,42],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[149,1]},"title":"<anonymous>"}],"comments":"Instantiated subtree of React DOM. JSX syntax produces values of this type.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[35,41],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[35,1]},"title":"ReactElement"},{"children":[],"comments":"This type represents constructor of a React component with a particular\nbehavior. The type prameter is the record of props (in React lingo) that\nthis component expects. Such constructors can be \"rendered\" into\n`ReactElement` via `createElement`.\n","info":{"dataDeclType":"data","declType":"data","roles":["Nominal"],"typeArguments":[["t0",null]]},"kind":null,"sourceSpan":{"end":[41,51],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[41,1]},"title":"ReactComponent"},{"children":[],"comments":"Variant of `createElement` for creating an element without children.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"props","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"props","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactComponent"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[82,20],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[78,1]},"title":"createElement'"},{"children":[],"comments":"The PureScript import of the React’s `createElement` function. Takes a\ncomponent constructor, a record of props, some children, and returns a\nReact DOM element.\n\nTo represent HTML `data-` attributes, `createElement` supports the\n`_data :: Object` prop.\n\n**Example**\n\n```purescript\nimport Elmish.HTML as H\nimport Foreign.Object as FO\n\nH.div\n  { _data: FO.fromHomogenous { toggle: \"buttons\" } }\n  [...]\n```\n\nrepresents the `<div data-toggle=\"buttons\">` DOM element.\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"props","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"content","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"props","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"content","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactComponent"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"content","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[73,20],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[67,1]},"title":"createElement"},{"children":[],"comments":"Takes the current ref value and a callback function (`el -> Effect Unit`)\nand returns a `Ref`. The current ref value is needed so that we can decide\nwhether the callback function should be run (by comparing the current ref\nand the new one by reference). The callback function should add the `el`\nparameter to some state. E.g.:\n\n```purs\ndata Message = RefChanged (Maybe HTMLInputElement) | …\n\nview :: State -> Dispatch Message -> ReactElement\nview state dispatch =\n  H.input_ \"\" { ref: callbackRef state.inputElement (dispatch <<< RefChanged), … }\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"el","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Ref"],"Ref"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[35,74],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[35,1]},"title":"callbackRef"}],"moduleName":{"item":["Elmish","React"],"package":null}},{"declarations":[{"children":[],"comments":"Similar to `subscribe`, but instead of a message constructor, takes a\nfunction returning `Maybe Message` for issuing messages conditionally.\n\nExample:\n\n     data Message\n       = UrlChanged String\n       | ...\n\n     myComponent :: ComponentDef Message State\n     myComponent = { init, view, update }\n       where\n         init = do\n           Location.urlUpdates # subscribeMaybe \\{ path } ->\n             if path == \"boring\" then Nothing else Just $ UrlChanged path\n           ...\n\n         view = ...\n         update = ...\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Subscription"],"Subscription"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[115,109],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Subscription.purs","start":[115,1]},"title":"subscribeMaybe"},{"children":[],"comments":"Given a subscription and a message constructor, this function \"starts\" the\nsubscription by embedding it in a state transition, which is then intended\nto be part of a larger state transition - either a component's `update` or\n`init` function.\n\nExample:\n\n     data Message\n       = UrlChanged { path :: String, query :: String }\n       | ...\n\n     myComponent :: ComponentDef Message State\n     myComponent = { init, view, update }\n       where\n         init = do\n           subscribe UrlChanged Location.urlUpdates\n           ...\n\n         view = ...\n         update = ...\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Subscription"],"Subscription"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[92,98],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Subscription.purs","start":[92,1]},"title":"subscribe"}],"moduleName":{"item":["Elmish","Subscription"],"package":null}}]},{"comments":null,"declarations":[{"children":[],"comments":"Support for the most common case entry point - i.e. mounting an Elmish\ncomponent (i.e. `ComponentDef'` structure) to an HTML DOM element with a\nknown ID, with support for server-side rendering.\n\nThe function `boot` returns what we call `BootRecord` - a record of three\nfunctions:\n\n   * `mount` - takes HTML element ID and props¹, creates an instance of the\n      component, and mounts it to the HTML element in question\n   * `hydrate` - same as `mount`, but expects the HTML element to already\n      contain pre-rendered HTML inside. See React docs for more on\n      server-side rendering:\n      https://reactjs.org/docs/react-dom.html#hydrate\n   * `renderToString` - meant to be called on the server (e.g. by running\n      the code under NodeJS) to perform the server-side render. Takes\n      props¹ and returns a `String` containing the resulting HTML.\n\nThe idea is that the PureScript code would export such `BootRecord` for\nconsumption by bootstrap JavaScript code in the page and/or server-side\nNodeJS code (which could be written in PureScript or not). For \"plain\nReact\" scenario, the JavaScript code in the page would just call `mount`.\nFor \"server-side rendering\", the server would first call `renderToString`\nand serve the HTML to the client, and then the client-side JavaScript code\nwould call `hydrate`.\n\n-------------------------------------------------------------------------\n ¹ \"props\" here is a parameter used to instantiate the component (see\n example below). It is recommended that this parameter is a JavaScript\n record (hence the name \"props\"), because it would likely need to be\n supplied by some bootstrap JavaScript code.\n\n-------------------------------------------------------------------------\n\nExample:\n\n    -- PureScript:\n    module Foo(bootRecord) where\n\n    type Props = { hello :: String, world :: Int }\n\n    component :: Props -> ComponentDef' Aff Message State\n    component = ...\n\n    bootRecord :: BootRecord Props\n    bootRecord = boot component\n\n\n    // Server-side JavaScript NodeJS code\n    const foo = require('output/Foo/index.js')\n    const fooHtml = foo.bootRecord.renderToString({ hello: \"Hi!\", world: 42 })\n    serveToClient(\"<html><body><div id='foo'>\" + fooHtml + \"</div></body></html>\")\n\n\n    // Client-side HTML + JS:\n    <html>\n       <body>\n         <div id='foo'>\n           ... server-side-rendered HTML goes here\n         </div>\n       </body>\n       <script src=\"foo_bundle.js\" />\n       <script>\n         Foo.bootRecord.hydrate('foo', { hello: \"Hi!\", world: 42 })\n       </script>\n    </html>\n\n","info":{"arguments":[["props",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["mount",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":["renderToString",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":["hydrate",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[97,4],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Boot.purs","start":[85,1]},"title":"BootRecord"},{"children":[],"comments":"Creates a boot record for the given component. See comments for `BootRecord`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"props","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Boot"],"BootRecord"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[101,91],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Boot.purs","start":[101,1]},"title":"boot"},{"children":[],"comments":"This function supports the simplest (almost toy?) use case where there is\nno server, no server-side rendering, all that exists is an HTML page that\nloads the JS bundle (compiled from PureScript), and expects the bundle to\nbreath life into the page. For this case, declare your bundle entry point\n(i.e. your `main` function) as a call to `defaultMain`, passing it DOM\nelement ID to bind to and the UI component to bind to it.\n\nExample:\n\n    module Main\n    import MyComponent(def)\n    import Elmish.Boot as Boot\n\n    main :: Effect Unit\n    main = Boot.defaultMain { elementId: \"app\", def: def }\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["elementId",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":["def",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[140,108],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Boot.purs","start":[140,1]},"title":"defaultMain"}],"name":"Elmish.Boot","reExports":[]},{"comments":null,"declarations":[{"children":[],"comments":null,"info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Effect","Aff"],"Aff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[64,54],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[64,1]},"title":"Transition"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":"state","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Command"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[61,42],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[61,30]},"title":"Transition"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Data","Functor"],"Functor"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Bifunctor"],"Bifunctor"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[77,104],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[75,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Functor"],"Functor"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[79,54],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[78,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Apply"],"Apply"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[81,88],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[80,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Applicative"],"Applicative"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[83,29],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[82,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Bind"],"Bind"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[87,41],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[84,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad"],"Monad"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[88,35],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[88,1]},"title":"<anonymous>"}],"comments":"A UI component state transition: wraps the new state value together with a\n(possibly empty) list of effects that the transition has caused (called\n\"commands\"), with each command possibly producing some new messages.\n\nInstances of this type may be created either by using the smart constructor:\n\n    update :: State -> Message -> Transition Message State\n    update state m = transition state [someCommand]\n\nor in monadic style (see comments on `fork` for more on this):\n\n    update :: State -> Message -> Transition Message State\n    update state m = do\n        s1 <- Child1.update state.child1 Child1.SomeMessage # lmap Child1Msg\n        s2 <- Child2.modifyFoo state.child2 # lmap Child2Msg\n        fork someEffect\n        pure state { child1 = s1, child2 = s2 }\n\nor, for simple sub-component delegation, the `BiFunctor` instance may be\nused:\n\n    update :: State -> Message -> Transition Message State\n    update state (ChildMsg m) =\n        Child.update state.child m\n        # bimap ChildMsg (state { child = _ })\n\n","info":{"dataDeclType":"data","declType":"data","roles":["Representational","Representational","Representational"],"typeArguments":[["m",null],["msg",null],["state",null]]},"kind":{"keyword":"data","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[61,72],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[61,1]},"title":"Transition'"},{"children":[],"comments":"An effect that is launched as a result of a component state transition.\nIt's a function that takes a callback, which allows it to produce (aka\n\"dispatch\") messages, as well as an `onStop` function, which allows it to\ninstall a handler to be executed whent the component is destroyed (aka\n\"unmounted\").\n\nSee `forks` for a more detailed explanation.\n","info":{"arguments":[["m",null],["msg",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["dispatch",{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":["onStop",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[73,93],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[73,1]},"title":"Command"},{"children":[],"comments":"A `ComponentDef'` in which effects run in `Aff`.\n","info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Effect","Aff"],"Aff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[213,58],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[213,1]},"title":"ComponentDef"},{"children":[],"comments":"Definition of a component according to The Elm Architecture. Consists of\nthree functions - `init`, `view`, `update`, - that together describe the\nlifecycle of a component.\n\nType parameters:\n\n  * `m` - a monad in which the effects produced by `update` and `init`\n    functions run.\n  * `msg` - component's message.\n  * `state` - component's state.\n","info":{"arguments":[["m",null],["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["init",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":["view",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":["update",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[210,2],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[206,1]},"title":"ComponentDef'"},{"children":[],"comments":"A callback used to return multiple components of different types. See below\nfor a more detailed explanation.\n\nThis callback is handy in situations where a function must return different\ncomponents (with different `state` and `message` types) depending on\nparameters. The prime example of such situation is routing.\n\nBecause most routes are served by different UI components, with different\n`state` and `message` type parameters, the instantiating functions cannot\nhave the naive signature `route -> component`: they need to \"return\"\ndifferently-typed results depending on the route. In order to make that\nhappen, these functions instead take a polymorphic callback, to which they\npass the UI component. This type alias is the type of such callback: it\ntakes a polymorphically-typed UI component and returns \"some value\", a la\ncontinuation-passing style.\n\nEven though this type is rather trivial, it is included in the library for\nthe purpose of attaching this documentation to it.\n","info":{"arguments":[["m",null],["a",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[234,48],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[233,1]},"title":"ComponentReturnCallback"},{"children":[],"comments":"Smart constructor for the `Transition'` type. See comments there. This\nfunction takes the new (i.e. updated) state and an array of commands - i.e.\neffects producing messages - and constructs a `Transition'` out of them\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Bind"],"Bind"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[93,106],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[93,1]},"title":"transition"},{"children":[],"comments":"Creates a `Transition'` that contains the given command (i.e. a\nmessage-producing effect). This is intended to be used for \"accumulating\"\neffects while constructing a transition in imperative-ish style. When used\nas an action inside a `do` block, this function will have the effect of\n\"adding the command to the list\" to be executed. The name `fork` reflects\nthe fact that the given effect will be executed asynchronously, after the\n`update` function returns.\n\nIn more precise terms, the following:\n\n    trs :: Transition' m Message State\n    trs = do\n        fork f\n        fork g\n        pure s\n\nIs equivalent to this:\n\n    trs :: Transition' m Message State\n    trs = transition s [f, g]\n\nAt first glance it may seem that it's shorter to just call the `transition`\nsmart constructor, but monadic style comes in handy for composing the\nupdate out of smaller pieces. Here's a more full example:\n\n    data Message = ButtonClicked | OnNewItem String\n\n    update :: State -> Message -> Transition Message State\n    update state ButtonClick = do\n        fork $ insertItem \"new list\"\n        incButtonClickCount state\n    update state (OnNewItem str) =\n        ...\n\n    insertItem :: Aff Message\n    insertItem name = do\n        delay $ Milliseconds 1000.0\n        pure $ OnNewItem name\n\n    incButtonClickCount :: Transition Message State\n    incButtonClickCount state = do\n        forkVoid $ trackingEvent \"Button click\"\n        pure $ state { buttonsClicked = state.buttonsClicked + 1 }\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[143,78],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[143,1]},"title":"fork"},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\nparameter is a function that takes `dispatch` - a message-dispatching\ncallback, as well as `onStop` - a way to be notified when the component is\ndestroyed (aka \"unmounted\"). This structure allows the command to produce\nzero or multiple messages, unlike `fork`, whose callback has to produce\nexactly one, as well as stop listening or free resources etc. when the\ncomponent is unmounted.\n\nNOTE: the `onStop` callback is not recommended for direct use, use the\nsubscriptions API in `Elmish.Subscription` instead.\n\nExample:\n\n    update :: State -> Message -> Transition Message State\n    update state msg = do\n        forks countTo10\n        forks listenToUrl\n        pure state\n\n    countTo10 :: Command Aff Message\n    countTo10 { dispatch } =\n        for_ (1..10) \\n ->\n            delay $ Milliseconds 1000.0\n            dispatch $ Count n\n\n    listenToUrl :: Command Aff Message\n    listenToUrl { dispatch, onStop } =\n        listener <-\n          window >>= addEventListener \"popstate\" do\n            newUrl <- window >>= location >>= href\n            dispatch $ UrlChanged newUrl\n\n        onStop $\n           window >>= removeEventListener listener\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Command"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[181,70],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[181,1]},"title":"forks"},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect doesn't produce any messages, it's a fire-and-forget sort of effect.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[186,62],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[186,1]},"title":"forkVoid"},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect may or may not produce a message, as modeled by returning `Maybe`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"message","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"message","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[191,91],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[191,1]},"title":"forkMaybe"},{"children":[],"comments":"Wraps the given component, intercepts its update cycle, and traces (i.e.\nprints to dev console) every command and every state value (as JSON\nobjects), plus timing of renders and state transitions.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[242,33],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[239,1]},"title":"withTrace"},{"children":[],"comments":"Monad transformation applied to `ComponentDef'`\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"n","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","NaturalTransformation"],"~>"],"tag":"TypeOp"},{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"n","tag":"TypeVar"}],"tag":"BinaryNoParensType"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"n","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[326,91],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[326,1]},"title":"nat"},{"children":[],"comments":"Given a `ComponentDef'`, binds that def to a freshly created React class,\ninstantiates that class, and returns a rendering function.\n\nUnlike `wrapWithLocalState`, this function uses the bullet-proof strategy\nof storing the component state in a dedicated mutable cell, but that\nhappens at the expense of being effectful.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[319,27],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[317,1]},"title":"construct"},{"children":[],"comments":"Creates a React component that can be bound to a varying `ComponentDef'`,\nreturns a function that performs the binding.\n\nNote 1: this function accepts an `Aff`-based `ComponentDef'`, it cannot\ntake polymorphic or custom monad. The superficial reason for this is that\nthis function is intended to be used at top-level (see explanation below),\nwhere context for a custom monad is not available. A deeper reason is that\nthis function creates a self-contained React component, and it is precisely\nbecause it is self-contained that it cannot be seamlessly included in an\nouter monadic computation.\n\nThis limitation forces such truly \"reusable\" components to be written in\nterms of `Aff` rather than a custom monad, which is actually a good thing.\nHowever, if it turns out that this component really needs to be in a custom\nmonad, it is always possible to convert it to `Aff` via the `nat` function.\n\nNote 2: in order to accomplish this, such aggregated component will store\nits state using the React facilities - i.e. via `this.setState` and\n`this.state`. While this is appropriate for most cases, it actually has\nproven to be fragile in some specific circumstances (e.g. multiple events\noccurring within the same JS synchronous frame), so it is not recommended\nto use this mechanism for complex components or the top-level program.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"args","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","Component"],"ComponentName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"args","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"ComponentDef"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"args","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[363,20],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[359,1]},"title":"wrapWithLocalState"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[392,45],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[392,23]},"title":"ComponentName"}],"comments":"A unique name for a component created via `wrapWithLocalState`. These names\ndon't technically need to be _completely_ unique, but they do need to be\nunique enough so that two different `wrapWithLocalState`-created components\nthat happen to have the same name never replace each other in the DOM. For\nthis reason, it is recommended to actually make sure these names are\nunique, for example by appending a GUID to them. Read on for a more\ndetailed explanation.\n\nReact uses referential equality to decide whether to create a new instance\nof a component (and thus reset its local state) or keep the existing\ninstance. This means that, on one hand, we cannot use the same React class\nfor every instantiation, because this may create conflicts, where one\nElmish component replaces another in the DOM, but they look like the same\ncomponent to React, which makes it reuse state, which leads to breaking\ntype safety. On the other hand, we cannot create a fresh class on every\nrender, because then React will see it as a new component every time, and\nwill reset its state every time.\n\nThis means that we need some way of figuring out whether it needs to be\nlogically the \"same\" component or \"different\", but there is no way to get that\n\"for free\" (same way React gets it for free from referential equality) due\nto PureScript's purity. Therefore, the only reliable way is to ask the\nprogrammer, which is accomplished by requiring a `ComponentName`, which\nserves as a key.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[392,45],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Component.purs","start":[392,1]},"title":"ComponentName"}],"name":"Elmish.Component","reExports":[{"declarations":[{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"c","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"d","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[[0,0],"Bifunctor"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"d","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"d","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[22,66],"name":"/tmp/tmp-2509-3n2Q2pLEN1sa/.registry/bifunctors-6.0.0/src/Data/Bifunctor.purs","start":[22,3]},"title":"bimap"},{"children":[],"comments":"Map a function over the second type arguments of a `Bifunctor`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"c","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[29,66],"name":"/tmp/tmp-2509-3n2Q2pLEN1sa/.registry/bifunctors-6.0.0/src/Data/Bifunctor.purs","start":[29,1]},"title":"rmap"},{"children":[],"comments":"Map a function over the first type argument of a `Bifunctor`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"c","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[25,66],"name":"/tmp/tmp-2509-3n2Q2pLEN1sa/.registry/bifunctors-6.0.0/src/Data/Bifunctor.purs","start":[25,1]},"title":"lmap"}],"moduleName":{"item":["Data","Bifunctor"],"package":"purescript-bifunctors"}}]},{"comments":null,"declarations":[{"children":[],"comments":null,"info":{"alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handleMaybe"}}}],"declType":"alias","fixity":{"associativity":"infixr","precedence":0}},"kind":null,"sourceSpan":{"end":[26,28],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[26,1]},"title":"(<?|)"},{"children":[],"comments":null,"info":{"alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handle"}}}],"declType":"alias","fixity":{"associativity":"infixr","precedence":0}},"kind":null,"sourceSpan":{"end":[25,22],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[25,1]},"title":"(<|)"},{"children":[],"comments":"A function that a view can use to report messages originating from JS/DOM.\n","info":{"arguments":[["msg",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[23,39],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[23,1]},"title":"Dispatch"},{"children":[{"comments":"A convenience function to make construction of event handlers with\narguments (i.e. `EffectFn1`) a bit shorter. The first parameter is a\n`Dispatch`. The second parameter can be either a message or a function\nfrom the event object to a message.\n\nExpected usage for this function is in its operator form `<|`\n\n    textarea\n      { value: state.text\n      , onChange: dispatch <| \\e -> TextAreaChanged (E.textareaText e)\n      , onMouseDown: dispatch <| TextareaClicked\n      }\n\n","info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"f","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[42,58],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[42,5]},"title":"handle"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Handle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[58,55],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[57,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Handle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}},"sourceSpan":{"end":[60,59],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[59,6]},"title":"<anonymous>"}],"comments":null,"info":{"arguments":[["msg",null],["event",null],["f",null]],"declType":"typeClass","fundeps":[[["f"],["msg","event"]]],"superclasses":[]},"kind":null,"sourceSpan":{"end":[42,58],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[28,1]},"title":"Handle"},{"children":[{"comments":"An escape-hatch way to create an event handler for when neither\n`handle` nor `handleMaybe` are appropriate, which usually happens when\nthe event handler must do something else, besides dispatching a\nmessage.\n\nThe argument may be either an `Effect Unit` or a function from the\nevent object to `Effect Unit`. If a message needs to be dispatched, the\nconsuming code is expected to do it via calling the `Dispatch` function\ndirectly.\n\n    div\n      { onKeyDown: E.handleEffect \\(E.KeyboardEvent e) -> do\n          window >>= localStorage >>= setItem \"Last key pressed\" e.key\n          dispatch PressedKey\n      , onClick: E.handleEffect \\e -> do\n          E.stopPropagation e\n          dispatch ClickedDiv\n      }\n","info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"f","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[86,48],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[86,5]},"title":"handleEffect"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"HandleEffect"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[88,37],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[87,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"HandleEffect"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[90,43],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[89,6]},"title":"<anonymous>"}],"comments":null,"info":{"arguments":[["event",null],["f",null]],"declType":"typeClass","fundeps":[[["f"],["event"]]],"superclasses":[]},"kind":null,"sourceSpan":{"end":[86,48],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[67,1]},"title":"HandleEffect"},{"children":[{"comments":"A variant of `handle` (aka `<|`) that allows to dispatch a message or\nnot conditionally via returning a `Maybe message`.\n\nExpected usage for this function is in its operator form `<?|`\n\n    div\n      { onMouseDown: dispatch <?| \\(E.MouseEvent e) ->\n          if e.ctrlKey then Just ClickedWithControl else Nothing\n      }\n\n","info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"f","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[55,63],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[55,5]},"title":"handleMaybe"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":[{"annotation":[],"contents":"t","tag":"TypeVar"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"HandleMaybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"t","tag":"TypeVar"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[63,89],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[62,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":[{"annotation":[],"contents":"t","tag":"TypeVar"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"HandleMaybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"event","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"t","tag":"TypeVar"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[65,91],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[64,6]},"title":"<anonymous>"}],"comments":null,"info":{"arguments":[["msg",null],["event",null],["f",null]],"declType":"typeClass","fundeps":[[["f"],["msg","event"]]],"superclasses":[]},"kind":null,"sourceSpan":{"end":[55,63],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Dispatch.purs","start":[44,1]},"title":"HandleMaybe"}],"name":"Elmish.Dispatch","reExports":[]},{"comments":null,"declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[112,34],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[112,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[118,37],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[118,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[121,36],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[121,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[124,36],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[124,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[127,37],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[127,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","JSDate"],"JSDate"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[130,36],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[130,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[133,33],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[133,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[138,69],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[138,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[156,43],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[156,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[157,70],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[157,6]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[161,78],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[161,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"b","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[162,105],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[162,6]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn2"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[166,80],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[166,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"b","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"c","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn2"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"c","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[167,135],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[167,6]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[172,64],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[172,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Nullable"],"Nullable"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[191,67],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[191,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Undefined","NoProblem"],"Opt"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[200,62],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[200,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Undefined","NoProblem"],"Req"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[204,62],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[204,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"r","tag":"TypeVar"},{"annotation":[],"contents":"rl","tag":"TypeVar"}],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"rl","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[208,90],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[208,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[220,69],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[220,1]},"title":"<anonymous>"}],"comments":"This class is used to assert that values of a type can be passed to\nJavaScript code directly (without conversion) and understood by that code.\nSpecifically, this class is defined for primitives (strings, numbers,\nbooleans), arrays, and records. This assertion is used in a number of\nplaces that pass complex values to JS code to restrict the set of types\nthat can be safely passed.\n\nIt is still possible to define instances of this class for other,\nnon-primitive types, but you have to know what you're doing and make sure\nthat JS representation is sane and stable. For example, a common trick is\nto `newtype`-wrap known JS enumerations to provide type safety:\n\n    module HTMLButton\n       ( ButtonType  -- NOTE: not exporting the constructor\n       , typeButton, typeSubmit, typeReset\n       , ButtonProps, button\n       )\n       where\n\n    newtype ButtonType = ButtonType String\n    derive newtype instance CanPassToJavaScript ButtonType\n\n    typeButton = ButtonType \"button\" :: ButtonType\n    typeSubmit = ButtonType \"submit\" :: ButtonType\n    typeReset = ButtonType \"reset\" :: ButtonType\n\n    type ButtonProps =\n      { type :: ButtonType\n      , ...\n      }\n\n    foreign import button :: ButtonProps -> ReactElement\n\n","info":{"arguments":[["a",{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[110,38],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[110,1]},"title":"CanPassToJavaScript"},{"children":[{"comments":null,"info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","Foreign"],"ValidationResult"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[75,55],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[75,5]},"title":"validateForeignType"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[119,78],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[119,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[122,105],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[122,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[125,105],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[125,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[128,108],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[128,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","JSDate"],"JSDate"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[131,101],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[131,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[135,110],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[134,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[144,60],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[143,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[153,97],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[145,6]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[159,66],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[158,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[164,66],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[163,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"b","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn2"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[169,66],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[168,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[178,60],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[177,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[188,51],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[179,6]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Nullable"],"Nullable"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[198,82],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[192,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Undefined","NoProblem"],"Opt"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[202,60],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[201,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Undefined","NoProblem"],"Req"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[206,47],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[205,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"r","tag":"TypeVar"},{"annotation":[],"contents":"rl","tag":"TypeVar"}],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"rl","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[212,69],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[209,1]},"title":"<anonymous>"}],"comments":"This class is used to assert that values of a type can be passed from\nJavaScript to PureScript without any conversions. Specifically, this class\nis defined for primitives (strings, numbers, booleans), arrays, and\nrecords.\n","info":{"arguments":[["a",{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[75,55],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[74,1]},"title":"CanReceiveFromJavaScript"},{"children":[{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[68,30],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[68,23]},"title":"Valid"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["path",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":["expected",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":["got",{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}],"declType":"dataConstructor"},"sourceSpan":{"end":[68,40],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[68,31]},"title":"Invalid"}],"comments":null,"info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[68,95],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[68,1]},"title":"ValidationResult"},{"children":[],"comments":"Verifies if the given raw JS value is of the right type/shape to be\nrepresented as `a`, and if so, coerces the value to `a`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarVisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[267,70],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[267,1]},"title":"readForeign"},{"children":[],"comments":"Verifies if the given raw JS value is of the right type/shape to be\nrepresented as `a`, and if so, coerces the value to `a`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarVisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[254,79],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[254,1]},"title":"readForeign'"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[66,48],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[66,1]},"title":"showForeign"},{"children":[],"comments":"Type of the `arguments` object in a JS function (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments).\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[41,38],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[41,1]},"title":"Arguments"},{"children":[],"comments":"Creates a new `Array` from an `Arguments` object.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","Foreign"],"Arguments"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[58,63],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[58,1]},"title":"argumentsToArray_"},{"children":[],"comments":"Gets the value at a specified index of an `Arguments` object.\nReturns `Nothing` if there are not enough arguments.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","Foreign"],"Arguments"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[53,49],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[53,1]},"title":"getArgument"},{"children":[],"comments":"Creates a JS function that takes a variable number of args (via\n`arguments`) and calls the provided effectful continuation, passing the\narguments as an array.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","Foreign"],"Arguments"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[46,69],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[46,1]},"title":"mkVarArgEff_"},{"children":[{"comments":null,"info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Foreign"],"Foreign"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","Foreign"],"ValidationResult"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[228,52],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[228,5]},"title":"validateJsRecord"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim","RowList"],"Nil"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[231,31],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[230,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"name","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"rl'","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","RowList"],"Cons"],"tag":"TypeConstructor"},{"annotation":[],"contents":"name","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"rl'","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[241,67],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[233,6]},"title":"<anonymous>"}],"comments":"This class is implementation of `validateForeignType` for records. It\nvalidates a given JS hash (aka \"object\") against a given type row that\nrepresents a PureScript record, recursively calling\n`validateForeignType` for each field.\n","info":{"arguments":[["rowList",{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","RowList"],"RowList"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":{"keyword":"class","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","RowList"],"RowList"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Constraint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[228,52],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[227,1]},"title":"CanReceiveFromJavaScriptRecord"},{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim","RowList"],"Nil"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[248,39],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[248,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"name","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"rl'","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","RowList"],"Cons"],"tag":"TypeConstructor"},{"annotation":[],"contents":"name","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"rl'","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[249,131],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[249,6]},"title":"<anonymous>"}],"comments":"This class is implementation of `CanPassToJavaScript` for records. It\nsimply iterates over all fields, checking that every field is of a type\nthat also has an instance of `CanPassToJavaScript`.\n","info":{"arguments":[["rowList",{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","RowList"],"RowList"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":{"keyword":"class","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","RowList"],"RowList"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Constraint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[247,58],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Foreign.purs","start":[247,1]},"title":"CanPassToJavaScriptRecord"}],"name":"Elmish.Foreign","reExports":[{"declarations":[{"children":[],"comments":"A type for _foreign data_.\n\nForeign data is data from any external _unknown_ or _unreliable_\nsource, for which it cannot be guaranteed that the runtime representation\nconforms to that of any particular type.\n\nSuitable applications of `Foreign` are\n\n- To represent responses from web services\n- To integrate with external JavaScript libraries.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[57,36],"name":"/tmp/tmp-2509-3n2Q2pLEN1sa/.registry/foreign-7.0.0/src/Foreign.purs","start":[57,1]},"title":"Foreign"}],"moduleName":{"item":["Foreign"],"package":"purescript-foreign"}}]},{"comments":"This module is an echo of an era gone by, it is deprecated and will be\nremoved soon.\n","declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"name","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Opaque"],"Opaque"],"tag":"TypeConstructor"},{"annotation":[],"contents":"name","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[79,31],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Opaque.purs","start":[72,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"name","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Opaque"],"Opaque"],"tag":"TypeConstructor"},{"annotation":[],"contents":"name","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[81,62],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Opaque.purs","start":[81,1]},"title":"<anonymous>"}],"comments":"An opaque reference for tunneling through JSX code.\n\nThis type is a wrapper that lets us pass any PureScript values into JS\ncode, with the expectation that the JS code cannot mess with (inspect,\nmutate) these values, but can pass them back to the PureScript code in\nmessages. This type has instances of `CanPassToJavaScript` and\n`CanReceiveFromJavaScript`, which allows it to be passed in React props or\nview messages.\n\nOne challenge with this type is that we can't just `unsafeCoerce` its\nvalues back and forth, because that would open a very big hole for data\ncorruption to get in. To have some protection against it, we add a weak\nform of verification: internally values of `Opaque` are represented by a\nJavaScript hash with a sole key looking like \"ref:name\", whose value is the\ntarget of the ref, and where \"name\" is the first type argument of this\n`Opaque`. This way, we have at least _something_ to verify (see the\n`CanReceiveFromJavaScript` instance below) that the object passed by the JS\ncode is not some random value, but actually originated as a `Opaque a` of\nthe right type.\n\nAdmittedly, this is only weak protection, because the JS code can still,\nif it really wanted to, construct a hash like `{ \"ref:name\": \"abracadabra\"}`\nand pass it to the PureScript code, which would happily\naccept the \"abracadabra\" value as if it was the right type.\n\nHere are my arguments for why this weak protection is enough:\n  1) The JS code has to actually _try_ to be destructive. Can't happen by\n     accident.\n  2) It's technically impossible to do any better without putting\n     significant restrictions on the type `a` (i.e. requiring it to be\n     `Generic` or to provide type name, etc.), and without losing some\n     performance.\n  3) If such corruption proves to be a problem in the future, we can always\n     fall back to encoding/decoding `Json`, and pay some performance for\n     it.\n\n","info":{"dataDeclType":"newtype","declType":"data","roles":["Phantom","Representational"],"typeArguments":[["name",{"annotation":[],"contents":[["Prim"],"Symbol"],"tag":"TypeConstructor"}],["a",null]]},"kind":{"keyword":"newtype","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Symbol"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[53,56],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Opaque.purs","start":[53,1]},"title":"Opaque"},{"children":[],"comments":"Creates an instance of `Opaque`. See comments on it above.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"name","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"name","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Opaque"],"Opaque"],"tag":"TypeConstructor"},{"annotation":[],"contents":"name","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarVisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[56,55],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Opaque.purs","start":[56,1]},"title":"wrap"},{"children":[],"comments":"Deconstructs an instance of `Opaque`. See comments on it above.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"name","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"name","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Opaque"],"Opaque"],"tag":"TypeConstructor"},{"annotation":[],"contents":"name","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarVisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[60,57],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Opaque.purs","start":[60,1]},"title":"unwrap"}],"name":"Elmish.Opaque","reExports":[]},{"comments":null,"declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactChildren"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[103,77],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[103,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactChildren"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[105,68],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[105,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[149,42],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[149,1]},"title":"<anonymous>"}],"comments":"Instantiated subtree of React DOM. JSX syntax produces values of this type.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[35,41],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[35,1]},"title":"ReactElement"},{"children":[],"comments":"This type represents constructor of a React component with a particular\nbehavior. The type prameter is the record of props (in React lingo) that\nthis component expects. Such constructors can be \"rendered\" into\n`ReactElement` via `createElement`.\n","info":{"dataDeclType":"data","declType":"data","roles":["Nominal"],"typeArguments":[["t0",null]]},"kind":null,"sourceSpan":{"end":[41,51],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[41,1]},"title":"ReactComponent"},{"children":[],"comments":"A specific instance of a React component - i.e. an object that has `state`\nand `props` properties on it.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[45,51],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[45,1]},"title":"ReactComponentInstance"},{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ValidReactProps"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[93,70],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[93,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","TypeError"],"Text"],"tag":"TypeConstructor"},{"annotation":[],"contents":"React props must be a record with all fields of JavaScript-compatible types","tag":"TypeLevelString"}],"tag":"TypeApp"}],"constraintClass":[["Prim","TypeError"],"Fail"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ValidReactProps"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}},"sourceSpan":{"end":[96,25],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[94,6]},"title":"<anonymous>"}],"comments":"Asserts that the given type is a valid React props structure. Currently\nthere are three rules for what is considered \"valid\":\n\n1. The type must be a record.\n2. The types of all props must be safe to pass to JavaScript,\n   which is asserted via the `CanPassToJavaScript` class.\n","info":{"arguments":[["a",{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[92,34],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[92,1]},"title":"ValidReactProps"},{"children":[{"comments":null,"info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[101,71],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[101,29]},"title":"asReactChildren"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactChildren"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[103,77],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[103,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactChildren"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[104,75],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[104,1]},"title":"<anonymous>"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactChildren"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[105,68],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[105,1]},"title":"<anonymous>"}],"comments":"Describes a type that can be used as \"content\" (aka \"children\") of a React\nJSX element. The three instances below make it possible to use `String` and\n`ReactElement` as children directly, without wrapping them in an array.\n","info":{"arguments":[["a",null]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[101,71],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[101,1]},"title":"ReactChildren"},{"children":[],"comments":"The equivalent of `this.state = x`, as opposed to `setState`, which is the\nequivalent of `this.setState(x)`. This function is used in a component's\nconstructor to set the initial state.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[126,71],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[126,1]},"title":"assignState"},{"children":[],"comments":"The PureScript import of the React’s `createElement` function. Takes a\ncomponent constructor, a record of props, some children, and returns a\nReact DOM element.\n\nTo represent HTML `data-` attributes, `createElement` supports the\n`_data :: Object` prop.\n\n**Example**\n\n```purescript\nimport Elmish.HTML as H\nimport Foreign.Object as FO\n\nH.div\n  { _data: FO.fromHomogenous { toggle: \"buttons\" } }\n  [...]\n```\n\nrepresents the `<div data-toggle=\"buttons\">` DOM element.\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"props","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"content","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"props","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"content","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactComponent"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"content","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[73,20],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[67,1]},"title":"createElement"},{"children":[],"comments":"Variant of `createElement` for creating an element without children.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"props","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"props","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactComponent"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[82,20],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[78,1]},"title":"createElement'"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarVisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[115,101],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[115,1]},"title":"getField"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Nullable"],"Nullable"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[107,71],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[107,1]},"title":"getState"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Web","DOM","Internal","Types"],"Element"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[137,55],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[137,1]},"title":"hydrate"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarVisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[119,96],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[119,1]},"title":"setField"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[111,85],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[111,1]},"title":"setState"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Web","DOM","Internal","Types"],"Element"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[131,54],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[131,1]},"title":"render"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[142,56],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[142,1]},"title":"renderToString"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Web","DOM","Internal","Types"],"Element"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[144,39],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React.purs","start":[144,1]},"title":"unmount"}],"name":"Elmish.React","reExports":[{"declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Ref"],"Ref"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[20,37],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[20,1]},"title":"<anonymous>"}],"comments":"An opaque type representing the type for React `ref` props\n","info":{"dataDeclType":"data","declType":"data","roles":["Phantom"],"typeArguments":[["el",{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}]]},"kind":null,"sourceSpan":{"end":[18,22],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[18,1]},"title":"Ref"},{"children":[],"comments":"Takes the current ref value and a callback function (`el -> Effect Unit`)\nand returns a `Ref`. The current ref value is needed so that we can decide\nwhether the callback function should be run (by comparing the current ref\nand the new one by reference). The callback function should add the `el`\nparameter to some state. E.g.:\n\n```purs\ndata Message = RefChanged (Maybe HTMLInputElement) | …\n\nview :: State -> Dispatch Message -> ReactElement\nview state dispatch =\n  H.input_ \"\" { ref: callbackRef state.inputElement (dispatch <<< RefChanged), … }\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"el","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Ref"],"Ref"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[35,74],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[35,1]},"title":"callbackRef"}],"moduleName":{"item":["Elmish","React","Ref"],"package":null}}]},{"comments":null,"declarations":[{"children":[],"comments":"Empty React element.\n","info":{"declType":"value","type":{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}},"kind":null,"sourceSpan":{"end":[11,22],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/DOM.purs","start":[11,1]},"title":"empty"},{"children":[],"comments":"Render a plain string as a React element.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[15,31],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/DOM.purs","start":[15,1]},"title":"text"},{"children":[],"comments":"Wraps multiple React elements as a single one (import of React.Fragment)\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[19,47],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/DOM.purs","start":[19,1]},"title":"fragment"}],"name":"Elmish.React.DOM","reExports":[]},{"comments":"This module provides types to support FFI-importing React components into\nElmish parlance. A typical import of a React component consists of three\nparts:\n\n   * A row of props, with optional props denoted via `Opt`.\n   * Actual FFI-import of the component constructor. This import is weakly\n     typed and shouldn't be exported from the module. Consider it internal\n     implementation detail.\n   * Strongly-typed, PureScript-friendly function that constructs the\n     component. The body of such function usually consists of just a call\n     to `createElement` (or `createElement'` for childless components), its\n     only purpose being the type signature. This function is what should be\n     exported for use by consumers.\n\nClasses and type aliases provided in this module, when applied to the\nconstructor function, make it possible to pass only partial props to it,\nwhile still ensuring their correct types and presence of non-optional ones.\nThis is facilitated by the\nhttps://github.com/paluh/purescript-undefined-is-not-a-problem/ library.\n\nExample:\n\n    // JSX\n    // `world` prop is required, `hello` and `highlight` are optional\n    export const MyComponent = ({ hello, world, highlight }) =>\n      <div>\n        <span>{hello || \"Hello\"}, </span>\n        <span style={{ color: highlight ? \"red\" : \"\" }}>{world}</span>\n      </div>\n\n\n    -- PureScript\n    module MyComponent(Props, OptProps, myComponent) where\n\n    import Data.Undefined.NoProblem (Opt)\n    import Elmish.React (createElement)\n    import Elmish.React.Import (ImportedReactComponentConstructor, ImportedReactComponent)\n\n    type Props = ( world :: String, hello :: Opt String, highlight :: Opt Boolean )\n\n    myComponent :: ImportedReactComponentConstructor Props OptProps\n    myComponent = createElement myComponent_\n\n    foreign import myComponent_ :: ImportedReactComponent\n\n\n    -- PureScript use site\n    import MyComponent (myComponent)\n    import Elmish.React.DOM (fragment)\n\n    view :: ...\n    view = H.fragment\n      [ myComponent { world: \"world\" }\n      , myComponent { hello: \"Goodbye\", world: \"cruel world!\", highlight: true }\n      ]\n\n","declarations":[{"children":[],"comments":"Row of props that are common to all React components, without having to\ndeclare them.\n","info":{"arguments":[["r",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":["key",{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Undefined","NoProblem"],"Opt"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"RCons"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[72,47],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Import.purs","start":[72,1]},"title":"CommonProps"},{"children":[],"comments":"Type of a function used to create a React JSX-imported component that is\ngeneric in such a way as to allow only subset of properties to be passed\nin, while ensuring that all non-optional props are present and have the\nright types.\n","info":{"arguments":[["allowedProps",null],["result",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":{"identifier":"props","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"props","tag":"TypeVar"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Type","Row"],"+"],"tag":"TypeOp"},{"annotation":[],"contents":[["Elmish","React","Import"],"CommonProps"],"tag":"TypeConstructor"},{"annotation":[],"contents":"allowedProps","tag":"TypeVar"}],"tag":"BinaryNoParensType"}],"tag":"TypeApp"}],"constraintClass":[["Data","Undefined","NoProblem","Closed"],"Coerce"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"props","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"props","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"result","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[83,14],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Import.purs","start":[78,1]},"title":"ImportedReactComponentConstructor'"},{"children":[],"comments":"Type of a function used to create a React JSX-imported component that\ndoesn't admit children. The function is generic in such a way as to allow\nonly subset of properties to be passed in, while ensuring that all\nnon-optional props are present and have the right types.\n","info":{"arguments":[["allowedProps",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Import"],"ImportedReactComponentConstructor'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"allowedProps","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[90,65],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Import.purs","start":[89,1]},"title":"ImportedReactComponentConstructor"},{"children":[],"comments":"Type of a function used to create a React JSX-imported component that can\ninclude children. The function is generic in such a way as to allow only\nsubset of properties to be passed in, while ensuring that all non-optional\nprops are present and have the right types. The children are polymorphic,\nexpressed via the `ReactChildren` type class.\n","info":{"arguments":[["allowedProps",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":{"identifier":"content","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"content","tag":"TypeVar"}],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Import"],"ImportedReactComponentConstructor'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"allowedProps","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"content","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Elmish","React"],"ReactElement"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[100,81],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Import.purs","start":[97,1]},"title":"ImportedReactComponentConstructorWithContent"},{"children":[],"comments":"A React component directly imported from JavaScript.\n\nNOTE: This type has an unconstrained type parameter, which reflects the\nfact that React components don't actually have any hard constraints on the\nprops they take. The corollary is that these FFI-imported components are\nnot supposed to be public (which, TBH, applies to all FFI imports), and the\ntype safety is supposed to come from a wrapper function of type\n`ImportedReactComponentConstructor` (see above), which would have the\nappropriate props constraints.\n","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"contents":{"identifier":"r","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React"],"ReactComponent"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[111,58],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Import.purs","start":[111,1]},"title":"ImportedReactComponent"}],"name":"Elmish.React.Import","reExports":[]},{"comments":null,"declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Foreign"],"CanPassToJavaScript"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Ref"],"Ref"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[20,37],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[20,1]},"title":"<anonymous>"}],"comments":"An opaque type representing the type for React `ref` props\n","info":{"dataDeclType":"data","declType":"data","roles":["Phantom"],"typeArguments":[["el",{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}]]},"kind":null,"sourceSpan":{"end":[18,22],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[18,1]},"title":"Ref"},{"children":[],"comments":"Takes the current ref value and a callback function (`el -> Effect Unit`)\nand returns a `Ref`. The current ref value is needed so that we can decide\nwhether the callback function should be run (by comparing the current ref\nand the new one by reference). The callback function should add the `el`\nparameter to some state. E.g.:\n\n```purs\ndata Message = RefChanged (Maybe HTMLInputElement) | …\n\nview :: State -> Dispatch Message -> ReactElement\nview state dispatch =\n  H.input_ \"\" { ref: callbackRef state.inputElement (dispatch <<< RefChanged), … }\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"el","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","React","Ref"],"Ref"],"tag":"TypeConstructor"},{"annotation":[],"contents":"el","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[35,74],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/React/Ref.purs","start":[35,1]},"title":"callbackRef"}],"name":"Elmish.React.Ref","reExports":[]},{"comments":null,"declarations":[{"children":[],"comments":"This type represents a strategy of storing UI component state. The strategy\nis a function that takes initial state and returns a monadic equivalent of\nlens for manipulating the state.\n\nCurrently there are two strategies:\n\n   * `dedicatedStorage` stores state in a dedicated mutable cell. This\n     strategy is used in `Elmish.Component.construct`.\n   * `localState` stores state locally on the React component instance - i.e.\n     `this.setState`. This strategy is used in\n     `Elmish.Component.wrapWithLocalState`.\n\nThe former strategy is more reliable, since React is very lax with\n`this.state` and `this.setState` (for example, updates are \"eventual\", with\nno time guarantees). However, the former strategy is not pure (requires\nallocating the storage cell), and thus doesn't work with inline embedding\nof components.\n","info":{"arguments":[["state",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["initialState",{"annotation":[],"contents":"state","tag":"TypeVar"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["initialize",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":["getState",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":["setState",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Elmish","React"],"ReactComponentInstance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[49,6],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/State.purs","start":[33,1]},"title":"StateStrategy"},{"children":[],"comments":"Stores state in a dedicated mutable state. See comment on `StateStrategy`\nfor explanation.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","State"],"StateStrategy"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[54,63],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/State.purs","start":[54,1]},"title":"dedicatedStorage"},{"children":[],"comments":"Stores state on the React component instance - i.e. `this.setState`. See\ncomment on `StateStrategy`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"state","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","State"],"StateStrategy"],"tag":"TypeConstructor"},{"annotation":[],"contents":"state","tag":"TypeVar"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[72,48],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/State.purs","start":[72,1]},"title":"localState"}],"name":"Elmish.State","reExports":[]},{"comments":"A facade API for expressing the idea of \"external events\" - i.e. messages\nthat do not originate in the UI itself, but come from other sources, such\nas network, browser URL history manipulations, timer, JS workers, and so\non. The API in this module allows capturing such external events and\nconverting them to Elmish messages, so they can be handled in the UI\ncomponent's `update` function.\n\nA `Subscription` value represents such an \"external event\" packaged for\nreuse, while `subscribe` and `subscribeMaybe` functions allow to \"start\"\nsuch subscription by including it in a state transition - usually the\ninitial one. When the component is destroyed (in React lingo -\n\"unmounted\"), all its subscriptions are terminated.\n\nExample:\n\n     -- A reusable library\n     module Location where\n\n     urlUpdates :: ∀ m. MonadEffect m => Subscription m { path :: String, query :: String }\n     urlUpdates = Subscription \\dispatch -> do\n       listener <- eventListener \\_ -> do\n         path <- window >>= location >>= pathname\n         query <- window >>= location >>= search\n         dispatch { path, query }\n\n       window <#> toEventTarget >>= addEventListener popstate listener false\n\n       pure $\n         window <#> toEventTarget >>= removeEventListener popstate listener false\n\n\n     -- Consuming code\n     type State = ...\n     data Message\n       = UrlChanged { path :: String, query :: String }\n       | ...\n\n     myComponent :: ComponentDef Message State\n     myComponent = { init, view, update }\n       where\n         init = do\n           subscribe UrlChanged Location.urlUpdates\n           ...\n\n         view = ...\n         update = ...\n\n","declarations":[{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Dispatch"],"Dispatch"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[68,67],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Subscription.purs","start":[68,26]},"title":"Subscription"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Functor"],"Functor"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Subscription"],"Subscription"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[69,41],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Subscription.purs","start":[69,1]},"title":"<anonymous>"}],"comments":"Represents an external event, such as network, times, JS worker, etc.\n\nThe value wrapped in the newtype is a function that takes a\nmessage-dispatching callback, through which the subscription can send\nmessages, and returns a \"cleanup\" action, which will be executed when it's\ntime to unsubscribe from the subscription.\n","info":{"dataDeclType":"newtype","declType":"data","roles":["Nominal","Representational"],"typeArguments":[["m",null],["a",null]]},"kind":{"keyword":"newtype","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[68,67],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Subscription.purs","start":[68,1]},"title":"Subscription"},{"children":[],"comments":"Given a subscription and a message constructor, this function \"starts\" the\nsubscription by embedding it in a state transition, which is then intended\nto be part of a larger state transition - either a component's `update` or\n`init` function.\n\nExample:\n\n     data Message\n       = UrlChanged { path :: String, query :: String }\n       | ...\n\n     myComponent :: ComponentDef Message State\n     myComponent = { init, view, update }\n       where\n         init = do\n           subscribe UrlChanged Location.urlUpdates\n           ...\n\n         view = ...\n         update = ...\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Subscription"],"Subscription"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[92,98],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Subscription.purs","start":[92,1]},"title":"subscribe"},{"children":[],"comments":"Similar to `subscribe`, but instead of a message constructor, takes a\nfunction returning `Maybe Message` for issuing messages conditionally.\n\nExample:\n\n     data Message\n       = UrlChanged String\n       | ...\n\n     myComponent :: ComponentDef Message State\n     myComponent = { init, view, update }\n       where\n         init = do\n           Location.urlUpdates # subscribeMaybe \\{ path } ->\n             if path == \"boring\" then Nothing else Just $ UrlChanged path\n           ...\n\n         view = ...\n         update = ...\n\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"msg","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Subscription"],"Subscription"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Elmish","Component"],"Transition'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"msg","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[115,109],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Subscription.purs","start":[115,1]},"title":"subscribeMaybe"}],"name":"Elmish.Subscription","reExports":[]},{"comments":null,"declarations":[{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[7,65],"name":"/tmp/tmp-2509-xwkFOXTjYGDj/purescript-elmish/src/Elmish/Trace.purs","start":[7,1]},"title":"traceTime"}],"name":"Elmish.Trace","reExports":[]}],"packageMeta":{"dependencies":{"purescript-aff":">=7.1.0 <8.0.0","purescript-argonaut-core":">=7.0.0 <8.0.0","purescript-arrays":">=7.2.1 <8.0.0","purescript-bifunctors":">=6.0.0 <7.0.0","purescript-console":">=6.0.0 <7.0.0","purescript-debug":">=6.0.2 <7.0.0","purescript-effect":">=4.0.0 <5.0.0","purescript-either":">=6.1.0 <7.0.0","purescript-foldable-traversable":">=6.0.0 <7.0.0","purescript-foreign":">=7.0.0 <8.0.0","purescript-foreign-object":">=4.1.0 <5.0.0","purescript-functions":">=6.0.0 <7.0.0","purescript-integers":">=6.0.0 <7.0.0","purescript-js-date":">=8.0.0 <9.0.0","purescript-maybe":">=6.0.0 <7.0.0","purescript-nullable":">=6.0.0 <7.0.0","purescript-partial":">=4.0.0 <5.0.0","purescript-prelude":">=6.0.1 <7.0.0","purescript-refs":">=6.0.0 <7.0.0","purescript-safe-coerce":">=2.0.0 <3.0.0","purescript-type-equality":">=4.0.1 <5.0.0","purescript-typelevel-prelude":">=7.0.0 <8.0.0","purescript-undefined-is-not-a-problem":">=1.1.0 <2.0.0","purescript-unsafe-coerce":">=6.0.0 <7.0.0","purescript-web-dom":">=6.0.0 <7.0.0","purescript-web-html":">=4.1.0 <5.0.0"},"homepage":"https://github.com/collegevine/purescript-elmish.git","license":["MIT"],"name":"purescript-elmish","repository":{"type":"git","url":"https://github.com/collegevine/purescript-elmish.git"}},"resolvedDependencies":{"purescript-aff":"7.1.0","purescript-argonaut-core":"7.0.0","purescript-arrays":"7.3.0","purescript-assert":"6.0.0","purescript-bifunctors":"6.0.0","purescript-console":"6.1.0","purescript-const":"6.0.0","purescript-contravariant":"6.0.0","purescript-control":"6.0.0","purescript-datetime":"6.1.0","purescript-debug":"6.0.2","purescript-distributive":"6.0.0","purescript-effect":"4.0.0","purescript-either":"6.1.0","purescript-enums":"6.0.1","purescript-exceptions":"6.0.0","purescript-exists":"6.0.0","purescript-foldable-traversable":"6.0.0","purescript-foreign":"7.0.0","purescript-foreign-object":"4.1.0","purescript-functions":"6.0.0","purescript-functors":"5.0.0","purescript-gen":"4.0.0","purescript-identity":"6.0.0","purescript-integers":"6.0.0","purescript-invariant":"6.0.0","purescript-js-date":"8.0.0","purescript-lazy":"6.0.0","purescript-lists":"7.0.0","purescript-maybe":"6.0.0","purescript-media-types":"6.0.0","purescript-newtype":"5.0.0","purescript-nonempty":"7.0.0","purescript-now":"6.0.0","purescript-nullable":"6.0.0","purescript-numbers":"9.0.1","purescript-ordered-collections":"3.1.1","purescript-orders":"6.0.0","purescript-parallel":"6.0.0","purescript-partial":"4.0.0","purescript-prelude":"6.0.1","purescript-profunctor":"6.0.0","purescript-random":"6.0.0","purescript-refs":"6.0.0","purescript-safe-coerce":"2.0.0","purescript-st":"6.2.0","purescript-strings":"6.0.1","purescript-tailrec":"6.1.0","purescript-transformers":"6.0.0","purescript-tuples":"7.0.0","purescript-type-equality":"4.0.1","purescript-typelevel-prelude":"7.0.0","purescript-undefined-is-not-a-problem":"1.1.0","purescript-unfoldable":"6.0.0","purescript-unsafe-coerce":"6.0.0","purescript-web-dom":"6.0.0","purescript-web-events":"4.0.0","purescript-web-file":"4.0.0","purescript-web-html":"4.1.0","purescript-web-storage":"5.0.0"},"tagTime":"2023-12-02T21:52:45+0000","uploader":"pacchettibotti","version":"0.11.2","versionTag":"v0.11.2"}