{"uploader":"fsoikin","packageMeta":{"repository":{"url":"https://github.com/collegevine/purescript-elmish.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-effect":"^v4.0.0","purescript-undefined-is-not-a-problem":"v1.0.0","purescript-console":"^v6.0.0","purescript-either":"^v6.0.0","purescript-arrays":"^v7.0.0","purescript-maybe":"^v6.0.0","purescript-web-html":"^v4.0.0","purescript-argonaut-core":"^v7.0.0","purescript-foreign-object":"^v4.0.0","purescript-aff":"^v7.0.0","purescript-foldable-traversable":"^v6.0.0","purescript-debug":"v6.0.0","purescript-typelevel-prelude":"^v7.0.0","purescript-prelude":"^v6.0.0","purescript-bifunctors":"^v6.0.0","purescript-unsafe-coerce":"^v6.0.0","purescript-refs":"^v6.0.0","purescript-integers":"^v6.0.0","purescript-js-date":"^v8.0.0","purescript-web-dom":"^v6.0.0","purescript-partial":"^v4.0.0","purescript-foreign":"^v7.0.0","purescript-nullable":"^v6.0.0","purescript-functions":"^v6.0.0"},"name":"purescript-elmish","license":["MIT"]},"tagTime":"2022-06-14T18:42:31+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Elmish","Boot"]},"declarations":[{"kind":null,"children":[],"comments":"Support for the most common case entry point - i.e. mounting an Elmish\ncomponent (i.e. `ComponentDef'` structure) to an HTML DOM element with a\nknown ID, with support for server-side rendering.\n\nThe function `boot` returns what we call `BootRecord` - a record of three\nfunctions:\n\n   * `mount` - takes HTML element ID and props¹, creates an instance of the\n      component, and mounts it to the HTML element in question\n   * `hydrate` - same as `mount`, but expects the HTML element to already\n      contain pre-rendered HTML inside. See React docs for more on\n      server-side rendering:\n      https://reactjs.org/docs/react-dom.html#hydrate\n   * `renderToString` - meant to be called on the server (e.g. by running\n      the code under NodeJS) to perform the server-side render. Takes\n      props¹ and returns a `String` containing the resulting HTML.\n\nThe idea is that the PureScript code would export such `BootRecord` for\nconsumption by bootstrap JavaScript code in the page and/or server-side\nNodeJS code (which could be written in PureScript or not). For \"plain\nReact\" scenario, the JavaScript code in the page would just call `mount`.\nFor \"server-side rendering\", the server would first call `renderToString`\nand serve the HTML to the client, and then the client-side JavaScript code\nwould call `hydrate`.\n\n-------------------------------------------------------------------------\n ¹ \"props\" here is a parameter used to instantiate the component (see\n example below). It is recommended that this parameter is a JavaScript\n record (hence the name \"props\"), because it would likely need to be\n supplied by some bootstrap JavaScript code.\n\n-------------------------------------------------------------------------\n\nExample:\n\n    -- PureScript:\n    module Foo(bootRecord) where\n\n    type Props = { hello :: String, world :: Int }\n\n    component :: Props -> ComponentDef' Aff Message State\n    component = ...\n\n    bootRecord :: BootRecord Props\n    bootRecord = boot component\n\n\n    // Server-side JavaScript NodeJS code\n    const foo = require('output/Foo/index.js')\n    const fooHtml = foo.bootRecord.renderToString({ hello: \"Hi!\", world: 42 })\n    serveToClient(\"<html><body><div id='foo'>\" + fooHtml + \"</div></body></html>\")\n\n\n    // Client-side HTML + JS:\n    <html>\n       <body>\n         <div id='foo'>\n           ... server-side-rendered HTML goes here\n         </div>\n       </body>\n       <script src=\"foo_bundle.js\" />\n       <script>\n         Foo.bootRecord.hydrate('foo', { hello: \"Hi!\", world: 42 })\n       </script>\n    </html>\n\n","title":"BootRecord","info":{"arguments":[["props",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["mount",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"RCons","contents":["renderToString",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"RCons","contents":["hydrate",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[85,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[97,4]}},{"kind":null,"children":[],"comments":"Creates a boot record for the given component. See comments for `BootRecord`.\n","title":"boot","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Boot"],"BootRecord"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},null]},null]},null]}},"sourceSpan":{"start":[101,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[101,91]}}]},{"moduleName":{"package":null,"item":["Elmish","Component"]},"declarations":[{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]}]},"keyword":"data"},"children":[{"comments":null,"title":"Transition","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"state"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":{"start":[59,30],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[59,42]}},{"comments":null,"title":"trBifunctor","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[69,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[70,94]}},{"comments":null,"title":"trFunctor","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[71,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[72,54]}},{"comments":null,"title":"trApply","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[73,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[74,88]}},{"comments":null,"title":"trApplicative","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[75,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[76,29]}},{"comments":null,"title":"trBind","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[77,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[80,41]}},{"comments":null,"title":"trMonad","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[81,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[81,46]}}],"comments":"A UI component state transition: wraps the new state value together with a\n(possibly empty) list of effects that the transition has caused (called\n\"commands\"), with each command possibly producing some new messages.\n\nInstances of this type may be created either by using the smart constructor:\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state m = transition state [someCommand]\n\nor in monadic style (see comments on `fork` for more on this):\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state m = do\n        s1 <- Child1.update state.child1 Child1.SomeMessage # lmap Child1Msg\n        s2 <- Child2.modifyFoo state.child2 # lmap Child2Msg\n        fork someEffect\n        pure state { child1 = s1, child2 = s2 }\n\nor, for simple sub-component delegation, the `BiFunctor` instance may be\nused:\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state (ChildMsg m) =\n        Child.update state.child m\n        # bimap ChildMsg (state { child = _ })\n\n","title":"Transition'","info":{"roles":["Representational","Representational","Representational"],"declType":"data","dataDeclType":"data","typeArguments":[["m",null],["msg",null],["state",null]]},"sourceSpan":{"start":[59,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[59,72]}},{"kind":null,"children":[],"comments":null,"title":"Transition","info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}},"sourceSpan":{"start":[62,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[62,54]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]}]},"keyword":"type"},"children":[],"comments":"Definition of a component according to The Elm Architecture. Consists of\nthree functions - `init`, `view`, `update`, - that together describe the\nlifecycle of a component.\n\nType parameters:\n\n  * `m` - a monad in which the effects produced by `update` and `init`\n    functions run.\n  * `msg` - component's message.\n  * `state` - component's state.\n","title":"ComponentDef'","info":{"arguments":[["m",null],["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["init",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"RCons","contents":["view",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"Dispatch"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},{"annotation":[],"tag":"RCons","contents":["update",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[182,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[186,2]}},{"kind":null,"children":[],"comments":"A `ComponentDef'` in which effects run in `Aff`.\n","title":"ComponentDef","info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}},"sourceSpan":{"start":[189,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[189,58]}},{"kind":null,"children":[],"comments":"Wraps the given component, intercepts its update cycle, and traces (i.e.\nprints to dev console) every command and every state value (as JSON\nobjects), plus timing of renders and state transitions.\n","title":"withTrace","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintArgs":[],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[215,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[218,33]}},{"kind":null,"children":[],"comments":"Smart constructor for the `Transition'` type. See comments there. This\nfunction takes the new (i.e. updated) state and an array of commands - i.e.\neffects producing messages - and constructs a `Transition'` out of them\n","title":"transition","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[86,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[86,111]}},{"kind":null,"children":[],"comments":"Map a function over the second type arguments of a `Bifunctor`.\n","title":"rmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[29,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[29,66]}},{"kind":null,"children":[],"comments":"Monad transformation applied to `ComponentDef'`\n","title":"nat","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"BinaryNoParensType","contents":[{"annotation":[],"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"n"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[280,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[280,96]}},{"kind":null,"children":[],"comments":"Map a function over the first type argument of a `Bifunctor`.\n","title":"lmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[25,66]}},{"kind":null,"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\nparameter is a function that takes a message-dispatching callback. This\nstructure allows the command to produce zero or multiple messages, unlike\n`fork`, whose callback has to produce exactly one.\n\nExample:\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state msg = do\n        forks countTo10\n        pure state\n\n    countTo10 :: Command Aff Message\n    countTo10 msgSink =\n        for_ (1..10) \\n ->\n            delay $ Milliseconds 1000.0\n            msgSink $ Count n\n\n","title":"forks","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[157,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[157,75]}},{"kind":null,"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect doesn't produce any messages, it's a fire-and-forget sort of effect.\n","title":"forkVoid","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[162,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[162,67]}},{"kind":null,"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect may or may not produce a message, as modeled by returning `Maybe`.\n","title":"forkMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[167,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[167,96]}},{"kind":null,"children":[],"comments":"Creates a `Transition'` that contains the given command (i.e. a\nmessage-producing effect). This is intended to be used for \"accumulating\"\neffects while constructing a transition in imperative-ish style. When used\nas an action inside a `do` block, this function will have the effect of\n\"adding the command to the list\" to be executed. The name `fork` reflects\nthe fact that the given effect will be executed asynchronously, after the\n`update` function returns.\n\nIn more precise terms, the following:\n\n    trs :: Transition' m Message State\n    trs = do\n        fork f\n        fork g\n        pure s\n\nIs equivalent to this:\n\n    trs :: Transition' m Message State\n    trs = transition s [f, g]\n\nAt first glance it may seem that it's shorter to just call the `transition`\nsmart constructor, but monadic style comes in handy for composing the\nupdate out of smaller pieces. Here's a more full example:\n\n    data Message = ButtonClicked | OnNewItem String\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state ButtonClick = do\n        fork $ insertItem \"new list\"\n        incButtonClickCount state\n    update state (OnNewItem str) =\n        ...\n\n    insertItem :: Aff Message\n    insertItem name = do\n        delay $ Milliseconds 1000.0\n        pure $ OnNewItem name\n\n    incButtonClickCount :: Transition' Aff Message State\n    incButtonClickCount state = do\n        forkVoid $ trackingEvent \"Button click\"\n        pure $ state { buttonsClicked = state.buttonsClicked + 1 }\n\n","title":"fork","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[136,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[136,83]}},{"kind":null,"children":[],"comments":"Given a `ComponentDef'`, binds that def to a freshly created React class,\ninstantiates that class, and returns a rendering function. Note that the\nreturn type of this function is almost the same as that of\n`ComponentDef'::view` - except for state. This is not a coincidence: it is\ndone this way on purpose, so that the result of this call can be used to\nconstruct another `ComponentDef'`.\n\nUnlike `wrapWithLocalState`, this function uses the bullet-proof strategy\nof storing the component state in a dedicated mutable cell, but that\nhappens at the expense of being effectful.\n","title":"construct","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},null]},null]}},"sourceSpan":{"start":[271,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[273,27]}},{"kind":null,"children":[],"comments":null,"title":"bimap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[null,"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[22,3],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[22,66]}}]},{"moduleName":{"package":null,"item":["Elmish","Dispatch"]},"declarations":[{"kind":null,"children":[{"comments":null,"title":"semigroupEffectFn2","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[231,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[232,80]}},{"comments":null,"title":"monoidEffectFn2","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[261,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[262,38]}}],"comments":null,"title":"EffectFn2","info":{"roles":["Representational","Representational","Representational"],"declType":"data","dataDeclType":"data","typeArguments":[["t0",null],["t1",null],["t2",null]]},"sourceSpan":{"start":[142,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[142,62]}},{"kind":null,"children":[{"comments":null,"title":"semigroupEffectFn1","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[228,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[229,74]}},{"comments":null,"title":"monoidEffectFn1","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[258,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[259,36]}}],"comments":null,"title":"EffectFn1","info":{"roles":["Representational","Representational"],"declType":"data","dataDeclType":"data","typeArguments":[["t0",null],["t1",null]]},"sourceSpan":{"start":[138,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[138,54]}},{"kind":null,"children":[],"comments":"A function that a view can use to report messages originating from JS/DOM.\n","title":"Dispatch","info":{"arguments":[["msg",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[17,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[17,39]}},{"kind":null,"children":[],"comments":null,"title":"mkEffectFn2","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},null]},null]},null]}},"sourceSpan":{"start":[180,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[181,42]}},{"kind":null,"children":[],"comments":null,"title":"mkEffectFn1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},null]},null]}},"sourceSpan":{"start":[178,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[179,35]}},{"kind":null,"children":[],"comments":"Same as `handle`, but dispatches a message optionally. See comments on\n`handle` for an example.\n","title":"handleMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["arg",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"Dispatch"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[44,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[44,90]}},{"kind":null,"children":[],"comments":"A convenience function to make construction of event handlers with\narguments (i.e. `EffectFn1`) a bit shorter. The function takes a `Dispatch`\nand a mapping from the event argument to a message which the given\n`Dispatch` accepts, and it's also available in operator form.\n\nThe following example demonstrates expected usage of both `handle` (in its\noperator form `<|`) and `handleMaybe` (in its operator form `<?|`):\n\n    textarea\n      { value: state.text\n      , onChange: dispatch <?| \\e -> TextChanged <$> eventTargetValue e\n      , onMouseDown: dispatch <| \\_ -> TextareaClicked\n      }\n\n      where\n        eventTargetValue = readForeign >=> lookup \"target\" >=> readForeign >=> lookup \"value\"\n\n","title":"handle","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["arg",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"Dispatch"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[39,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[39,79]}},{"kind":null,"children":[],"comments":null,"title":"(<|)","info":{"declType":"alias","alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handle"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[19,22]}},{"kind":null,"children":[],"comments":null,"title":"(<?|)","info":{"declType":"alias","alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handleMaybe"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[20,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[20,28]}}]},{"moduleName":{"package":null,"item":["Elmish","React"]},"declarations":[{"kind":null,"children":[{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[21,37]}}],"comments":"An opaque type representing the type for React `ref` props\n","title":"Ref","info":{"roles":["Phantom"],"declType":"data","dataDeclType":"data","typeArguments":[["el",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]]},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[19,22]}},{"kind":null,"children":[{"comments":null,"title":"reactChildrenArray","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[100,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[101,31]}},{"comments":null,"title":"reactChildrenSingle","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[106,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[107,30]}},{"comments":null,"title":"tojsReactElement","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[135,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[135,62]}}],"comments":"Instantiated subtree of React DOM. JSX syntax produces values of this type.\n","title":"ReactElement","info":{"roles":[],"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[31,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[31,41]}},{"kind":null,"children":[],"comments":"This type represents constructor of a React component with a particular\nbehavior. The type prameter is the record of props (in React lingo) that\nthis component expects. Such constructors can be \"rendered\" into\n`ReactElement` via `createElement`.\n","title":"ReactComponent","info":{"roles":["Nominal"],"declType":"data","dataDeclType":"data","typeArguments":[["t0",null]]},"sourceSpan":{"start":[37,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[37,51]}},{"kind":null,"children":[],"comments":"Variant of `createElement` for creating an element without children.\n","title":"createElement'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]},null]}},"sourceSpan":{"start":[74,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[78,20]}},{"kind":null,"children":[],"comments":"The PureScript import of the React’s `createElement` function. Takes a\ncomponent constructor, a record of props, some children, and returns a\nReact DOM element.\n\nTo represent HTML `data-` attributes, `createElement` supports the\n`_data :: Object` prop.\n\n**Example**\n\n```purescript\nimport Elmish.HTML as H\nimport Foreign.Object as FO\n\nH.div\n  { _data: FO.fromHomogenous { toggle: \"buttons\" } }\n  [...]\n```\n\nrepresents the `<div data-toggle=\"buttons\">` DOM element.\n\n","title":"createElement","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ForAll","contents":["content",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"content"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"content"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[63,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[69,20]}},{"kind":null,"children":[],"comments":"Takes the current ref value and a callback function (`el -> Effect Unit`)\nand returns a `Ref`. The current ref value is needed so that we can decide\nwhether the callback function should be run (by comparing the current ref\nand the new one by reference). The callback function should add the `el`\nparameter to some state. E.g.:\n\n```purs\ndata Message = RefChanged (Maybe HTMLInputElement) | …\n\nview :: State -> Dispatch Message -> ReactElement\nview state dispatch =\n  H.input_ \"\" { ref: callbackRef state.inputElement (dispatch <<< RefChanged), … }\n```\n","title":"callbackRef","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["el",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]}]},null]}},"sourceSpan":{"start":[36,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[36,74]}}]}],"name":"Elmish","comments":null,"declarations":[]},{"reExports":[],"name":"Elmish.Boot","comments":null,"declarations":[{"kind":null,"children":[],"comments":"Support for the most common case entry point - i.e. mounting an Elmish\ncomponent (i.e. `ComponentDef'` structure) to an HTML DOM element with a\nknown ID, with support for server-side rendering.\n\nThe function `boot` returns what we call `BootRecord` - a record of three\nfunctions:\n\n   * `mount` - takes HTML element ID and props¹, creates an instance of the\n      component, and mounts it to the HTML element in question\n   * `hydrate` - same as `mount`, but expects the HTML element to already\n      contain pre-rendered HTML inside. See React docs for more on\n      server-side rendering:\n      https://reactjs.org/docs/react-dom.html#hydrate\n   * `renderToString` - meant to be called on the server (e.g. by running\n      the code under NodeJS) to perform the server-side render. Takes\n      props¹ and returns a `String` containing the resulting HTML.\n\nThe idea is that the PureScript code would export such `BootRecord` for\nconsumption by bootstrap JavaScript code in the page and/or server-side\nNodeJS code (which could be written in PureScript or not). For \"plain\nReact\" scenario, the JavaScript code in the page would just call `mount`.\nFor \"server-side rendering\", the server would first call `renderToString`\nand serve the HTML to the client, and then the client-side JavaScript code\nwould call `hydrate`.\n\n-------------------------------------------------------------------------\n ¹ \"props\" here is a parameter used to instantiate the component (see\n example below). It is recommended that this parameter is a JavaScript\n record (hence the name \"props\"), because it would likely need to be\n supplied by some bootstrap JavaScript code.\n\n-------------------------------------------------------------------------\n\nExample:\n\n    -- PureScript:\n    module Foo(bootRecord) where\n\n    type Props = { hello :: String, world :: Int }\n\n    component :: Props -> ComponentDef' Aff Message State\n    component = ...\n\n    bootRecord :: BootRecord Props\n    bootRecord = boot component\n\n\n    // Server-side JavaScript NodeJS code\n    const foo = require('output/Foo/index.js')\n    const fooHtml = foo.bootRecord.renderToString({ hello: \"Hi!\", world: 42 })\n    serveToClient(\"<html><body><div id='foo'>\" + fooHtml + \"</div></body></html>\")\n\n\n    // Client-side HTML + JS:\n    <html>\n       <body>\n         <div id='foo'>\n           ... server-side-rendered HTML goes here\n         </div>\n       </body>\n       <script src=\"foo_bundle.js\" />\n       <script>\n         Foo.bootRecord.hydrate('foo', { hello: \"Hi!\", world: 42 })\n       </script>\n    </html>\n\n","title":"BootRecord","info":{"arguments":[["props",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["mount",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"RCons","contents":["renderToString",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"RCons","contents":["hydrate",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[85,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[97,4]}},{"kind":null,"children":[],"comments":"Creates a boot record for the given component. See comments for `BootRecord`.\n","title":"boot","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Boot"],"BootRecord"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},null]},null]},null]}},"sourceSpan":{"start":[101,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[101,91]}},{"kind":null,"children":[],"comments":"This function supports the simplest (almost toy?) use case where there is\nno server, no server-side rendering, all that exists is an HTML page that\nloads the JS bundle (compiled from PureScript), and expects the bundle to\nbreath life into the page. For this case, declare your bundle entry point\n(i.e. your `main` function) as a call to `defaultMain`, passing it DOM\nelement ID to bind to and the UI component to bind to it.\n\nExample:\n\n    module Main\n    import MyComponent(def)\n    import Elmish.Boot as Boot\n\n    main :: Effect Unit\n    main = Boot.defaultMain { elementId: \"app\", def: def }\n\n","title":"defaultMain","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["elementId",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"RCons","contents":["def",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"REmpty"}]}]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[140,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[140,108]}}]},{"reExports":[{"moduleName":{"package":"purescript-bifunctors","item":["Data","Bifunctor"]},"declarations":[{"kind":null,"children":[],"comments":null,"title":"bimap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[null,"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[22,3],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[22,66]}},{"kind":null,"children":[],"comments":"Map a function over the second type arguments of a `Bifunctor`.\n","title":"rmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[29,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[29,66]}},{"kind":null,"children":[],"comments":"Map a function over the first type argument of a `Bifunctor`.\n","title":"lmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[25,66]}}]}],"name":"Elmish.Component","comments":null,"declarations":[{"kind":null,"children":[],"comments":null,"title":"Transition","info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}},"sourceSpan":{"start":[62,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[62,54]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]}]},"keyword":"data"},"children":[{"comments":null,"title":"Transition","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"state"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":{"start":[59,30],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[59,42]}},{"comments":null,"title":"trBifunctor","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[69,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[70,94]}},{"comments":null,"title":"trFunctor","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[71,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[72,54]}},{"comments":null,"title":"trApply","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[73,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[74,88]}},{"comments":null,"title":"trApplicative","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[75,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[76,29]}},{"comments":null,"title":"trBind","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[77,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[80,41]}},{"comments":null,"title":"trMonad","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[81,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[81,46]}}],"comments":"A UI component state transition: wraps the new state value together with a\n(possibly empty) list of effects that the transition has caused (called\n\"commands\"), with each command possibly producing some new messages.\n\nInstances of this type may be created either by using the smart constructor:\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state m = transition state [someCommand]\n\nor in monadic style (see comments on `fork` for more on this):\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state m = do\n        s1 <- Child1.update state.child1 Child1.SomeMessage # lmap Child1Msg\n        s2 <- Child2.modifyFoo state.child2 # lmap Child2Msg\n        fork someEffect\n        pure state { child1 = s1, child2 = s2 }\n\nor, for simple sub-component delegation, the `BiFunctor` instance may be\nused:\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state (ChildMsg m) =\n        Child.update state.child m\n        # bimap ChildMsg (state { child = _ })\n\n","title":"Transition'","info":{"roles":["Representational","Representational","Representational"],"declType":"data","dataDeclType":"data","typeArguments":[["m",null],["msg",null],["state",null]]},"sourceSpan":{"start":[59,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[59,72]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"keyword":"type"},"children":[],"comments":"An effect that is launched as a result of a component state transition.\nIt's a function that takes a callback, which allows it to produce (aka\n\"dispatch\") messages.\n","title":"Command","info":{"arguments":[["m",null],["msg",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[67,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[67,52]}},{"kind":null,"children":[],"comments":"A `ComponentDef'` in which effects run in `Aff`.\n","title":"ComponentDef","info":{"arguments":[["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}},"sourceSpan":{"start":[189,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[189,58]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]}]},"keyword":"type"},"children":[],"comments":"Definition of a component according to The Elm Architecture. Consists of\nthree functions - `init`, `view`, `update`, - that together describe the\nlifecycle of a component.\n\nType parameters:\n\n  * `m` - a monad in which the effects produced by `update` and `init`\n    functions run.\n  * `msg` - component's message.\n  * `state` - component's state.\n","title":"ComponentDef'","info":{"arguments":[["m",null],["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["init",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"RCons","contents":["view",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"Dispatch"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},{"annotation":[],"tag":"RCons","contents":["update",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[182,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[186,2]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"keyword":"type"},"children":[],"comments":"A callback used to return multiple components of different types. See below\nfor a more detailed explanation.\n\nThis callback is handy in situations where a function must return different\ncomponents (with different `state` and `message` types) depending on\nparameters. The prime example of such situation is routing.\n\nBecause most routes are served by different UI components, with different\n`state` and `message` type parameters, the instantiating functions cannot\nhave the naive signature `route -> component`: they need to \"return\"\ndifferently-typed results depending on the route. In order to make that\nhappen, these functions instead take a polymorphic callback, to which they\npass the UI component. This type alias is the type of such callback: it\ntakes a polymorphically-typed UI component and returns \"some value\", a la\ncontinuation-passing style.\n\nEven though this type is rather trivial, it is included in the library for\nthe purpose of attaching this documentation to it.\n","title":"ComponentReturnCallback","info":{"arguments":[["m",null],["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[209,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[210,53]}},{"kind":null,"children":[],"comments":"Smart constructor for the `Transition'` type. See comments there. This\nfunction takes the new (i.e. updated) state and an array of commands - i.e.\neffects producing messages - and constructs a `Transition'` out of them\n","title":"transition","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[86,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[86,111]}},{"kind":null,"children":[],"comments":"Creates a `Transition'` that contains the given command (i.e. a\nmessage-producing effect). This is intended to be used for \"accumulating\"\neffects while constructing a transition in imperative-ish style. When used\nas an action inside a `do` block, this function will have the effect of\n\"adding the command to the list\" to be executed. The name `fork` reflects\nthe fact that the given effect will be executed asynchronously, after the\n`update` function returns.\n\nIn more precise terms, the following:\n\n    trs :: Transition' m Message State\n    trs = do\n        fork f\n        fork g\n        pure s\n\nIs equivalent to this:\n\n    trs :: Transition' m Message State\n    trs = transition s [f, g]\n\nAt first glance it may seem that it's shorter to just call the `transition`\nsmart constructor, but monadic style comes in handy for composing the\nupdate out of smaller pieces. Here's a more full example:\n\n    data Message = ButtonClicked | OnNewItem String\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state ButtonClick = do\n        fork $ insertItem \"new list\"\n        incButtonClickCount state\n    update state (OnNewItem str) =\n        ...\n\n    insertItem :: Aff Message\n    insertItem name = do\n        delay $ Milliseconds 1000.0\n        pure $ OnNewItem name\n\n    incButtonClickCount :: Transition' Aff Message State\n    incButtonClickCount state = do\n        forkVoid $ trackingEvent \"Button click\"\n        pure $ state { buttonsClicked = state.buttonsClicked + 1 }\n\n","title":"fork","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[136,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[136,83]}},{"kind":null,"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\nparameter is a function that takes a message-dispatching callback. This\nstructure allows the command to produce zero or multiple messages, unlike\n`fork`, whose callback has to produce exactly one.\n\nExample:\n\n    update :: State -> Message -> Transition' Aff Message State\n    update state msg = do\n        forks countTo10\n        pure state\n\n    countTo10 :: Command Aff Message\n    countTo10 msgSink =\n        for_ (1..10) \\n ->\n            delay $ Milliseconds 1000.0\n            msgSink $ Count n\n\n","title":"forks","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[157,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[157,75]}},{"kind":null,"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect doesn't produce any messages, it's a fire-and-forget sort of effect.\n","title":"forkVoid","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[162,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[162,67]}},{"kind":null,"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect may or may not produce a message, as modeled by returning `Maybe`.\n","title":"forkMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[167,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[167,96]}},{"kind":null,"children":[],"comments":"Wraps the given component, intercepts its update cycle, and traces (i.e.\nprints to dev console) every command and every state value (as JSON\nobjects), plus timing of renders and state transitions.\n","title":"withTrace","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintArgs":[],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[215,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[218,33]}},{"kind":null,"children":[],"comments":"Monad transformation applied to `ComponentDef'`\n","title":"nat","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"BinaryNoParensType","contents":[{"annotation":[],"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"n"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef'"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[280,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[280,96]}},{"kind":null,"children":[],"comments":"Given a `ComponentDef'`, binds that def to a freshly created React class,\ninstantiates that class, and returns a rendering function. Note that the\nreturn type of this function is almost the same as that of\n`ComponentDef'::view` - except for state. This is not a coincidence: it is\ndone this way on purpose, so that the result of this call can be used to\nconstruct another `ComponentDef'`.\n\nUnlike `wrapWithLocalState`, this function uses the bullet-proof strategy\nof storing the component state in a dedicated mutable cell, but that\nhappens at the expense of being effectful.\n","title":"construct","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},null]},null]}},"sourceSpan":{"start":[271,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[273,27]}},{"kind":null,"children":[],"comments":"Creates a React component that can be bound to a varying `ComponentDef'`,\nreturns a function that performs the binding.\n\nNote 1: this function accepts an `Aff`-based `ComponentDef'`, it cannot\ntake polymorphic or custom monad. The superficial reason for this is that\nthis function is intended to be used at top-level (see explanation below),\nwhere context for a custom monad is not available. A deeper reason is that\nthis function creates a self-contained React component, and it is precisely\nbecause it is self-contained that it cannot be seamlessly included in an\nouter monadic computation.\n\nThis limitation forces such truly \"reusable\" components to be written in\nterms of `Aff` rather than a custom monad, which is actually a good thing.\nHowever, if it turns out that this component really needs to be in a custom\nmonad, it is always possible to convert it to `Aff` via the `nat` function.\n\nNote 2: in order to accomplish this, such aggregated component will store\nits state using the React facilities - i.e. via `this.setState` and\n`this.state`. While this is appropriate for most cases, it actually has\nproven to be fragile in some specific circumstances (e.g. multiple events\noccurring within the same JS synchronous frame), so it is not recommended\nto use this mechanism for complex components or the top-level program.\n","title":"wrapWithLocalState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["args",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentName"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"args"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"args"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[313,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[317,20]}},{"kind":null,"children":[{"comments":null,"title":"ComponentName","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[346,23],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[346,45]}}],"comments":"A unique name for a component created via `wrapWithLocalState`. These names\ndon't technically need to be _completely_ unique, but they do need to be\nunique enough so that two different `wrapWithLocalState`-created components\nthat happen to have the same name never replace each other in the DOM. For\nthis reason, it is recommended to actually make sure these names are\nunique, for example by appending a GUID to them. Read on for a more\ndetailed explanation.\n\nReact uses referential equality to decide whether to create a new instance\nof a component (and thus reset its local state) or keep the existing\ninstance. This means that, on one hand, we cannot use the same React class\nfor every instantiation, because this may create conflicts, where one\nElmish component replaces another in the DOM, but they look like the same\ncomponent to React, which makes it reuse state, which leads to breaking\ntype safety. On the other hand, we cannot create a fresh class on every\nrender, because then React will see it as a new component every time, and\nwill reset its state every time.\n\nThis means that we need some way of figuring out whether it needs to be\nlogically the \"same\" component or \"different\", but there is no way to get that\n\"for free\" (same way React gets it for free from referential equality) due\nto PureScript's purity. Therefore, the only reliable way is to ask the\nprogrammer, which is accomplished by requiring a `ComponentName`, which\nserves as a key.\n","title":"ComponentName","info":{"roles":[],"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[346,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[346,45]}}]},{"reExports":[{"moduleName":{"package":"purescript-effect","item":["Effect","Uncurried"]},"declarations":[{"kind":null,"children":[{"comments":null,"title":"semigroupEffectFn2","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[231,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[232,80]}},{"comments":null,"title":"monoidEffectFn2","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[261,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[262,38]}}],"comments":null,"title":"EffectFn2","info":{"roles":["Representational","Representational","Representational"],"declType":"data","dataDeclType":"data","typeArguments":[["t0",null],["t1",null],["t2",null]]},"sourceSpan":{"start":[142,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[142,62]}},{"kind":null,"children":[{"comments":null,"title":"semigroupEffectFn1","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[228,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[229,74]}},{"comments":null,"title":"monoidEffectFn1","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[258,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[259,36]}}],"comments":null,"title":"EffectFn1","info":{"roles":["Representational","Representational"],"declType":"data","dataDeclType":"data","typeArguments":[["t0",null],["t1",null]]},"sourceSpan":{"start":[138,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[138,54]}},{"kind":null,"children":[],"comments":null,"title":"mkEffectFn2","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},null]},null]},null]}},"sourceSpan":{"start":[180,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[181,42]}},{"kind":null,"children":[],"comments":null,"title":"mkEffectFn1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},null]},null]}},"sourceSpan":{"start":[178,1],"name":"bower_components\\purescript-effect\\src\\Effect\\Uncurried.purs","end":[179,35]}}]}],"name":"Elmish.Dispatch","comments":null,"declarations":[{"kind":null,"children":[],"comments":"A function that a view can use to report messages originating from JS/DOM.\n","title":"Dispatch","info":{"arguments":[["msg",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[17,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[17,39]}},{"kind":null,"children":[],"comments":"A convenience function to make construction of event handlers with\narguments (i.e. `EffectFn1`) a bit shorter. The function takes a `Dispatch`\nand a mapping from the event argument to a message which the given\n`Dispatch` accepts, and it's also available in operator form.\n\nThe following example demonstrates expected usage of both `handle` (in its\noperator form `<|`) and `handleMaybe` (in its operator form `<?|`):\n\n    textarea\n      { value: state.text\n      , onChange: dispatch <?| \\e -> TextChanged <$> eventTargetValue e\n      , onMouseDown: dispatch <| \\_ -> TextareaClicked\n      }\n\n      where\n        eventTargetValue = readForeign >=> lookup \"target\" >=> readForeign >=> lookup \"value\"\n\n","title":"handle","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["arg",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"Dispatch"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[39,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[39,79]}},{"kind":null,"children":[],"comments":"Same as `handle`, but dispatches a message optionally. See comments on\n`handle` for an example.\n","title":"handleMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["arg",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"Dispatch"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"arg"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[44,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[44,90]}},{"kind":null,"children":[],"comments":null,"title":"(<|)","info":{"declType":"alias","alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handle"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[19,22]}},{"kind":null,"children":[],"comments":null,"title":"(<?|)","info":{"declType":"alias","alias":[["Elmish","Dispatch"],{"Right":{"Left":{"Ident":"handleMaybe"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[20,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[20,28]}}]},{"reExports":[{"moduleName":{"package":"purescript-foreign","item":["Foreign"]},"declarations":[{"kind":null,"children":[],"comments":"A type for _foreign data_.\n\nForeign data is data from any external _unknown_ or _unreliable_\nsource, for which it cannot be guaranteed that the runtime representation\nconforms to that of any particular type.\n\nSuitable applications of `Foreign` are\n\n- To represent responses from web services\n- To integrate with external JavaScript libraries.\n","title":"Foreign","info":{"roles":[],"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[57,1],"name":"bower_components\\purescript-foreign\\src\\Foreign.purs","end":[57,36]}}]}],"name":"Elmish.Foreign","comments":null,"declarations":[{"kind":null,"children":[{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[111,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[111,34]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},"sourceSpan":{"start":[117,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[117,37]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[120,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[120,36]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[123,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[123,36]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[126,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[126,37]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","JSDate"],"JSDate"]}]}},"sourceSpan":{"start":[129,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[129,36]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[132,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[132,33]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[137,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[137,69]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[155,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[155,43]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[156,6],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[156,70]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[160,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[160,78]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[161,6],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[161,105]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[165,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[165,80]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"c"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}},"sourceSpan":{"start":[166,6],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[166,135]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[171,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[171,64]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Nullable"],"Nullable"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[190,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[190,67]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Undefined","NoProblem"],"Opt"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[199,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[199,62]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[203,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[203,90]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[215,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[215,69]}}],"comments":"This class is used to assert that values of a type can be passed to\nJavaScript code directly (without conversion) and understood by that code.\nSpecifically, this class is defined for primitives (strings, numbers,\nbooleans), arrays, and records. This assertion is used in a number of\nplaces that pass complex values to JS code to restrict the set of types\nthat can be safely passed.\n\nIt is still possible to define instances of this class for other,\nnon-primitive types, but you have to know what you're doing and make sure\nthat JS representation is sane and stable. For example, a common trick is\nto `newtype`-wrap known JS enumerations to provide type safety:\n\n    module HTMLButton\n       ( ButtonType  -- NOTE: not exporting the constructor\n       , typeButton, typeSubmit, typeReset\n       , ButtonProps, button\n       )\n       where\n\n    newtype ButtonType = ButtonType String\n    instance toJsButtonType :: CanPassToJavaScript ButtonType\n    typeButton = ButtonType \"button\" :: ButtonType\n    typeSubmit = ButtonType \"submit\" :: ButtonType\n    typeReset = ButtonType \"reset\" :: ButtonType\n\n    type ButtonProps =\n      { type :: ButtonType\n      , ...\n      }\n\n    foreign import button :: ButtonProps -> ReactElement\n\n","title":"CanPassToJavaScript","info":{"fundeps":[],"arguments":[["a",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[109,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[109,38]}},{"kind":null,"children":[{"comments":null,"title":"validateForeignType","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"ValidationResult"]}]}]}},"sourceSpan":{"start":[75,5],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[75,66]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},"sourceSpan":{"start":[118,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[118,80]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[121,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[121,107]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[124,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[124,107]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[127,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[127,110]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","JSDate"],"JSDate"]}]}},"sourceSpan":{"start":[130,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[130,103]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[133,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[134,112]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}},"sourceSpan":{"start":[142,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[143,62]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[144,6],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[152,97]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[157,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[158,68]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[162,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[163,68]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[167,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[168,68]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}},"sourceSpan":{"start":[176,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[177,62]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[178,6],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[187,51]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Nullable"],"Nullable"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[191,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[197,82]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Undefined","NoProblem"],"Opt"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[200,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[201,78]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[204,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[207,69]}}],"comments":"This class is used to assert that values of a type can be passed from\nJavaScript to PureScript without any conversions. Specifically, this class\nis defined for primitives (strings, numbers, booleans), arrays, and\nrecords.\n","title":"CanReceiveFromJavaScript","info":{"fundeps":[],"arguments":[["a",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[74,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[75,66]}},{"kind":null,"children":[{"comments":null,"title":"Valid","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"start":[68,23],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[68,30]}},{"comments":null,"title":"Invalid","info":{"arguments":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["path",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"RCons","contents":["expected",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"RCons","contents":["got",{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]},{"annotation":[],"tag":"REmpty"}]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":{"start":[68,31],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[68,40]}}],"comments":null,"title":"ValidationResult","info":{"roles":[],"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[68,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[68,95]}},{"kind":null,"children":[],"comments":"Verifies if the given raw JS value is of the right type/shape to be\nrepresented as `a`, and if so, coerces the value to `a`.\n","title":"readForeign","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[262,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[262,69]}},{"kind":null,"children":[],"comments":"Verifies if the given raw JS value is of the right type/shape to be\nrepresented as `a`, and if so, coerces the value to `a`.\n","title":"readForeign'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[249,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[249,78]}},{"kind":null,"children":[],"comments":null,"title":"showForeign","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[66,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[66,48]}},{"kind":null,"children":[],"comments":"Type of the `arguments` object in a JS function (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments).\n","title":"Arguments","info":{"roles":[],"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[41,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[41,38]}},{"kind":null,"children":[],"comments":"Creates a new `Array` from an `Arguments` object.\n","title":"argumentsToArray_","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"Arguments"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}},"sourceSpan":{"start":[58,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[58,63]}},{"kind":null,"children":[],"comments":"Gets the value at a specified index of an `Arguments` object.\nReturns `Nothing` if there are not enough arguments.\n","title":"getArgument","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"Arguments"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}]}},"sourceSpan":{"start":[53,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[53,49]}},{"kind":null,"children":[],"comments":"Creates a JS function that takes a variable number of args (via\n`arguments`) and calls the provided effectful continuation, passing the\narguments as an array.\n","title":"mkVarArgEff_","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"Arguments"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},"sourceSpan":{"start":[46,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[46,69]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"RowList"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Constraint"]}]},"keyword":"class"},"children":[{"comments":null,"title":"validateJsRecord","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"annotation":[],"tag":"TypeVar","contents":"rowList"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"ValidationResult"]}]}]}},"sourceSpan":{"start":[223,5],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[223,69]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[225,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[226,33]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl'"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"rl'"}]}]}},"sourceSpan":{"start":[228,6],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[236,67]}}],"comments":"This class is implementation of `validateForeignType` for records. It\nvalidates a given JS hash (aka \"object\") against a given type row that\nrepresents a PureScript record, recursively calling\n`validateForeignType` for each field.\n","title":"CanReceiveFromJavaScriptRecord","info":{"fundeps":[],"arguments":[["rowList",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"RowList"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[222,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[223,69]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"RowList"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Constraint"]}]},"keyword":"class"},"children":[{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[243,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[243,39]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl'"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"rl'"}]}]}},"sourceSpan":{"start":[244,6],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[244,131]}}],"comments":"This class is implementation of `CanPassToJavaScript` for records. It\nsimply iterates over all fields, checking that every field is of a type\nthat also has an instance of `CanPassToJavaScript`.\n","title":"CanPassToJavaScriptRecord","info":{"fundeps":[],"arguments":[["rowList",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"RowList"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[242,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[242,58]}}]},{"reExports":[],"name":"Elmish.Opaque","comments":"This module is an echo of an era gone by, it is deprecated and will be\nremoved soon.\n","declarations":[{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Symbol"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"keyword":"newtype"},"children":[{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Opaque"],"Opaque"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\Opaque.purs","end":[79,31]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Opaque"],"Opaque"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[81,1],"name":"C:\\w\\elmish\\src\\Elmish\\Opaque.purs","end":[81,62]}}],"comments":"An opaque reference for tunneling through JSX code.\n\nThis type is a wrapper that lets us pass any PureScript values into JS\ncode, with the expectation that the JS code cannot mess with (inspect,\nmutate) these values, but can pass them back to the PureScript code in\nmessages. This type has instances of `CanPassToJavaScript` and\n`CanReceiveFromJavaScript`, which allows it to be passed in React props or\nview messages.\n\nOne challenge with this type is that we can't just `unsafeCoerce` its\nvalues back and forth, because that would open a very big hole for data\ncorruption to get in. To have some protection against it, we add a weak\nform of verification: internally values of `Opaque` are represented by a\nJavaScript hash with a sole key looking like \"ref:name\", whose value is the\ntarget of the ref, and where \"name\" is the first type argument of this\n`Opaque`. This way, we have at least _something_ to verify (see the\n`CanReceiveFromJavaScript` instance below) that the object passed by the JS\ncode is not some random value, but actually originated as a `Opaque a` of\nthe right type.\n\nAdmittedly, this is only weak protection, because the JS code can still,\nif it really wanted to, construct a hash like `{ \"ref:name\": \"abracadabra\"}`\nand pass it to the PureScript code, which would happily\naccept the \"abracadabra\" value as if it was the right type.\n\nHere are my arguments for why this weak protection is enough:\n  1) The JS code has to actually _try_ to be destructive. Can't happen by\n     accident.\n  2) It's technically impossible to do any better without putting\n     significant restrictions on the type `a` (i.e. requiring it to be\n     `Generic` or to provide type name, etc.), and without losing some\n     performance.\n  3) If such corruption proves to be a problem in the future, we can always\n     fall back to encoding/decoding `Json`, and pay some performance for\n     it.\n\n","title":"Opaque","info":{"roles":["Phantom","Representational"],"declType":"data","dataDeclType":"newtype","typeArguments":[["name",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Symbol"]}],["a",null]]},"sourceSpan":{"start":[53,1],"name":"C:\\w\\elmish\\src\\Elmish\\Opaque.purs","end":[53,56]}},{"kind":null,"children":[],"comments":"Creates an instance of `Opaque`. See comments on it above.\n","title":"wrap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["name",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Opaque"],"Opaque"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"C:\\w\\elmish\\src\\Elmish\\Opaque.purs","end":[56,54]}},{"kind":null,"children":[],"comments":"Deconstructs an instance of `Opaque`. See comments on it above.\n","title":"unwrap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["name",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Opaque"],"Opaque"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[60,1],"name":"C:\\w\\elmish\\src\\Elmish\\Opaque.purs","end":[60,56]}}]},{"reExports":[{"moduleName":{"package":null,"item":["Elmish","React","Ref"]},"declarations":[{"kind":null,"children":[{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[21,37]}}],"comments":"An opaque type representing the type for React `ref` props\n","title":"Ref","info":{"roles":["Phantom"],"declType":"data","dataDeclType":"data","typeArguments":[["el",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]]},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[19,22]}},{"kind":null,"children":[],"comments":"Takes the current ref value and a callback function (`el -> Effect Unit`)\nand returns a `Ref`. The current ref value is needed so that we can decide\nwhether the callback function should be run (by comparing the current ref\nand the new one by reference). The callback function should add the `el`\nparameter to some state. E.g.:\n\n```purs\ndata Message = RefChanged (Maybe HTMLInputElement) | …\n\nview :: State -> Dispatch Message -> ReactElement\nview state dispatch =\n  H.input_ \"\" { ref: callbackRef state.inputElement (dispatch <<< RefChanged), … }\n```\n","title":"callbackRef","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["el",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]}]},null]}},"sourceSpan":{"start":[36,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[36,74]}}]}],"name":"Elmish.React","comments":null,"declarations":[{"kind":null,"children":[{"comments":null,"title":"reactChildrenArray","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[100,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[101,31]}},{"comments":null,"title":"reactChildrenSingle","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[106,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[107,30]}},{"comments":null,"title":"tojsReactElement","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[135,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[135,62]}}],"comments":"Instantiated subtree of React DOM. JSX syntax produces values of this type.\n","title":"ReactElement","info":{"roles":[],"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[31,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[31,41]}},{"kind":null,"children":[],"comments":"This type represents constructor of a React component with a particular\nbehavior. The type prameter is the record of props (in React lingo) that\nthis component expects. Such constructors can be \"rendered\" into\n`ReactElement` via `createElement`.\n","title":"ReactComponent","info":{"roles":["Nominal"],"declType":"data","dataDeclType":"data","typeArguments":[["t0",null]]},"sourceSpan":{"start":[37,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[37,51]}},{"kind":null,"children":[],"comments":"A specific instance of a React component - i.e. an object that has `state`\nand `props` properties on it.\n","title":"ReactComponentInstance","info":{"roles":[],"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[41,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[41,51]}},{"kind":null,"children":[{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ValidReactProps"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[89,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[89,70]}},{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","TypeError"],"Fail"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"annotation":[],"tag":"TypeLevelString","contents":"React props must be a record with all fields of JavaScript-compatible types"}]}],"constraintKindArgs":[],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ValidReactProps"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[90,6],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[92,25]}}],"comments":"Asserts that the given type is a valid React props structure. Currently\nthere are three rules for what is considered \"valid\":\n\n1. The type must be a record.\n2. The types of all props must be safe to pass to JavaScript,\n   which is asserted via the `CanPassToJavaScript` class.\n","title":"ValidReactProps","info":{"fundeps":[],"arguments":[["a",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[88,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[88,34]}},{"kind":null,"children":[{"comments":null,"title":"asReactChildren","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[98,5],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[98,47]}},{"comments":null,"title":"reactChildrenArray","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[100,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[101,31]}},{"comments":null,"title":"reactChildrenString","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[103,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[104,43]}},{"comments":null,"title":"reactChildrenSingle","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[106,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[107,30]}}],"comments":"Describes a type that can be used as \"content\" (aka \"children\") of a React\nJSX element. The three instances below make it possible to use `String` and\n`ReactElement` as children directly, without wrapping them in an array.\n","title":"ReactChildren","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[97,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[98,47]}},{"kind":null,"children":[],"comments":"The equivalent of `this.state = x`, as opposed to `setState`, which is the\nequivalent of `this.setState(x)`. This function is used in a component's\nconstructor to set the initial state.\n","title":"assignState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[120,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[120,76]}},{"kind":null,"children":[],"comments":"The PureScript import of the React’s `createElement` function. Takes a\ncomponent constructor, a record of props, some children, and returns a\nReact DOM element.\n\nTo represent HTML `data-` attributes, `createElement` supports the\n`_data :: Object` prop.\n\n**Example**\n\n```purescript\nimport Elmish.HTML as H\nimport Foreign.Object as FO\n\nH.div\n  { _data: FO.fromHomogenous { toggle: \"buttons\" } }\n  [...]\n```\n\nrepresents the `<div data-toggle=\"buttons\">` DOM element.\n\n","title":"createElement","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ForAll","contents":["content",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"content"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"content"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[63,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[69,20]}},{"kind":null,"children":[],"comments":"Variant of `createElement` for creating an element without children.\n","title":"createElement'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]},null]}},"sourceSpan":{"start":[74,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[78,20]}},{"kind":null,"children":[],"comments":null,"title":"getState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Nullable"],"Nullable"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}}]}]},null]}},"sourceSpan":{"start":[109,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[109,76]}},{"kind":null,"children":[],"comments":null,"title":"hydrate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Web","DOM","Internal","Types"],"Element"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":{"start":[128,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[128,55]}},{"kind":null,"children":[],"comments":null,"title":"setState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[113,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[113,90]}},{"kind":null,"children":[],"comments":null,"title":"render","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Web","DOM","Internal","Types"],"Element"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":{"start":[124,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[124,54]}},{"kind":null,"children":[],"comments":null,"title":"renderToString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[132,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[132,56]}}]},{"reExports":[],"name":"Elmish.React.DOM","comments":null,"declarations":[{"kind":null,"children":[],"comments":"Empty React element.\n","title":"empty","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}},"sourceSpan":{"start":[11,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\DOM.purs","end":[11,22]}},{"kind":null,"children":[],"comments":"Render a plain string as a React element.\n","title":"text","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[15,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\DOM.purs","end":[15,31]}},{"kind":null,"children":[],"comments":"Wraps multiple React elements as a single one (import of React.Fragment)\n","title":"fragment","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\DOM.purs","end":[19,47]}}]},{"reExports":[],"name":"Elmish.React.Import","comments":"This module provides types to support FFI-importing React components into\nElmish parlance. A typical import of a React component consists of three\nparts:\n\n   * A row of props, with optional props denoted via `Opt`.\n   * Actual FFI-import of the component constructor. This import is weakly\n     typed and shouldn't be exported from the module. Consider it internal\n     implementation detail.\n   * Strongly-typed, PureScript-friendly function that constructs the\n     component. The body of such function usually consists of just a call\n     to `createElement` (or `createElement'` for childless components), its\n     only purpose being the type signature. This function is what should be\n     exported for use by consumers.\n\nClasses and type aliases provided in this module, when applied to the\nconstructor function, make it possible to pass only partial props to it,\nwhile still ensuring their correct types and presence of non-optional ones.\nThis is facilitated by the\nhttps://github.com/paluh/purescript-undefined-is-not-a-problem/ library.\n\nExample:\n\n    // JSX\n    // `world` prop is required, `hello` and `highlight` are optional\n    export const MyComponent = ({ hello, world, highlight }) =>\n      <div>\n        <span>{hello || \"Hello\"}, </span>\n        <span style={{ color: highlight ? \"red\" : \"\" }}>{world}</span>\n      </div>\n\n\n    -- PureScript\n    module MyComponent(Props, OptProps, myComponent) where\n\n    import Data.Undefined.NoProblem (Opt)\n    import Elmish.React (createElement)\n    import Elmish.React.Import (ImportedReactComponentConstructor, ImportedReactComponent)\n\n    type Props = ( world :: String, hello :: Opt String, highlight :: Opt Boolean )\n\n    myComponent :: ImportedReactComponentConstructor Props OptProps\n    myComponent = createElement myComponent_\n\n    foreign import myComponent_ :: ImportedReactComponent\n\n\n    -- PureScript use site\n    import MyComponent (myComponent)\n    import Elmish.React.DOM (fragment)\n\n    view :: ...\n    view = H.fragment\n      [ myComponent { world: \"world\" }\n      , myComponent { hello: \"Goodbye\", world: \"cruel world!\", highlight: true }\n      ]\n\n","declarations":[{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Row"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Row"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"keyword":"type"},"children":[],"comments":"Row of props that are common to all React components, without having to\ndeclare them.\n","title":"CommonProps","info":{"arguments":[["r",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"RCons","contents":["key",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Undefined","NoProblem"],"Opt"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[72,47]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Row"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"keyword":"type"},"children":[],"comments":"Type of a function used to create a React JSX-imported component that is\ngeneric in such a way as to allow only subset of properties to be passed\nin, while ensuring that all non-optional props are present and have the\nright types.\n","title":"ImportedReactComponentConstructor'","info":{"arguments":[["allowedProps",null],["result",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Undefined","NoProblem","Closed"],"Coerce"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"BinaryNoParensType","contents":[{"annotation":[],"tag":"TypeOp","contents":[["Type","Row"],"+"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Import"],"CommonProps"]},{"annotation":[],"tag":"TypeVar","contents":"allowedProps"}]}]}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeVar","contents":"result"}]}]}]},null]}},"sourceSpan":{"start":[78,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[83,14]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Row"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},"keyword":"type"},"children":[],"comments":"Type of a function used to create a React JSX-imported component that\ndoesn't admit children. The function is generic in such a way as to allow\nonly subset of properties to be passed in, while ensuring that all\nnon-optional props are present and have the right types.\n","title":"ImportedReactComponentConstructor","info":{"arguments":[["allowedProps",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Import"],"ImportedReactComponentConstructor'"]},{"annotation":[],"tag":"TypeVar","contents":"allowedProps"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[89,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[90,65]}},{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Row"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},"keyword":"type"},"children":[],"comments":"Type of a function used to create a React JSX-imported component that can\ninclude children. The function is generic in such a way as to allow only\nsubset of properties to be passed in, while ensuring that all non-optional\nprops are present and have the right types. The children are polymorphic,\nexpressed via the `ReactChildren` type class.\n","title":"ImportedReactComponentConstructorWithContent","info":{"arguments":[["allowedProps",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["content",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"content"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Import"],"ImportedReactComponentConstructor'"]},{"annotation":[],"tag":"TypeVar","contents":"allowedProps"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"content"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}}]}]},null]}},"sourceSpan":{"start":[97,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[100,81]}},{"kind":null,"children":[],"comments":"A React component directly imported from JavaScript.\n\nNOTE: This type has an unconstrained type parameter, which reflects the\nfact that React components don't actually have any hard constraints on the\nprops they take. The corollary is that these FFI-imported components are\nnot supposed to be public (which, TBH, applies to all FFI imports), and the\ntype safety is supposed to come from a wrapper function of type\n`ImportedReactComponentConstructor` (see above), which would have the\nappropriate props constraints.\n","title":"ImportedReactComponent","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]},null]}},"sourceSpan":{"start":[111,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[111,58]}}]},{"reExports":[],"name":"Elmish.React.Ref","comments":null,"declarations":[{"kind":null,"children":[{"comments":null,"title":"<anonymous>","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[21,37]}}],"comments":"An opaque type representing the type for React `ref` props\n","title":"Ref","info":{"roles":["Phantom"],"declType":"data","dataDeclType":"data","typeArguments":[["el",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]]},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[19,22]}},{"kind":null,"children":[],"comments":"Takes the current ref value and a callback function (`el -> Effect Unit`)\nand returns a `Ref`. The current ref value is needed so that we can decide\nwhether the callback function should be run (by comparing the current ref\nand the new one by reference). The callback function should add the `el`\nparameter to some state. E.g.:\n\n```purs\ndata Message = RefChanged (Maybe HTMLInputElement) | …\n\nview :: State -> Dispatch Message -> ReactElement\nview state dispatch =\n  H.input_ \"\" { ref: callbackRef state.inputElement (dispatch <<< RefChanged), … }\n```\n","title":"callbackRef","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["el",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"el"}]}]}]},null]}},"sourceSpan":{"start":[36,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Ref.purs","end":[36,74]}}]},{"reExports":[],"name":"Elmish.State","comments":null,"declarations":[{"kind":null,"children":[],"comments":"This type represents a strategy of storing UI component state. The strategy\nis a function that takes initial state and returns a monadic equivalent of\nlens for manipulating the state.\n\nCurrently there are two strategies:\n\n   * `dedicatedStorage` stores state in a dedicated mutable cell. This\n     strategy is used in `Elmish.Component.construct`.\n   * `localState` stores state locally on the React component instance - i.e.\n     `this.setState`. This strategy is used in\n     `Elmish.Component.wrapWithLocalState`.\n\nThe former strategy is more reliable, since React is very lax with\n`this.state` and `this.setState` (for example, updates are \"eventual\", with\nno time guarantees). However, the former strategy is not pure (requires\nallocating the storage cell), and thus doesn't work with inline embedding\nof components.\n","title":"StateStrategy","info":{"arguments":[["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["initialState",{"annotation":[],"tag":"TypeVar","contents":"state"},{"annotation":[],"tag":"REmpty"}]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["initialize",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"RCons","contents":["getState",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"RCons","contents":["setState",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}]}},"sourceSpan":{"start":[33,1],"name":"C:\\w\\elmish\\src\\Elmish\\State.purs","end":[49,6]}},{"kind":null,"children":[],"comments":"Stores state in a dedicated mutable state. See comment on `StateStrategy`\nfor explanation.\n","title":"dedicatedStorage","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","State"],"StateStrategy"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}}]},null]}},"sourceSpan":{"start":[54,1],"name":"C:\\w\\elmish\\src\\Elmish\\State.purs","end":[54,63]}},{"kind":null,"children":[],"comments":"Stores state on the React component instance - i.e. `this.setState`. See\ncomment on `StateStrategy`.\n","title":"localState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","State"],"StateStrategy"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},null]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\State.purs","end":[72,48]}}]},{"reExports":[],"name":"Elmish.Trace","comments":null,"declarations":[{"kind":null,"children":[],"comments":null,"title":"traceTime","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[7,1],"name":"C:\\w\\elmish\\src\\Elmish\\Trace.purs","end":[7,65]}}]}],"resolvedDependencies":{"purescript-web-storage":"5.0.0","purescript-exceptions":"6.0.0","purescript-newtype":"5.0.0","purescript-effect":"4.0.0","purescript-ordered-collections":"3.0.0","purescript-undefined-is-not-a-problem":"1.0.0","purescript-control":"6.0.0","purescript-console":"6.0.0","purescript-either":"6.1.0","purescript-profunctor":"6.0.0","purescript-media-types":"6.0.0","purescript-web-events":"4.0.0","purescript-arrays":"7.0.0","purescript-maybe":"6.0.0","purescript-type-equality":"4.0.1","purescript-exists":"6.0.0","purescript-distributive":"6.0.0","purescript-unfoldable":"6.0.0","purescript-invariant":"6.0.0","purescript-web-html":"4.0.0","purescript-argonaut-core":"7.0.0","purescript-lazy":"6.0.0","purescript-foreign-object":"4.0.0","purescript-aff":"7.0.0","purescript-foldable-traversable":"6.0.0","purescript-debug":"6.0.0","purescript-tailrec":"6.1.0","purescript-gen":"4.0.0","purescript-typelevel-prelude":"7.0.0","purescript-functors":"5.0.0","purescript-prelude":"6.0.0","purescript-st":"6.0.0","purescript-bifunctors":"6.0.0","purescript-nonempty":"7.0.0","purescript-contravariant":"6.0.0","purescript-assert":"6.0.0","purescript-unsafe-coerce":"6.0.0","purescript-refs":"6.0.0","purescript-integers":"6.0.0","purescript-orders":"6.0.0","purescript-const":"6.0.0","purescript-transformers":"6.0.0","purescript-numbers":"9.0.0","purescript-js-date":"8.0.0","purescript-enums":"6.0.0","purescript-psci-support":"6.0.0","purescript-web-file":"4.0.0","purescript-web-dom":"6.0.0","purescript-random":"6.0.0","purescript-parallel":"6.0.0","purescript-tuples":"7.0.0","purescript-partial":"4.0.0","purescript-strings":"6.0.0","purescript-identity":"6.0.0","purescript-foreign":"7.0.0","purescript-safe-coerce":"2.0.0","purescript-lists":"7.0.0","purescript-nullable":"6.0.0","purescript-datetime":"6.0.0","purescript-functions":"6.0.0"},"version":"0.8.1","github":["collegevine","purescript-elmish"],"versionTag":"v0.8.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Web.DOM.NodeList":"purescript-web-dom","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Web.HTML.HTMLDataListElement":"purescript-web-html","Control.Monad.Trans.Class":"purescript-transformers","Web.HTML.HTMLTextAreaElement":"purescript-web-html","Data.Functor.Product":"purescript-functors","Type.Function":"purescript-typelevel-prelude","Data.Functor.Flip":"purescript-functors","Foreign.Keys":"purescript-foreign","Data.NonEmpty":"purescript-nonempty","Web.HTML.HTMLMediaElement.CanPlayType":"purescript-web-html","Data.Undefined.NoProblem.Closed":"purescript-undefined-is-not-a-problem","Effect.Uncurried":"purescript-effect","Web.DOM.ChildNode":"purescript-web-dom","Control.Monad.Identity.Trans":"purescript-transformers","Data.Char.Gen":"purescript-strings","Web.HTML.Event.DataTransfer.DataTransferItem":"purescript-web-html","Web.HTML.HTMLHRElement":"purescript-web-html","Web.DOM.NonDocumentTypeChildNode":"purescript-web-dom","Data.Monoid.Generic":"purescript-prelude","Data.String.NonEmpty":"purescript-strings","Web.File.FileReader.ReadyState":"purescript-web-file","Effect":"purescript-effect","Web.HTML.HTMLLegendElement":"purescript-web-html","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Web.HTML.Event.HashChangeEvent":"purescript-web-html","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Costar":"purescript-functors","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Functor.Compose":"purescript-functors","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Web.HTML.Event.BeforeUnloadEvent":"purescript-web-html","Web.DOM.MutationObserver":"purescript-web-dom","Web.HTML.HTMLHyperlinkElementUtils":"purescript-web-html","Data.DateTime":"purescript-datetime","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Web.HTML.History":"purescript-web-html","Control.Monad.Gen":"purescript-gen","Data.Bounded.Generic":"purescript-prelude","Data.Date":"purescript-datetime","Data.Argonaut.Parser":"purescript-argonaut-core","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Web.HTML.Event.PopStateEvent.EventTypes":"purescript-web-html","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Web.DOM.ParentNode":"purescript-web-dom","Web.HTML.Event.DragEvent.EventTypes":"purescript-web-html","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Web.HTML.HTMLSpanElement":"purescript-web-html","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-prelude","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.Enum.Generic":"purescript-enums","Data.DateTime.Gen":"purescript-datetime","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Web.HTML.HTMLOptionElement":"purescript-web-html","Data.Int":"purescript-integers","Web.DOM.HTMLCollection":"purescript-web-dom","Data.Profunctor.Cochoice":"purescript-profunctor","Web.HTML.Event.TrackEvent.EventTypes":"purescript-web-html","Data.Show":"purescript-prelude","Web.HTML.HTMLDivElement":"purescript-web-html","Control.Monad.Writer.Trans":"purescript-transformers","Web.File.FileReader":"purescript-web-file","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Number":"purescript-numbers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Web.HTML.HTMLKeygenElement":"purescript-web-html","Data.List.Internal":"purescript-lists","Control.Monad":"purescript-prelude","Web.HTML.Event.EventTypes":"purescript-web-html","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Web.HTML.Common":"purescript-web-html","Control.Monad.List.Trans":"purescript-transformers","Data.Ord.Generic":"purescript-prelude","Web.HTML.HTMLLabelElement":"purescript-web-html","Web.HTML.HTMLAudioElement":"purescript-web-html","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Web.HTML.HTMLFormElement":"purescript-web-html","Data.Profunctor.Split":"purescript-profunctor","Web.DOM.Element":"purescript-web-dom","Data.Number.Format":"purescript-numbers","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Web.HTML.HTMLMediaElement.ReadyState":"purescript-web-html","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Data.Time.Component.Gen":"purescript-datetime","Web.HTML.HTMLTableElement":"purescript-web-html","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Web.HTML.HTMLLIElement":"purescript-web-html","Data.Ring.Generic":"purescript-prelude","Web.HTML.HTMLMetaElement":"purescript-web-html","Web.HTML.HTMLOListElement":"purescript-web-html","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Web.HTML.Event.DragEvent":"purescript-web-html","Control.Monad.Reader":"purescript-transformers","Web.HTML.HTMLHtmlElement":"purescript-web-html","Data.Const":"purescript-const","Web.HTML.Event.PopStateEvent":"purescript-web-html","Web.Event.CustomEvent":"purescript-web-events","Web.HTML.Event.ErrorEvent":"purescript-web-html","Control.Comonad.Traced.Trans":"purescript-transformers","Web.DOM.Text":"purescript-web-dom","Web.HTML.HTMLObjectElement":"purescript-web-html","Web.HTML.HTMLSourceElement":"purescript-web-html","Data.Ord.Down":"purescript-orders","Data.Number.Approximate":"purescript-numbers","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Web.DOM.NodeType":"purescript-web-dom","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Functor.Clown":"purescript-functors","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Foreign.Index":"purescript-foreign","Control.Alternative":"purescript-control","Web.HTML.HTMLSelectElement":"purescript-web-html","Data.Semiring":"purescript-prelude","Data.Functor.Product2":"purescript-functors","Web.HTML.HTMLCanvasElement":"purescript-web-html","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Web.HTML.HTMLTableDataCellElement":"purescript-web-html","Web.HTML.HTMLTableCaptionElement":"purescript-web-html","Data.Functor.App":"purescript-functors","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Web.HTML.HTMLTemplateElement":"purescript-web-html","Web.HTML.SelectionMode":"purescript-web-html","Type.RowList":"purescript-typelevel-prelude","Web.HTML.HTMLTitleElement":"purescript-web-html","Web.HTML.Event.PageTransitionEvent.EventTypes":"purescript-web-html","Web.HTML.HTMLTableCellElement":"purescript-web-html","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Web.HTML.HTMLUListElement":"purescript-web-html","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Web.HTML.HTMLParamElement":"purescript-web-html","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Web.HTML.HTMLTableSectionElement":"purescript-web-html","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Web.HTML.HTMLImageElement.CORSMode":"purescript-web-html","Web.Event.EventTarget":"purescript-web-events","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Debug":"purescript-debug","Web.HTML.HTMLOutputElement":"purescript-web-html","Web.DOM.DocumentType":"purescript-web-dom","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Web.HTML.HTMLQuoteElement":"purescript-web-html","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Set":"purescript-ordered-collections","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Web.DOM.Internal.Types":"purescript-web-dom","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Web.HTML.Event.DataTransfer":"purescript-web-html","Data.EuclideanRing":"purescript-prelude","Web.HTML.Event.TrackEvent":"purescript-web-html","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Web.HTML.HTMLVideoElement":"purescript-web-html","Web.HTML.HTMLAnchorElement":"purescript-web-html","Control.Comonad.Traced":"purescript-transformers","Web.DOM.CharacterData":"purescript-web-dom","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Web.HTML.HTMLDocument":"purescript-web-html","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Web.HTML.Event.PageTransitionEvent":"purescript-web-html","Control.Comonad.Env.Class":"purescript-transformers","Web.Event.EventPhase":"purescript-web-events","Web.HTML.HTMLOptGroupElement":"purescript-web-html","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Web.HTML.HTMLIFrameElement":"purescript-web-html","Data.Either.Nested":"purescript-either","Web.HTML.Navigator":"purescript-web-html","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Web.File.FileList":"purescript-web-file","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-prelude","Data.MediaType":"purescript-media-types","Data.Undefined.NoProblem.Open":"purescript-undefined-is-not-a-problem","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Web.HTML.HTMLMapElement":"purescript-web-html","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Web.HTML.HTMLImageElement.Laziness":"purescript-web-html","Web.DOM.MutationRecord":"purescript-web-dom","Data.Void":"purescript-prelude","Web.HTML.HTMLMediaElement":"purescript-web-html","Web.HTML.HTMLTableRowElement":"purescript-web-html","Data.DateTime.Instant":"purescript-datetime","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Web.HTML.HTMLImageElement.DecodingHint":"purescript-web-html","Web.HTML.HTMLEmbedElement":"purescript-web-html","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Web.File.Url":"purescript-web-file","Web.HTML.HTMLDocument.ReadyState":"purescript-web-html","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Web.HTML.HTMLMediaElement.NetworkState":"purescript-web-html","Web.DOM.Comment":"purescript-web-dom","Web.File.Blob":"purescript-web-file","Data.Eq.Generic":"purescript-prelude","Web.HTML.HTMLMeterElement":"purescript-web-html","Web.DOM.ProcessingInstruction":"purescript-web-dom","Data.DivisionRing":"purescript-prelude","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Web.HTML.HTMLParagraphElement":"purescript-web-html","Web.DOM":"purescript-web-dom","Data.List.Lazy.NonEmpty":"purescript-lists","Web.HTML.HTMLButtonElement":"purescript-web-html","Data.Ordering":"purescript-prelude","Web.HTML.HTMLModElement":"purescript-web-html","Data.Functor.Coproduct":"purescript-functors","Web.Event.Event":"purescript-web-events","Web.HTML.HTMLDListElement":"purescript-web-html","Control.Monad.Cont.Class":"purescript-transformers","Web.File.File":"purescript-web-file","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Web.HTML.Location":"purescript-web-html","Web.HTML.ValidityState":"purescript-web-html","Data.Undefined.NoProblem":"purescript-undefined-is-not-a-problem","Web.HTML.HTMLTableColElement":"purescript-web-html","Data.Set.NonEmpty":"purescript-ordered-collections","Web.Storage.Storage":"purescript-web-storage","Control.Comonad.Trans.Class":"purescript-transformers","Web.HTML.HTMLInputElement":"purescript-web-html","Data.String":"purescript-strings","Data.Reflectable":"purescript-prelude","Control.Plus":"purescript-control","Web.HTML.HTMLTimeElement":"purescript-web-html","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.JSDate":"purescript-js-date","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Web.HTML":"purescript-web-html","Web.HTML.HTMLProgressElement":"purescript-web-html","Web.HTML.HTMLTrackElement.ReadyState":"purescript-web-html","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Web.DOM.NonElementParentNode":"purescript-web-dom","Web.HTML.HTMLBaseElement":"purescript-web-html","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Web.DOM.Node":"purescript-web-dom","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Functor.Joker":"purescript-functors","Type.Data.Symbol":"purescript-typelevel-prelude","Web.Storage.Event.StorageEvent":"purescript-web-storage","Web.HTML.HTMLElement":"purescript-web-html","Data.Array.ST":"purescript-arrays","Web.Event.Internal.Types":"purescript-web-events","Foreign":"purescript-foreign","Control.Monad.Error.Class":"purescript-transformers","Data.Argonaut.Core":"purescript-argonaut-core","Web.DOM.ShadowRoot":"purescript-web-dom","Control.Semigroupoid":"purescript-prelude","Web.Internal.FFI":"purescript-web-events","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-prelude","Web.HTML.HTMLFieldSetElement":"purescript-web-html","Web.HTML.HTMLLinkElement":"purescript-web-html","Web.HTML.Event.HashChangeEvent.EventTypes":"purescript-web-html","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Web.HTML.HTMLBRElement":"purescript-web-html","Web.HTML.HTMLHeadingElement":"purescript-web-html","Web.HTML.HTMLHeadElement":"purescript-web-html","Web.HTML.HTMLDataElement":"purescript-web-html","Web.HTML.HTMLBodyElement":"purescript-web-html","Data.Bifoldable":"purescript-foldable-traversable","Web.HTML.Event.BeforeUnloadEvent.EventTypes":"purescript-web-html","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Web.HTML.Window":"purescript-web-html","Data.Semiring.Generic":"purescript-prelude","Web.HTML.HTMLTableHeaderCellElement":"purescript-web-html","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Web.HTML.HTMLImageElement":"purescript-web-html","Data.Op":"purescript-contravariant","Web.HTML.HTMLPreElement":"purescript-web-html","Web.HTML.HTMLScriptElement":"purescript-web-html","Record.Unsafe":"purescript-prelude","Data.MediaType.Common":"purescript-media-types","Web.DOM.DocumentFragment":"purescript-web-dom","Control.Monad.Writer":"purescript-transformers","Web.DOM.DOMTokenList":"purescript-web-dom","Web.HTML.HTMLAreaElement":"purescript-web-html","Web.DOM.Document":"purescript-web-dom","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Profunctor.Choice":"purescript-profunctor","Data.Time.Gen":"purescript-datetime","Web.HTML.HTMLTrackElement":"purescript-web-html","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings","Web.HTML.HTMLStyleElement":"purescript-web-html"},"compilerVersion":"0.15.2"}