{"uploader":"fsoikin","packageMeta":{"repository":{"url":"https://github.com/collegevine/purescript-elmish.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-console":"^v4.4.0","purescript-either":"^v4.1.1","purescript-maybe":"^v4.0.1","purescript-web-html":"^v2.3.0","purescript-argonaut-core":"^v5.1.0","purescript-foreign-object":"^v2.0.3","purescript-aff":"^v5.1.2","purescript-debug":"^v4.0.1","purescript-typelevel-prelude":"^v5.0.2","purescript-prelude":"^v4.1.1","purescript-record":"^v2.0.2","purescript-tuples":"^v5.1.0","purescript-functions":"^v4.0.0"},"name":"purescript-elmish","license":["MIT"]},"tagTime":"2020-12-23T23:08:11+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Elmish","Boot"]},"declarations":[{"children":[],"comments":"Boot record for a UI component. See comments for this module.\n","title":"BootRecord","info":{"arguments":[["props",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["mount",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"RCons","contents":["renderToString",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"RCons","contents":["hydrate",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[89,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[101,4]}},{"children":[],"comments":"Creates a boot record for the given component. See comments for this module.\n","title":"boot","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Boot"],"BootRecord"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},null]},null]},null]}},"sourceSpan":{"start":[105,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[105,95]}}]},{"moduleName":{"package":null,"item":["Elmish","Component"]},"declarations":[{"children":[{"comments":null,"title":"Transition","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"state"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"trBifunctor","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[68,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[69,94]}},{"comments":null,"title":"trFunctor","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[70,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[71,54]}},{"comments":null,"title":"trApply","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[73,88]}},{"comments":null,"title":"trApplicative","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[74,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[75,29]}},{"comments":null,"title":"trBind","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[76,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[79,41]}}],"comments":"A UI component state transition: wraps the new state value together with a\n(possibly empty) list of effects that the transition has caused (called\n\"commands\"), with each command possibly producing some new messages.\n\nInstances of this type may be created either by using the smart constructor:\n\n    update :: State -> Message -> Transition Aff Message State\n    update state m = transition state [someCommand]\n\nor in monadic style (see comments on `fork` for more on this):\n\n    update :: State -> Message -> Transition Aff Message State\n    update state m = do\n        s1 <- Child1.update state.child1 Child1.SomeMessage # lmap Child1Msg\n        s2 <- Child2.modifyFoo state.child2 # lmap Child2Msg\n        fork someEffect\n        pure state { child1 = s1, child2 = s2 }\n\nor, for simple sub-component delegation, the `BiFunctor` instance may be\nused:\n\n    update :: State -> Message -> Transition Aff Message State\n    update state (ChildMsg m) =\n        Child.update state.child m\n        # bimap ChildMsg (state { child = _ })\n\n","title":"Transition","info":{"declType":"data","dataDeclType":"data","typeArguments":[["m",null],["msg",null],["state",null]]},"sourceSpan":{"start":[61,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[61,71]}},{"children":[],"comments":"Definition of a component according to The Elm Architecture. Consists of\nthree functions - init, view, update, - that together describe the\nlifecycle of a component.\n\nType parameters:\n\n  * `m` - a monad in which the effects produced by `update` and `init` functions run.\n  * `msg` - component's message.\n  * `state` - component's state.\n","title":"ComponentDef","info":{"arguments":[["m",null],["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["init",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"RCons","contents":["view",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},{"annotation":[],"tag":"RCons","contents":["update",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[179,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[183,2]}},{"children":[],"comments":"Wraps the given component, intercepts its update cycle, and traces (i.e.\nprints to dev console) every command and every state value (as JSON\nobjects).\n","title":"withTrace","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[225,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[228,32]}},{"children":[],"comments":"Smart constructor for the `Transition` type. See comments there. This\nfunction takes the new (i.e. update) state and an array of commands - i.e.\neffects producing messages - and constructs a `Transition` out of them\n","title":"transition","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[84,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[84,110]}},{"children":[],"comments":"Map a function over the second type arguments of a `Bifunctor`.\n","title":"rmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[26,66]}},{"children":[],"comments":"Creates a `Transition` without any commands.\nThis function will be deprecated soon in favor of `pure`.\n","title":"pureUpdate","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},null]},null]},null]}},"sourceSpan":{"start":[219,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[219,66]}},{"children":[],"comments":"Monad transformation applied to `ComponentDef`\n","title":"nat","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"n"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[292,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[295,32]}},{"children":[],"comments":"Map a function over the first type argument of a `Bifunctor`.\n","title":"lmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[22,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[22,66]}},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\nparameter is a function that takes a message-dispatching callback. This\nstructure allows the command to produce zero or multiple messages, unlike\n`fork`, whose callback has to produce exactly one.\n\nExample:\n\n    update :: State -> Message -> Transition Aff Message State\n    update state msg = do\n        forks countTo10\n        pure state\n\n    countTo10 :: Command Aff Message\n    countTo10 msgSink =\n        for_ (1..10) \\n ->\n            delay $ Milliseconds 1000.0\n            msgSink $ Count n\n\n","title":"forks","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[155,74]}},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect doesn't produce any messages, it's a fire-and-forget sort of effect.\n","title":"forkVoid","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[160,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[160,66]}},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect may or may not produce a message, as modeled by returning `Maybe`.\n","title":"forkMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[165,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[165,95]}},{"children":[],"comments":"Creates a `Transition` that contains the given command (i.e. a\nmessage-producing effect). This is intended to be used for \"accumulating\"\neffects while constructing a transition in imperative-ish style. When used\nas an action inside a `do`, this function will have the effect of \"adding\nthe command to the list\" to be executed. The name `fork` reflects the fact\nthat the given effect will be executed asynchronously, after the `update`\nfunction returns.\n\nIn more precise terms, the following:\n\n    trs :: Transition m Message State\n    trs = do\n        fork f\n        fork g\n        pure s\n\nIs equivalent to this:\n\n    trs :: Transition m Message State\n    trs = Transition s [f, g]\n\nAt first glance it may seem that it's shorter to just call the `Transition`\nconstructor, but monadic style comes in handy for composing the update out\nof smaller pieces. Here's a more full example:\n\n    data Message = Nop | ButtonClicked | OnNewItem String\n\n    update :: State -> Message -> Transition Aff Message State\n    update state Nop =\n        pure state\n    update state ButtonClick = do\n        fork $ insertItem \"new list\"\n        incButtonClickCount state\n\n    insertItem :: Aff Message\n    insertItem name = do\n        delay $ Milliseconds 1000\n        pure $ OnNewItem name\n\n    incButtonClickCount :: Transition Aff Message State\n    incButtonClickCount state = do\n        fork $ trackingEvent \"Button click\" *> pure Nop\n        pure $ state { buttonsClicked = state.buttonsClicked + 1 }\n\n","title":"fork","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[134,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[134,82]}},{"children":[],"comments":"Given a ComponentDef, binds that def to a freshly created React class,\ninstantiates that class, and returns a rendering function. Note that the\nreturn type of this function is almost the same as that of\n`ComponentDef::view` - except for state. This is not a coincidence: it is\ndone this way on purpose, so that the result of this call can be used to\nconstruct another `ComponentDef`.\n\nUnlike `wrapWithLocalState`, this function uses the bullet-proof strategy\nof storing the component state in a dedicated mutable cell, but that\nhappens at the expense of being effectful.\n","title":"construct","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}}]}]},null]},null]}},"sourceSpan":{"start":[283,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[285,51]}},{"children":[],"comments":null,"title":"bimap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[null,"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[19,3],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[19,66]}},{"children":[],"comments":"A nested `map` - useful for mapping over commands in an array: first `map`\nmaps over the array, second `map` maps over the monad `m`.\n\nExample:\n\n     let (Transition subS cmds) = SubComponent.update s.subComponent msg\n     in Transition (s { subComponent = subS }) (SubComponentMsg <$$> cmds)\n","title":"(<$$>)","info":{"declType":"alias","alias":[["Elmish","Component"],{"Right":{"Left":{"Ident":"mapCmds"}}}],"fixity":{"associativity":"infix","precedence":8}},"sourceSpan":{"start":[213,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[213,24]}}]},{"moduleName":{"package":null,"item":["Elmish","Dispatch"]},"declarations":[{"children":[{"comments":null,"title":"DispatchMsgFn","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchError"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"contravariantDispatch","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]}]}},"sourceSpan":{"start":[36,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[37,74]}}],"comments":"Represents a function that a view can use to report both errors and\nmessages originating from JS/DOM. Underneath it's just a function that\ntakes an `Either`, but it is wrapped in a newtype in order to provide class\ninstances for it.\n","title":"DispatchMsgFn","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["msg",null]]},"sourceSpan":{"start":[34,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[34,84]}},{"children":[],"comments":null,"title":"DispatchMsg","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[28,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[28,31]}},{"children":[],"comments":null,"title":"DispatchError","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}},"sourceSpan":{"start":[69,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[69,28]}},{"children":[],"comments":"A version of `handle` (see comments there) with a possibility of not\nproducing a message.\n","title":"handleMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["effFn",{"annotation":[],"tag":"ForAll","contents":["fn",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","Dispatch"],"MkEventHandler"],"constraintArgs":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}},{"annotation":[],"tag":"TypeVar","contents":"fn"},{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"effFn"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[116,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[121,24]}},{"children":[],"comments":"Creates a `JsCallback` that uses the given `DispatchMsgFn` to either issue\na message or report an error. The `fn` parameter is either a message or a\nfunction that produces a message. When the JS code calls the resulting\n`JsCallback`, its parameters are validated, then the `fn` function is\ncalled to produce a message, which is then reported via the given\n`DispatchMsgFn`, unless the parameters passed from JS cannot be decoded, in\nwhich case an error is reported via `DispatchMsgFn`.\n\nExample of intended usage:\n\n     -- PureScript\n     data Message = A | B Int | C String Boolean\n\n     view state dispatch = createElement' viewCtor_\n         { foo: \"bar\"\n         , onA: handle dispatch A\n         , onB: handle dispatch B\n         , onC: handle dispatch C\n         , onBaz: handle dispatch \\x y -> B (x+y)\n         }\n\n     // JSX:\n     export const viewCtor_ = args =>\n         <div>\n             Foo is {args.bar}<br />\n             <button onClick={args.onA}>A</button>\n             <button onClick={() => args.onB(42)}>B</button>\n             <button onClick={() => args.onC(\"hello\", true)}>C</button>\n             <button onClick={() => args.onBaz(21, 21)}>Baz</button>\n         </div>\n\n","title":"handle","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["effFn",{"annotation":[],"tag":"ForAll","contents":["fn",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","Dispatch"],"MkEventHandler"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"msg"},{"annotation":[],"tag":"TypeVar","contents":"fn"},{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"effFn"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[102,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[107,24]}},{"children":[],"comments":null,"title":"(>$<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmap"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[17,1],"name":"bower_components\\purescript-contravariant\\src\\Data\\Functor\\Contravariant.purs","end":[17,21]}},{"children":[],"comments":null,"title":"(>#<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmapFlipped"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[23,1],"name":"bower_components\\purescript-contravariant\\src\\Data\\Functor\\Contravariant.purs","end":[23,28]}}]},{"moduleName":{"package":null,"item":["Elmish","JsCallback"]},"declarations":[{"children":[],"comments":"A parameterless `JsCallback`\n","title":"JsCallback0","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}}]}},"sourceSpan":{"start":[31,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[31,44]}},{"children":[{"comments":null,"title":"jsCbToJs","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"fn"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]}]}},"sourceSpan":{"start":[28,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[28,76]}}],"comments":"This type represents a function that has been wrapped in a way suitable for\npassing to JavaScript (including parameter validation). The primary use\ncase for such callbacks is to pass them to JSX code for receiving\nDOM-generated events and turning them into UI messages. See `MkJsCallback`\nfor more info and examples.\n","title":"JsCallback","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["fn",null]]},"sourceSpan":{"start":[27,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[27,43]}},{"children":[],"comments":"Wraps a given effect `fn` (possibly with parameters) as a JS non-curried\nfunction with parameter type validation, making it suitable for passing to\nunsafe JS code.\n\nThis function should not (or at least rarely) be used directly. In normal\nscenarios, `Elmish.Dispatch.handle` should be used instead.\n\nExample:\n\n      -- PureScript:\n      createElement' theView_\n          { onSave: jsCallback $ Console.log \"Save\"\n          , onCancel: jsCallback $ Console.log \"Cancel\"\n          , onFoo: jsCallback \\(bar::String) (baz::Int) ->\n              Console.log $ \"bar = \" <> bar <> \", baz = \" <> show baz\n          }\n\n     // JSX:\n     export const TheView = props =>\n       <div>\n         <button onClick={props.onSave}>Save</button>\n         <button onClick={props.onCancel}>Cancel</button>\n         <button onClick={() => props.onFoo(\"bar\", 42)}>Foo</button>\n       </div>\n\nIn this example, the parameters `bar` and `baz` will undergo validation at\nruntime to make sure they are indeed a `String` and an `Int` respectively,\nand an error will be issued if validation fails.\n\n","title":"jsCallback","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["fn",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"fn"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]}]}]},null]}},"sourceSpan":{"start":[81,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[84,21]}}]},{"moduleName":{"package":null,"item":["Elmish","React"]},"declarations":[{"children":[{"comments":null,"title":"reactChildrenArray","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[117,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[118,31]}},{"comments":null,"title":"reactChildrenSingle","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[123,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[124,30]}},{"comments":null,"title":"tojsReactElement","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[145,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[145,62]}}],"comments":"Instantiated subtree of React DOM. JSX syntax produces values of this type.\n","title":"ReactElement","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[29,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[29,41]}},{"children":[],"comments":"This type represents constructor of a React component with a particular\nbehavior. The type prameter is the record of props (in React lingo) that\nthis component expects. Such constructors can be \"rendered\" into\n`ReactElement` via `createElement`.\n","title":"ReactComponent","info":{"kind":{"annotation":[],"tag":"FunKind","contents":[{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[35,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[35,51]}},{"children":[],"comments":"Variant of `createElement` for creating an element without children.\n","title":"createElement'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]},null]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[76,20]}},{"children":[],"comments":"The PureScript import of the React’s `createElement` function. Takes a\ncomponent constructor, a record of props, some children, and returns a\nReact DOM element.\n\nTo represent HTML `data-` attributes, `createElement` supports the\n`_data :: Object` prop.\n\n**Example**\n\n```purescript\nimport Elmish.HTML as H\nimport Foreign.Object as FO\n\nH.div\n  { _data: FO.fromHomogenous { toggle: \"buttons } }\n  [...]\n```\n\nrepresents the `<div data-toggle=\"buttons\">` DOM element.\n\n","title":"createElement","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["content",{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"content"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"content"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[61,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[67,20]}}]},{"moduleName":{"package":null,"item":["Elmish","Ref"]},"declarations":[{"children":[{"comments":null,"title":"readjsRef","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[66,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[70,33]}},{"comments":null,"title":"writejsRef","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[72,73]}}],"comments":"An opaque reference for tunneling through JSX code.\n\nThis type is a wrapper that lets us pass any PureScript values into JSX\ncode, with the expectation that the JSX code cannot mess with (inspect,\nmutate) these values, but can pass them back to the PureScript code in\nmessages. This type has instances of `CanPassToJavaScript` and\n`CanReceiveFromJavaScript`, which allows it to be passed in React props or\nview messages.\n\nOne challenge with this type is that we can't just `unsafeCoerce` its\nvalues back and forth, because that would open a very big hole for data\ncorruption to get in. To have some protection against it, we add a weak\nform of verification: internally values of `Ref` are represented by a\nJavaScript hash with a sole key looking like \"ref:name\", whose value is the\ntarget of the ref, and where \"name\" is the first type argument of this\n`Ref`. This way, we have at least _something_ to verify (see the\n`CanReceiveFromJavaScript` instance below) that the object passed by the\nJSX code is not some random value, but actually originated as a `Ref a` of\nthe right type.\n\nAdmittedly, this is only weak protection, because the JSX code can still,\nif it really wanted to, construct a hash like `{ \"ref:name\": \"abracadabra\"}`\nand pass it to the PureScript code, which would happily\naccept the \"abracadabra\" value as if it was the right type.\n\nHere are my arguments for why this weak protection is enough:\n  1) The JSX code has to actually _try_ to be destructive. Can't happen by\n     accident.\n  2) It's technically impossible to do any better without putting\n     significant restrictions on the type `a` (i.e. requiring it to be\n     `Generic` or to provide type name, etc.), and without losing some\n     performance.\n  3) If such corruption proves to be a problem in the future, we can always\n     fall back to encoding/decoding `Json`, and pay some performance for it.\n\n","title":"Ref","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["name",{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Symbol"]}],["a",null]]},"sourceSpan":{"start":[48,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[48,50]}},{"children":[],"comments":"Creates an instance of `Ref`. See comments on it above.\n","title":"ref","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["name",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[51,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[51,50]}},{"children":[],"comments":"Deconstructs an instance of `Ref`. See comments on it above.\n","title":"deref","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["name",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[55,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[55,52]}}]}],"name":"Elmish","comments":null,"declarations":[]},{"reExports":[],"name":"Elmish.Boot","comments":"Support for the most common case entry point - i.e. mounting an Elmish\ncomponent (i.e. `ComponentDef` structure) to an HTML DOM element with a\nknown ID, with support for server-side rendering.\n\nThe function `boot` returns what we call `BootRecord` - a record of three\nfunctions:\n\n    * `mount` -\n       takes HTML element ID and props¹, creates an instance of\n       the component, and mounts it to the HTML element in question\n    * `hydrate` -\n       same as `mount`, but expects the HTML element to already\n       contain pre-rendered HTML inside. See React docs for more\n       on server-side rendering: https://reactjs.org/docs/react-dom.html#hydrate\n    * `renderToString` -\n       meant to be called on the server (e.g. by running the code\n       under NodeJS) to perform the server-side render. Takes props¹\n       and returns a `String` containing the resulting HTML.\n\nThe idea is that the PureScript code would export such `BootRecord` for\nconsumption by bootstrap JavaScript code in the page and/or server-side\nNodeJS code (which could be written in PureScript or not). For \"plain React\"\nscenario, the JavaScript code in the page would just call `mount`. For\n\"server-side rendering\", the server would first call `renderToString` and\nserve the HTML to the client, and then the client-side JavaScript code\nwould call `hydrate`.\n\n-------------------------------------------------------------------------\n ¹ \"props\" here is a parameter used to instantiate the component (see\n example below). It is recommended that this parameter is a JavaScript\n record (hence the name \"props\"), because it would likely need to be\n supplied by some bootstrap JavaScript code.\n-------------------------------------------------------------------------\n\nExample:\n\n    -- PureScript:\n    module Foo(bootRecord) where\n\n    type Props = { hello :: String, world :: Int }\n\n    component :: Props -> ComponentDef Aff Message State\n    component = ...\n\n    bootRecord :: BootRecord Props\n    bootRecord = boot component\n\n\n    // Server-side JavaScript NodeJS code\n    const foo = require('output/Foo/index.js')\n    const fooHtml = foo.bootRecord.renderToString({ hello: \"Hi!\", world: 42 })\n    serveToClient(\"<html><body><div id='foo'>\" + fooHtml + \"</div></body></html>\")\n\n\n    // Client-side HTML + JS:\n    <html>\n       <body>\n         <div id='foo'>\n           ... server-side-rendered HTML goes here\n         </div>\n       </body>\n       <script src=\"foo_bundle.js\" />\n       <script>\n         Foo.bootRecord.hydrate('foo', { hello: \"Hi!\", world: 42 })\n       </script>\n    </html>\n\n","declarations":[{"children":[],"comments":"Boot record for a UI component. See comments for this module.\n","title":"BootRecord","info":{"arguments":[["props",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["mount",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"RCons","contents":["renderToString",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"RCons","contents":["hydrate",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[89,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[101,4]}},{"children":[],"comments":"Creates a boot record for the given component. See comments for this module.\n","title":"boot","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Boot"],"BootRecord"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},null]},null]},null]}},"sourceSpan":{"start":[105,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[105,95]}},{"children":[],"comments":"This function supports the simplest (almost toy?) use case where there is\nno server, no server-side rendering, all that exists is an HTML page that\nloads the JS bundle (compiled from PureScript), and expects the bundle to\nbreath life into the page. For this case, declare your bundle entry point\n(i.e. your `main` function) as a call to `defaultMain`, passing it DOM\nelement ID to bind to and the UI component to bind to it.\n\nExample:\n\n    module Main\n    import MyComponent(def)\n    import Elmish.Boot as Boot\n\n    main :: Effect Unit\n    main = Boot.defaultMain { elementId: \"app\", def: def }\n\n","title":"defaultMain","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["elementId",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"RCons","contents":["def",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"REmpty"}]}]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[148,1],"name":"C:\\w\\elmish\\src\\Elmish\\Boot.purs","end":[148,112]}}]},{"reExports":[{"moduleName":{"package":"purescript-bifunctors","item":["Data","Bifunctor"]},"declarations":[{"children":[],"comments":null,"title":"bimap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[null,"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[19,3],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[19,66]}},{"children":[],"comments":"Map a function over the second type arguments of a `Bifunctor`.\n","title":"rmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[26,66]}},{"children":[],"comments":"Map a function over the first type argument of a `Bifunctor`.\n","title":"lmap","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[22,1],"name":"bower_components\\purescript-bifunctors\\src\\Data\\Bifunctor.purs","end":[22,66]}}]}],"name":"Elmish.Component","comments":null,"declarations":[{"children":[{"comments":null,"title":"Transition","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"state"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"trBifunctor","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[68,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[69,94]}},{"comments":null,"title":"trFunctor","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[70,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[71,54]}},{"comments":null,"title":"trApply","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[73,88]}},{"comments":null,"title":"trApplicative","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[74,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[75,29]}},{"comments":null,"title":"trBind","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}},"sourceSpan":{"start":[76,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[79,41]}}],"comments":"A UI component state transition: wraps the new state value together with a\n(possibly empty) list of effects that the transition has caused (called\n\"commands\"), with each command possibly producing some new messages.\n\nInstances of this type may be created either by using the smart constructor:\n\n    update :: State -> Message -> Transition Aff Message State\n    update state m = transition state [someCommand]\n\nor in monadic style (see comments on `fork` for more on this):\n\n    update :: State -> Message -> Transition Aff Message State\n    update state m = do\n        s1 <- Child1.update state.child1 Child1.SomeMessage # lmap Child1Msg\n        s2 <- Child2.modifyFoo state.child2 # lmap Child2Msg\n        fork someEffect\n        pure state { child1 = s1, child2 = s2 }\n\nor, for simple sub-component delegation, the `BiFunctor` instance may be\nused:\n\n    update :: State -> Message -> Transition Aff Message State\n    update state (ChildMsg m) =\n        Child.update state.child m\n        # bimap ChildMsg (state { child = _ })\n\n","title":"Transition","info":{"declType":"data","dataDeclType":"data","typeArguments":[["m",null],["msg",null],["state",null]]},"sourceSpan":{"start":[61,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[61,71]}},{"children":[],"comments":"An effect that is launched as a result of a component state transition.\nIt's a function that takes a callback that allows it to produce (aka\n\"dispatch\") messages.\n","title":"Command","info":{"arguments":[["m",null],["msg",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[66,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[66,52]}},{"children":[],"comments":"Definition of a component according to The Elm Architecture. Consists of\nthree functions - init, view, update, - that together describe the\nlifecycle of a component.\n\nType parameters:\n\n  * `m` - a monad in which the effects produced by `update` and `init` functions run.\n  * `msg` - component's message.\n  * `state` - component's state.\n","title":"ComponentDef","info":{"arguments":[["m",null],["msg",null],["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["init",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"RCons","contents":["view",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},{"annotation":[],"tag":"RCons","contents":["update",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[179,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[183,2]}},{"children":[],"comments":"A callback used to return multiple components of different types. See below\nfor more a detailed explanation.\n\nThis callback is handy in situations where a function must return different\ncomponents (with different `state` and `message` types) depending on\nparameters. The prime example of such situation is routing.\n\nBecause most routes are served by different UI components, with different\n`state` and `message` type parameters, the instantiating functions cannot\nhave the naive signature `route -> component`: they need to \"return\"\ndifferently-typed results depending on the route. In order to make that\nhappen, these functions instead take a polymorphic callback, to which they\npass the UI component. This type alias is the type of such callback: it\ntakes a polymorphically-typed UI component and returns \"some value\", a la\ncontinuation-passing style.\n\nEven though this type is rather trivial, it is included in the library for\nthe purpose of attaching this documentation to it.\n","title":"ComponentReturnCallback","info":{"arguments":[["m",null],["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[203,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[204,52]}},{"children":[],"comments":"Smart constructor for the `Transition` type. See comments there. This\nfunction takes the new (i.e. update) state and an array of commands - i.e.\neffects producing messages - and constructs a `Transition` out of them\n","title":"transition","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[84,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[84,110]}},{"children":[],"comments":"Creates a `Transition` that contains the given command (i.e. a\nmessage-producing effect). This is intended to be used for \"accumulating\"\neffects while constructing a transition in imperative-ish style. When used\nas an action inside a `do`, this function will have the effect of \"adding\nthe command to the list\" to be executed. The name `fork` reflects the fact\nthat the given effect will be executed asynchronously, after the `update`\nfunction returns.\n\nIn more precise terms, the following:\n\n    trs :: Transition m Message State\n    trs = do\n        fork f\n        fork g\n        pure s\n\nIs equivalent to this:\n\n    trs :: Transition m Message State\n    trs = Transition s [f, g]\n\nAt first glance it may seem that it's shorter to just call the `Transition`\nconstructor, but monadic style comes in handy for composing the update out\nof smaller pieces. Here's a more full example:\n\n    data Message = Nop | ButtonClicked | OnNewItem String\n\n    update :: State -> Message -> Transition Aff Message State\n    update state Nop =\n        pure state\n    update state ButtonClick = do\n        fork $ insertItem \"new list\"\n        incButtonClickCount state\n\n    insertItem :: Aff Message\n    insertItem name = do\n        delay $ Milliseconds 1000\n        pure $ OnNewItem name\n\n    incButtonClickCount :: Transition Aff Message State\n    incButtonClickCount state = do\n        fork $ trackingEvent \"Button click\" *> pure Nop\n        pure $ state { buttonsClicked = state.buttonsClicked + 1 }\n\n","title":"fork","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[134,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[134,82]}},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\nparameter is a function that takes a message-dispatching callback. This\nstructure allows the command to produce zero or multiple messages, unlike\n`fork`, whose callback has to produce exactly one.\n\nExample:\n\n    update :: State -> Message -> Transition Aff Message State\n    update state msg = do\n        forks countTo10\n        pure state\n\n    countTo10 :: Command Aff Message\n    countTo10 msgSink =\n        for_ (1..10) \\n ->\n            delay $ Milliseconds 1000.0\n            msgSink $ Count n\n\n","title":"forks","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Command"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[155,74]}},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect doesn't produce any messages, it's a fire-and-forget sort of effect.\n","title":"forkVoid","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]}},"sourceSpan":{"start":[160,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[160,66]}},{"children":[],"comments":"Similar to `fork` (see comments there for detailed explanation), but the\neffect may or may not produce a message, as modeled by returning `Maybe`.\n","title":"forkMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["message",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"message"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"message"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[165,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[165,95]}},{"children":[],"comments":null,"title":"mapCmds","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["innerMsg",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"innerMsg"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"innerMsg"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[214,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[214,104]}},{"children":[],"comments":"A nested `map` - useful for mapping over commands in an array: first `map`\nmaps over the array, second `map` maps over the monad `m`.\n\nExample:\n\n     let (Transition subS cmds) = SubComponent.update s.subComponent msg\n     in Transition (s { subComponent = subS }) (SubComponentMsg <$$> cmds)\n","title":"(<$$>)","info":{"declType":"alias","alias":[["Elmish","Component"],{"Right":{"Left":{"Ident":"mapCmds"}}}],"fixity":{"associativity":"infix","precedence":8}},"sourceSpan":{"start":[213,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[213,24]}},{"children":[],"comments":"Creates a `Transition` without any commands.\nThis function will be deprecated soon in favor of `pure`.\n","title":"pureUpdate","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"Transition"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},null]},null]},null]}},"sourceSpan":{"start":[219,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[219,66]}},{"children":[],"comments":"Wraps the given component, intercepts its update cycle, and traces (i.e.\nprints to dev console) every command and every state value (as JSON\nobjects).\n","title":"withTrace","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[225,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[228,32]}},{"children":[],"comments":"Monad transformation applied to `ComponentDef`\n","title":"nat","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ForAll","contents":["n",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"n"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[292,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[295,32]}},{"children":[],"comments":"Given a ComponentDef, binds that def to a freshly created React class,\ninstantiates that class, and returns a rendering function. Note that the\nreturn type of this function is almost the same as that of\n`ComponentDef::view` - except for state. This is not a coincidence: it is\ndone this way on purpose, so that the result of this call can be used to\nconstruct another `ComponentDef`.\n\nUnlike `wrapWithLocalState`, this function uses the bullet-proof strategy\nof storing the component state in a dedicated mutable cell, but that\nhappens at the expense of being effectful.\n","title":"construct","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}}]}]},null]},null]}},"sourceSpan":{"start":[283,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[285,51]}},{"children":[],"comments":"Creates a React component that can be bound to a varying ComponentDef,\nreturns a function that performs the binding.\n\nNote 1: this function accepts an `Aff`-based ComponentDef, it cannot take\npolymorphic or custom monad. The superficial reason for this is that this\nfunction is intended to be used at top-level (see explanation below), where\ncontext for a custom monad is not available. A deeper reason is that this\nfunction creates a self-contained React component, and it is precisely\nbecause it is self-contained that it cannot be seamlessly included in an\nouter monadic computation.\n\nThis limitation forces such truly \"reusable\" components to be written in\nterms of `Aff` rather than a custom monad, which is actually a good thing.\nHowever, if it turns out that this component really needs to be in a custom\nmonad, it is always possible to convert it to `Aff` via the `nat` function.\n\nNote 2: in order to accomplish this, such aggregated component will store\nits state using the React facilities - i.e. via `this.setState` and\n`this.state`. While this is appropriate for most cases, it actually has\nproven to be fragile in some specific circumstances (e.g. multiple events\noccurring within the same JS synchronous frame), so it is not recommended\nto use this mechanism for complex components.\n","title":"wrapWithLocalState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["args",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentName"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"args"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"args"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[328,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[332,20]}},{"children":[],"comments":"A more elaborate version of `wrapWithLocalState` that takes a\n`DispatchMsgFn Void` in order to report view-originated errors. In practice\nthis error-reporting turned out to be almost not a concern, and is largely\na vestige of the time we were implementing views as JSX-sidecar files. So\nthe default version no longer has this extra parameter so as to reduce the\nnoise.\n","title":"wrapWithLocalState'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["args",{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentName"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"args"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Component"],"ComponentDef"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"args"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[344,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[349,20]}},{"children":[{"comments":null,"title":"ComponentName","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A unique name for a component created via `wrapWithLocalState`. These names\ndon't technically need to be _completely_ unique, but they do need to be\nunique enough so that two different `wrapWithLocalState`-created components\nthat happen to have the same name never replace each other in the DOM. For\nthis reason, it is recommended to actually make sure these names are\nunique, for example by appending a GUID to them. Read on for a more\ndetailed explanation.\n\nReact uses referential equality to decide whether to create a new instance\nof a component (and thus reset its local state) or keep the existing\ninstance. This means that, on one hand, we cannot use the same React class\nfor every instantiation, because this may create conflicts, where one\nElmish component replaces another in the DOM, but they look like the same\ncomponent to React, which makes it reuse state, which leads to chaos. On\nthe other hand, we cannot create a fresh class on every render, because\nthen React will see it as a new component every time, and will reset its\nstate every time.\n\nThis means that we need some way of figuring out whether it needs to be\nlogically \"same\" component or \"different\", but there is no way to get that\n\"for free\" (same way React gets it for free from referential equality) due\nto PureScript's purity. Therefore, the only reliable way is to ask the\nprogrammer, which is accomplished by requiring a `ComponentName`, which\nserves as a key.\n","title":"ComponentName","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[378,1],"name":"C:\\w\\elmish\\src\\Elmish\\Component.purs","end":[378,45]}}]},{"reExports":[{"moduleName":{"package":"purescript-contravariant","item":["Data","Functor","Contravariant"]},"declarations":[{"children":[],"comments":null,"title":"(>$<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmap"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[17,1],"name":"bower_components\\purescript-contravariant\\src\\Data\\Functor\\Contravariant.purs","end":[17,21]}},{"children":[],"comments":null,"title":"(>#<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmapFlipped"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[23,1],"name":"bower_components\\purescript-contravariant\\src\\Data\\Functor\\Contravariant.purs","end":[23,28]}}]}],"name":"Elmish.Dispatch","comments":null,"declarations":[{"children":[{"comments":null,"title":"DispatchMsgFn","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchError"]}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"contravariantDispatch","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]}]}},"sourceSpan":{"start":[36,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[37,74]}}],"comments":"Represents a function that a view can use to report both errors and\nmessages originating from JS/DOM. Underneath it's just a function that\ntakes an `Either`, but it is wrapped in a newtype in order to provide class\ninstances for it.\n","title":"DispatchMsgFn","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["msg",null]]},"sourceSpan":{"start":[34,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[34,84]}},{"children":[],"comments":null,"title":"DispatchMsg","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[28,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[28,31]}},{"children":[],"comments":null,"title":"DispatchError","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}},"sourceSpan":{"start":[69,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[69,28]}},{"children":[],"comments":"Construct a `DispatchMsgFn` out of \"on error\" and \"on message\" handlers\n","title":"dispatchMsgFn","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchError"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[40,105]}},{"children":[],"comments":"Report an error via the given dispatch function\n","title":"issueError","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchError"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[44,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[44,76]}},{"children":[],"comments":"Issue a message via the given dispatch function\n","title":"issueMsg","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[48,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[48,64]}},{"children":[],"comments":"Creates a new `DispatchMsgFn` that relays errors from the given\n`DispatchMsgFn`, but throws away messages\n","title":"ignoreMsg","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg2",{"annotation":[],"tag":"ForAll","contents":["msg1",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg1"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg2"}]}]},null]},null]}},"sourceSpan":{"start":[53,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[53,72]}},{"children":[],"comments":"Allows to optionally convert the message to another type, swallowing the\nmessage when conversion fails.\n","title":"cmapMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["msg2",{"annotation":[],"tag":"ForAll","contents":["msg1",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg2"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"msg1"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg1"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg2"}]}]}]},null]},null]}},"sourceSpan":{"start":[58,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[61,26]}},{"children":[],"comments":"Creates a `JsCallback` that uses the given `DispatchMsgFn` to either issue\na message or report an error. The `fn` parameter is either a message or a\nfunction that produces a message. When the JS code calls the resulting\n`JsCallback`, its parameters are validated, then the `fn` function is\ncalled to produce a message, which is then reported via the given\n`DispatchMsgFn`, unless the parameters passed from JS cannot be decoded, in\nwhich case an error is reported via `DispatchMsgFn`.\n\nExample of intended usage:\n\n     -- PureScript\n     data Message = A | B Int | C String Boolean\n\n     view state dispatch = createElement' viewCtor_\n         { foo: \"bar\"\n         , onA: handle dispatch A\n         , onB: handle dispatch B\n         , onC: handle dispatch C\n         , onBaz: handle dispatch \\x y -> B (x+y)\n         }\n\n     // JSX:\n     export const viewCtor_ = args =>\n         <div>\n             Foo is {args.bar}<br />\n             <button onClick={args.onA}>A</button>\n             <button onClick={() => args.onB(42)}>B</button>\n             <button onClick={() => args.onC(\"hello\", true)}>C</button>\n             <button onClick={() => args.onBaz(21, 21)}>Baz</button>\n         </div>\n\n","title":"handle","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["effFn",{"annotation":[],"tag":"ForAll","contents":["fn",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","Dispatch"],"MkEventHandler"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"msg"},{"annotation":[],"tag":"TypeVar","contents":"fn"},{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"effFn"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[102,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[107,24]}},{"children":[],"comments":"A version of `handle` (see comments there) with a possibility of not\nproducing a message.\n","title":"handleMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["effFn",{"annotation":[],"tag":"ForAll","contents":["fn",{"annotation":[],"tag":"ForAll","contents":["msg",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","Dispatch"],"MkEventHandler"],"constraintArgs":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}},{"annotation":[],"tag":"TypeVar","contents":"fn"},{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"effFn"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"DispatchMsgFn"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"effFn"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[116,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[121,24]}},{"children":[{"comments":null,"title":"mkEventHandler","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeVar","contents":"effFn"}]}]}},"sourceSpan":{"start":[131,5],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[134,17]}},{"comments":null,"title":"eventHandlerParameter","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Dispatch"],"MkEventHandler"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"msg"},{"annotation":[],"tag":"TypeVar","contents":"fn0"},{"annotation":[],"tag":"TypeVar","contents":"effFn0"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"MkEventHandler"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"fn0"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"effFn0"}]}]}},"sourceSpan":{"start":[136,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[137,64]}},{"comments":null,"title":"eventHandlerParameterless","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Dispatch"],"MkEventHandler"]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeVar","contents":"msg"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[139,6],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[140,47]}}],"comments":"This type class and its instances are implementation of `handle` and\n`handleMaybe`. The base case is when `fn ~ msg` - that is when the\nmessage-producing function is not a function at all, but the message\nitself. The recursive instance prepends an argument `a`, thus allowing for\ncurried functions with arbitrary number of parameters.\n","title":"MkEventHandler","info":{"fundeps":[[["fn"],["effFn"]],[["effFn"],["fn"]]],"arguments":[["msg",null],["fn",null],["effFn",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[130,1],"name":"C:\\w\\elmish\\src\\Elmish\\Dispatch.purs","end":[134,17]}}]},{"reExports":[{"moduleName":{"package":"purescript-foreign","item":["Foreign"]},"declarations":[{"children":[],"comments":"A type for _foreign data_.\n\nForeign data is data from any external _unknown_ or _unreliable_\nsource, for which it cannot be guaranteed that the runtime representation\nconforms to that of any particular type.\n\nSuitable applications of `Foreign` are\n\n- To represent responses from web services\n- To integrate with external JavaScript libraries.\n","title":"Foreign","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[51,1],"name":"bower_components\\purescript-foreign\\src\\Foreign.purs","end":[51,36]}}]}],"name":"Elmish.Foreign","comments":null,"declarations":[{"children":[{"comments":null,"title":"tojsJson","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[78,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[78,46]}},{"comments":null,"title":"tojsForeign","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},"sourceSpan":{"start":[80,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[80,52]}},{"comments":null,"title":"tojsString","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[83,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[83,50]}},{"comments":null,"title":"tojsNumber","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[86,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[86,50]}},{"comments":null,"title":"tojsBoolean","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[89,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[89,52]}},{"comments":null,"title":"tojsDate","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","JSDate"],"JSDate"]}]}},"sourceSpan":{"start":[92,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[92,48]}},{"comments":null,"title":"tojsStrMap","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[95,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[95,83]}},{"comments":null,"title":"tojsInt","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[98,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[98,44]}},{"comments":null,"title":"tojsEffectFn1","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[102,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[102,117]}},{"comments":null,"title":"tojsEffectFn2","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"c"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}},"sourceSpan":{"start":[106,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[106,147]}},{"comments":null,"title":"tojsArray","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[110,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[110,77]}},{"comments":null,"title":"tojsNullable","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Nullable"],"Nullable"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[115,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[115,83]}},{"comments":null,"title":"tojsRecord","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[121,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[121,104]}},{"comments":null,"title":"tojsPureFunction","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[131,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[131,89]}}],"comments":"This class is used to assert that values of a type can be passed to\nJavaScript code directly (without conversion) and understood by that code.\nSpecifically, this class is defined for primitives (strings, numbers,\nbooleans), arrays, and records. This assertion is used in a number of\nplaces that pass complex values to JS code to restrict the types that can\nbe safely passed.\n","title":"CanPassToJavaScript","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[76,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[76,28]}},{"children":[{"comments":null,"title":"isForeignOfCorrectType","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[68,5],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[68,60]}},{"comments":null,"title":"fromjsForeign","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},"sourceSpan":{"start":[81,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[81,99]}},{"comments":null,"title":"fromjsString","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[84,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[84,99]}},{"comments":null,"title":"fromjsNumber","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[87,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[87,99]}},{"comments":null,"title":"fromjsBoolean","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[90,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[90,102]}},{"comments":null,"title":"fromjsDate","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","JSDate"],"JSDate"]}]}},"sourceSpan":{"start":[93,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[93,95]}},{"comments":null,"title":"fromjsStrMap","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}},"sourceSpan":{"start":[96,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[96,113]}},{"comments":null,"title":"fromjsInt","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[99,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[100,91]}},{"comments":null,"title":"fromjsEffectFn1","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[103,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[104,42]}},{"comments":null,"title":"fromjsEffectFn2","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn2"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[107,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[108,42]}},{"comments":null,"title":"fromjsArray","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[111,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[113,108]}},{"comments":null,"title":"fromjsNullable","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Nullable"],"Nullable"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[116,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[119,75]}},{"comments":null,"title":"fromjsRecord","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[122,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[123,102]}}],"comments":"This class is used to assert that values of a type can be passed from\nJavaScript to PureScript without any conversions. Specifically, this class\nis defined for primitives (strings, numbers, booleans), arrays, and\nrecords.\n","title":"CanReceiveFromJavaScript","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[67,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[68,60]}},{"children":[],"comments":"Verifies if the given raw JS value is of the right type/shape to be\nrepresented as `a`, and if so, coerces the value to `a`.\n","title":"readForeign","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[163,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[163,69]}},{"children":[],"comments":null,"title":"showForeign","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[61,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[61,48]}},{"children":[],"comments":"Type of the `arguments` object in a JS function (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments).\n","title":"Arguments","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[36,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[36,38]}},{"children":[],"comments":"Creates a new `Array` from an `Arguments` object.\n","title":"argumentsToArray_","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"Arguments"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}},"sourceSpan":{"start":[53,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[53,63]}},{"children":[],"comments":"Gets the value at a specified index of an `Arguments` object.\nReturns `Nothing` if there are not enough arguments.\n","title":"getArgument","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"Arguments"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]}]}},"sourceSpan":{"start":[48,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[48,49]}},{"children":[],"comments":"Creates a JS function that takes a variable number of args (via\n`arguments`) and calls the provided effectful continuation, passing the\narguments as an array.\n","title":"mkVarArgEff_","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"Arguments"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},"sourceSpan":{"start":[41,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[41,69]}},{"children":[{"comments":null,"title":"validateJsRecord","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Type","Data","RowList"],"RLProxy"]},{"annotation":[],"tag":"TypeVar","contents":"rowList"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[139,5],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[139,73]}},{"comments":null,"title":"recfromjsNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[141,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[142,32]}},{"comments":null,"title":"recfromjsCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScriptRecord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"rl'"}]}]}},"sourceSpan":{"start":[144,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[150,70]}}],"comments":"This class is implementation of `isForeignOfCorrectType` for records. It\nvalidates a given JS hash (aka \"object\") against a given type row that\nrepresents a PureScript record, recursively calling\n`isForeignOfCorrectType` for each field.\n","title":"CanReceiveFromJavaScriptRecord","info":{"fundeps":[],"arguments":[["rowList",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[138,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[139,73]}},{"children":[{"comments":null,"title":"rectojsNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[157,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[157,53]}},{"comments":null,"title":"rectojsCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl'"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScriptRecord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"rl'"}]}]}},"sourceSpan":{"start":[158,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[158,141]}}],"comments":"This class is implementation of `CanPassToJavaScript` for records. It\nsimply iterates over all fields, checking that every field is of a type\nthat also has an instance of `CanPassToJavaScript`.\n","title":"CanPassToJavaScriptRecord","info":{"fundeps":[],"arguments":[["rowList",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[156,1],"name":"C:\\w\\elmish\\src\\Elmish\\Foreign.purs","end":[156,53]}}]},{"reExports":[],"name":"Elmish.JsCallback","comments":null,"declarations":[{"children":[{"comments":null,"title":"jsCbToJs","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"fn"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]}]}},"sourceSpan":{"start":[28,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[28,76]}}],"comments":"This type represents a function that has been wrapped in a way suitable for\npassing to JavaScript (including parameter validation). The primary use\ncase for such callbacks is to pass them to JSX code for receiving\nDOM-generated events and turning them into UI messages. See `MkJsCallback`\nfor more info and examples.\n","title":"JsCallback","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["fn",null]]},"sourceSpan":{"start":[27,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[27,43]}},{"children":[],"comments":"A parameterless `JsCallback`\n","title":"JsCallback0","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}}]}},"sourceSpan":{"start":[31,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[31,44]}},{"children":[{"comments":null,"title":"showJsCbError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallbackError"]}]}},"sourceSpan":{"start":[39,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[46,101]}}],"comments":"Represents an error that may occur as a result of JS code calling a\nfunctuion wrapped as `JsCallback`.\n","title":"JsCallbackError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[35,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[37,72]}},{"children":[{"comments":"This is the internal implementation of `jsCallback` and `jsCallback'`.\nDo not use directly.\n","title":"mkJsCallback","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"ParseM"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}}]}]}]}},"sourceSpan":{"start":[106,5],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[106,54]}},{"comments":null,"title":"jsCallbackEffect","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"MkJsCallback"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[108,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[109,32]}},{"comments":null,"title":"jsCallbackFunction","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanReceiveFromJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"MkJsCallback"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[111,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[117,38]}}],"comments":"The core logic of jsCallback.\n\nThis type class has two instances below:\n  * The instance `fn` ~ `Effect Unit` represents a parameterless callback.\n  * The instance `fn` ~ `MkJsCallback b => a -> b` is recursive, so it\n    represents a callback with one or more parameters.\n","title":"MkJsCallback","info":{"fundeps":[],"arguments":[["fn",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[103,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[106,54]}},{"children":[],"comments":"Wraps a given effect `fn` (possibly with parameters) as a JS non-curried\nfunction with parameter type validation, making it suitable for passing to\nunsafe JS code.\n\nThis function should not (or at least rarely) be used directly. In normal\nscenarios, `Elmish.Dispatch.handle` should be used instead.\n\nExample:\n\n      -- PureScript:\n      createElement' theView_\n          { onSave: jsCallback $ Console.log \"Save\"\n          , onCancel: jsCallback $ Console.log \"Cancel\"\n          , onFoo: jsCallback \\(bar::String) (baz::Int) ->\n              Console.log $ \"bar = \" <> bar <> \", baz = \" <> show baz\n          }\n\n     // JSX:\n     export const TheView = props =>\n       <div>\n         <button onClick={props.onSave}>Save</button>\n         <button onClick={props.onCancel}>Cancel</button>\n         <button onClick={() => props.onFoo(\"bar\", 42)}>Foo</button>\n       </div>\n\nIn this example, the parameters `bar` and `baz` will undergo validation at\nruntime to make sure they are indeed a `String` and an `Int` respectively,\nand an error will be issued if validation fails.\n\n","title":"jsCallback","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["fn",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"fn"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]}]}]},null]}},"sourceSpan":{"start":[81,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[84,21]}},{"children":[],"comments":"A more elaborate version of `jsCallback`, which takes an extra parameter\n- an effect to be performed in case of errors.\n","title":"jsCallback'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["fn",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","JsCallback"],"MkJsCallback"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"fn"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallbackError"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback"]},{"annotation":[],"tag":"TypeVar","contents":"fn"}]}]}]}]},null]}},"sourceSpan":{"start":[89,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[93,21]}},{"children":[],"comments":"Deprecated. Same as `jsCallback`.\n","title":"jsCallback0","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","JsCallback"],"JsCallback0"]}]}},"sourceSpan":{"start":[49,1],"name":"C:\\w\\elmish\\src\\Elmish\\JsCallback.purs","end":[49,42]}}]},{"reExports":[],"name":"Elmish.React","comments":null,"declarations":[{"children":[{"comments":null,"title":"reactChildrenArray","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[117,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[118,31]}},{"comments":null,"title":"reactChildrenSingle","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[123,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[124,30]}},{"comments":null,"title":"tojsReactElement","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[145,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[145,62]}}],"comments":"Instantiated subtree of React DOM. JSX syntax produces values of this type.\n","title":"ReactElement","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[29,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[29,41]}},{"children":[],"comments":"This type represents constructor of a React component with a particular\nbehavior. The type prameter is the record of props (in React lingo) that\nthis component expects. Such constructors can be \"rendered\" into\n`ReactElement` via `createElement`.\n","title":"ReactComponent","info":{"kind":{"annotation":[],"tag":"FunKind","contents":[{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[35,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[35,51]}},{"children":[],"comments":"A specific instance of a React component - i.e. an object that has `state`\nand `props` properties on it.\n","title":"ReactComponentInstance","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[39,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[39,51]}},{"children":[{"comments":null,"title":"validProps","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactPropsRL"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Elmish","Foreign"],"CanPassToJavaScript"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ValidReactProps"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[90,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[95,34]}}],"comments":"Asserts that the given type is a valid React props structure. Currently\nthere are three rules for what is considered \"valid\":\n\n1. The type must be a record.\n2. The types of all props must be safe to pass to JavaScript,\n   which is asserted via the `CanPassToJavaScript` class.\n3. There cannot be a prop named 'ref'. Currently we do not support React\n   refs, and when we do, the type of that prop will have to be restricted\n   to something special and effectful.\n","title":"ValidReactProps","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[89,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[89,24]}},{"children":[{"comments":null,"title":"validPropsNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ValidReactPropsRL"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[103,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[103,48]}},{"comments":null,"title":"validPropsCons","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ValidReactPropsRL"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"n"}]},{"annotation":[],"tag":"TypeVar","contents":"t"}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[105,6],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[105,63]}}],"comments":"Internal implementation detail of the `ValidReactProps` class. This has to be a\nseparate class due to how rows work at type level.\n","title":"ValidReactPropsRL","info":{"fundeps":[],"arguments":[["a",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[102,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[102,39]}},{"children":[{"comments":null,"title":"asReactChildren","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[115,5],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[115,47]}},{"comments":null,"title":"reactChildrenArray","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}},"sourceSpan":{"start":[117,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[118,31]}},{"comments":null,"title":"reactChildrenString","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[120,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[121,43]}},{"comments":null,"title":"reactChildrenSingle","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactChildren"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[123,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[124,30]}}],"comments":"Describes a type that can be used as \"content\" (aka \"children\") of a React\nJSX element. The three instances below make it possible to use `String` and\n`ReactElement` as children directly, without wrapping them in an array.\n","title":"ReactChildren","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[114,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[115,47]}},{"children":[],"comments":"The PureScript import of the React’s `createElement` function. Takes a\ncomponent constructor, a record of props, some children, and returns a\nReact DOM element.\n\nTo represent HTML `data-` attributes, `createElement` supports the\n`_data :: Object` prop.\n\n**Example**\n\n```purescript\nimport Elmish.HTML as H\nimport Foreign.Object as FO\n\nH.div\n  { _data: FO.fromHomogenous { toggle: \"buttons } }\n  [...]\n```\n\nrepresents the `<div data-toggle=\"buttons\">` DOM element.\n\n","title":"createElement","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["content",{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"content"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"content"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[61,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[67,20]}},{"children":[],"comments":"Variant of `createElement` for creating an element without children.\n","title":"createElement'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]}]},null]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[76,20]}},{"children":[],"comments":null,"title":"getState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Nullable"],"Nullable"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}}]}]},null]}},"sourceSpan":{"start":[126,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[126,76]}},{"children":[],"comments":null,"title":"hydrate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Web","DOM","Internal","Types"],"Element"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":{"start":[138,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[138,55]}},{"children":[],"comments":null,"title":"setState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[130,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[130,90]}},{"children":[],"comments":null,"title":"render","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Web","DOM","Internal","Types"],"Element"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":{"start":[134,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[134,54]}},{"children":[],"comments":null,"title":"renderToString","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[142,1],"name":"C:\\w\\elmish\\src\\Elmish\\React.purs","end":[142,56]}}]},{"reExports":[],"name":"Elmish.React.DOM","comments":null,"declarations":[{"children":[],"comments":"Empty React element.\n","title":"empty","info":{"declType":"value","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}},"sourceSpan":{"start":[11,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\DOM.purs","end":[11,22]}},{"children":[],"comments":"Render a plain string as a React element.\n","title":"text","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[15,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\DOM.purs","end":[15,31]}},{"children":[],"comments":"Wraps multiple React elements as a single one (import of React.Fragment)\n","title":"fragment","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[19,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\DOM.purs","end":[19,47]}}]},{"reExports":[],"name":"Elmish.React.Import","comments":null,"declarations":[{"children":[],"comments":"Row of props that are common to all React components, without having to\ndeclare them.\n","title":"CommonProps","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"RCons","contents":["key",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[17,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[17,37]}},{"children":[],"comments":"And empty open row. To be used for components that don't have any optional\nor any required props.\n","title":"EmptyProps","info":{"arguments":[["r",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeVar","contents":"r"}},"sourceSpan":{"start":[21,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[21,39]}},{"children":[],"comments":"Type of a function used to create a React JSX-imported component that is\ngeneric in such a way as to allow any subset of optional properties\n(including an empty subset) to be passed in.\n","title":"ImportedReactComponentConstructor'","info":{"arguments":[["reqProps",null],["optProps",null],["result",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["props",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React","Import"],"IsSubsetOf"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"props"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"BinaryNoParensType","contents":[{"annotation":[],"tag":"TypeOp","contents":[["Type","Row"],"+"]},{"annotation":[],"tag":"TypeVar","contents":"reqProps"},{"annotation":[],"tag":"BinaryNoParensType","contents":[{"annotation":[],"tag":"TypeOp","contents":[["Type","Row"],"+"]},{"annotation":[],"tag":"TypeVar","contents":"optProps"},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Import"],"CommonProps"]}]}]}}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React","Import"],"IsSubsetOf"],"constraintArgs":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"reqProps"},{"annotation":[],"tag":"REmpty"}]}},{"annotation":[],"tag":"TypeVar","contents":"props"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ValidReactProps"],"constraintArgs":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"props"}]}]},{"annotation":[],"tag":"TypeVar","contents":"result"}]}]}]}]},null]}},"sourceSpan":{"start":[26,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[32,14]}},{"children":[],"comments":"Type of a function used to create a React JSX-imported component that\ndoesn't admit children. The function is generic in such a way as to allow\nany subset of optional properties (including an empty subset) to be passed\nin.\n","title":"ImportedReactComponentConstructor","info":{"arguments":[["reqProps",null],["optProps",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Import"],"ImportedReactComponentConstructor'"]},{"annotation":[],"tag":"TypeVar","contents":"reqProps"}]},{"annotation":[],"tag":"TypeVar","contents":"optProps"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}},"sourceSpan":{"start":[38,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[39,70]}},{"children":[],"comments":"Type of a function used to create a React JSX-imported component that can\ninclude children. The function is generic in such a way as to allow any\nsubset of optional properties (including an empty subset) to be passed in.\nThe children are polymorphic, expressed via the `ReactChildren` type class.\n","title":"ImportedReactComponentConstructorWithContent","info":{"arguments":[["reqProps",null],["optProps",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["content",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Elmish","React"],"ReactChildren"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"content"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Import"],"ImportedReactComponentConstructor'"]},{"annotation":[],"tag":"TypeVar","contents":"reqProps"}]},{"annotation":[],"tag":"TypeVar","contents":"optProps"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"content"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactElement"]}]}}]}]},null]}},"sourceSpan":{"start":[45,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[48,86]}},{"children":[],"comments":"A React component directly imported from JavaScript.\n","title":"ImportedReactComponent","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponent"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]},null]}},"sourceSpan":{"start":[59,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[59,58]}},{"children":[{"comments":null,"title":"isSubsetOf","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Union"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"subset"},{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"superset"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React","Import"],"IsSubsetOf"]},{"annotation":[],"tag":"TypeVar","contents":"subset"}]},{"annotation":[],"tag":"TypeVar","contents":"superset"}]}},"sourceSpan":{"start":[64,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[64,81]}}],"comments":null,"title":"IsSubsetOf","info":{"fundeps":[],"arguments":[["subset",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["superset",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[63,1],"name":"C:\\w\\elmish\\src\\Elmish\\React\\Import.purs","end":[63,57]}}]},{"reExports":[],"name":"Elmish.Ref","comments":null,"declarations":[{"children":[{"comments":null,"title":"readjsRef","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanReceiveFromJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[66,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[70,33]}},{"comments":null,"title":"writejsRef","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Foreign"],"CanPassToJavaScript"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[72,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[72,73]}}],"comments":"An opaque reference for tunneling through JSX code.\n\nThis type is a wrapper that lets us pass any PureScript values into JSX\ncode, with the expectation that the JSX code cannot mess with (inspect,\nmutate) these values, but can pass them back to the PureScript code in\nmessages. This type has instances of `CanPassToJavaScript` and\n`CanReceiveFromJavaScript`, which allows it to be passed in React props or\nview messages.\n\nOne challenge with this type is that we can't just `unsafeCoerce` its\nvalues back and forth, because that would open a very big hole for data\ncorruption to get in. To have some protection against it, we add a weak\nform of verification: internally values of `Ref` are represented by a\nJavaScript hash with a sole key looking like \"ref:name\", whose value is the\ntarget of the ref, and where \"name\" is the first type argument of this\n`Ref`. This way, we have at least _something_ to verify (see the\n`CanReceiveFromJavaScript` instance below) that the object passed by the\nJSX code is not some random value, but actually originated as a `Ref a` of\nthe right type.\n\nAdmittedly, this is only weak protection, because the JSX code can still,\nif it really wanted to, construct a hash like `{ \"ref:name\": \"abracadabra\"}`\nand pass it to the PureScript code, which would happily\naccept the \"abracadabra\" value as if it was the right type.\n\nHere are my arguments for why this weak protection is enough:\n  1) The JSX code has to actually _try_ to be destructive. Can't happen by\n     accident.\n  2) It's technically impossible to do any better without putting\n     significant restrictions on the type `a` (i.e. requiring it to be\n     `Generic` or to provide type name, etc.), and without losing some\n     performance.\n  3) If such corruption proves to be a problem in the future, we can always\n     fall back to encoding/decoding `Json`, and pay some performance for it.\n\n","title":"Ref","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["name",{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Symbol"]}],["a",null]]},"sourceSpan":{"start":[48,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[48,50]}},{"children":[],"comments":"Creates an instance of `Ref`. See comments on it above.\n","title":"ref","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["name",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[51,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[51,50]}},{"children":[],"comments":"Deconstructs an instance of `Ref`. See comments on it above.\n","title":"deref","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["name",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","Ref"],"Ref"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[55,1],"name":"C:\\w\\elmish\\src\\Elmish\\Ref.purs","end":[55,52]}}]},{"reExports":[],"name":"Elmish.State","comments":null,"declarations":[{"children":[],"comments":null,"title":"StateStrategy","info":{"arguments":[["state",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["initialState",{"annotation":[],"tag":"TypeVar","contents":"state"},{"annotation":[],"tag":"REmpty"}]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["getState",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}]},{"annotation":[],"tag":"RCons","contents":["setState",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","React"],"ReactComponentInstance"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},{"annotation":[],"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[28,1],"name":"C:\\w\\elmish\\src\\Elmish\\State.purs","end":[40,6]}},{"children":[],"comments":null,"title":"dedicatedStorage","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","State"],"StateStrategy"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]}}]},null]}},"sourceSpan":{"start":[44,1],"name":"C:\\w\\elmish\\src\\Elmish\\State.purs","end":[44,63]}},{"children":[],"comments":null,"title":"localState","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["state",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Elmish","State"],"StateStrategy"]},{"annotation":[],"tag":"TypeVar","contents":"state"}]},null]}},"sourceSpan":{"start":[60,1],"name":"C:\\w\\elmish\\src\\Elmish\\State.purs","end":[60,48]}}]},{"reExports":[],"name":"Elmish.Trace","comments":null,"declarations":[{"children":[],"comments":null,"title":"traceTime","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[7,1],"name":"C:\\w\\elmish\\src\\Elmish\\Trace.purs","end":[7,65]}}]}],"resolvedDependencies":{"purescript-proxy":"3.0.0","purescript-web-storage":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-ordered-collections":"1.6.1","purescript-control":"4.2.0","purescript-console":"4.4.0","purescript-either":"4.1.1","purescript-media-types":"4.0.1","purescript-web-events":"2.0.1","purescript-arrays":"5.3.1","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.1.0","purescript-invariant":"4.1.0","purescript-web-html":"2.3.0","purescript-argonaut-core":"5.1.0","purescript-lazy":"4.0.0","purescript-foreign-object":"2.0.3","purescript-now":"4.0.0","purescript-aff":"5.1.2","purescript-foldable-traversable":"4.1.1","purescript-debug":"4.0.1","purescript-tailrec":"4.1.1","purescript-gen":"2.1.1","purescript-typelevel-prelude":"5.0.2","purescript-functors":"3.1.1","purescript-prelude":"4.1.1","purescript-st":"4.1.1","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.1","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-const":"4.1.0","purescript-record":"2.0.2","purescript-transformers":"4.2.0","purescript-globals":"4.1.0","purescript-js-date":"6.0.0","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-psci-support":"4.0.0","purescript-web-file":"2.3.0","purescript-web-dom":"4.1.0","purescript-parallel":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-strings":"4.0.2","purescript-identity":"4.1.0","purescript-foreign":"5.0.0","purescript-lists":"5.4.1","purescript-nullable":"4.1.1","purescript-datetime":"4.1.1","purescript-functions":"4.0.0"},"version":"0.3.1","github":["collegevine","purescript-elmish"],"versionTag":"v0.3.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Web.DOM.NodeList":"purescript-web-dom","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Web.HTML.HTMLDataListElement":"purescript-web-html","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Web.HTML.HTMLTextAreaElement":"purescript-web-html","Record.Unsafe.Union":"purescript-record","Data.Functor.Product":"purescript-functors","Foreign.Keys":"purescript-foreign","Data.NonEmpty":"purescript-nonempty","Web.HTML.HTMLMediaElement.CanPlayType":"purescript-web-html","Effect.Uncurried":"purescript-effect","Web.DOM.ChildNode":"purescript-web-dom","Data.Char.Gen":"purescript-strings","Web.HTML.HTMLHRElement":"purescript-web-html","Web.DOM.NonDocumentTypeChildNode":"purescript-web-dom","Effect.Now":"purescript-now","Data.String.NonEmpty":"purescript-strings","Web.File.FileReader.ReadyState":"purescript-web-file","Effect":"purescript-effect","Web.HTML.HTMLLegendElement":"purescript-web-html","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Web.HTML.Event.HashChangeEvent":"purescript-web-html","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Compose":"purescript-functors","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Web.HTML.Event.BeforeUnloadEvent":"purescript-web-html","Web.DOM.MutationObserver":"purescript-web-dom","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Web.HTML.History":"purescript-web-html","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Data.Argonaut.Parser":"purescript-argonaut-core","Data.Monoid.Dual":"purescript-prelude","Web.HTML.Event.PopStateEvent.EventTypes":"purescript-web-html","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Web.DOM.ParentNode":"purescript-web-dom","Record.Builder":"purescript-record","Web.HTML.Event.DragEvent.EventTypes":"purescript-web-html","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Web.HTML.HTMLSpanElement":"purescript-web-html","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Web.HTML.HTMLOptionElement":"purescript-web-html","Data.Int":"purescript-integers","Web.DOM.HTMLCollection":"purescript-web-dom","Web.HTML.Event.TrackEvent.EventTypes":"purescript-web-html","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Web.HTML.HTMLDivElement":"purescript-web-html","Control.Monad.Writer.Trans":"purescript-transformers","Web.File.FileReader":"purescript-web-file","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Web.HTML.HTMLKeygenElement":"purescript-web-html","Control.Monad":"purescript-prelude","Web.HTML.Event.EventTypes":"purescript-web-html","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Control.Monad.List.Trans":"purescript-transformers","Web.HTML.HTMLLabelElement":"purescript-web-html","Web.HTML.HTMLAudioElement":"purescript-web-html","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Web.HTML.HTMLFormElement":"purescript-web-html","Web.DOM.Element":"purescript-web-dom","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Web.HTML.HTMLMediaElement.ReadyState":"purescript-web-html","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Web.HTML.HTMLTableElement":"purescript-web-html","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Web.HTML.HTMLLIElement":"purescript-web-html","Web.HTML.HTMLMetaElement":"purescript-web-html","Web.HTML.HTMLOListElement":"purescript-web-html","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Web.HTML.Event.DragEvent":"purescript-web-html","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Web.HTML.Event.PopStateEvent":"purescript-web-html","Web.Event.CustomEvent":"purescript-web-events","Web.HTML.Event.ErrorEvent":"purescript-web-html","Control.Comonad.Traced.Trans":"purescript-transformers","Web.DOM.Text":"purescript-web-dom","Web.HTML.HTMLObjectElement":"purescript-web-html","Web.HTML.HTMLSourceElement":"purescript-web-html","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Web.DOM.NodeType":"purescript-web-dom","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Foreign.Index":"purescript-foreign","Control.Alternative":"purescript-control","Web.HTML.HTMLSelectElement":"purescript-web-html","Data.Semiring":"purescript-prelude","Web.HTML.HTMLCanvasElement":"purescript-web-html","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Web.HTML.HTMLTableDataCellElement":"purescript-web-html","Web.HTML.HTMLTableCaptionElement":"purescript-web-html","Data.Functor.App":"purescript-functors","Data.Unfoldable":"purescript-unfoldable","Web.HTML.HTMLTemplateElement":"purescript-web-html","Web.HTML.SelectionMode":"purescript-web-html","Type.RowList":"purescript-typelevel-prelude","Web.HTML.HTMLTitleElement":"purescript-web-html","Web.HTML.Event.PageTransitionEvent.EventTypes":"purescript-web-html","Web.HTML.HTMLTableCellElement":"purescript-web-html","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Web.HTML.HTMLUListElement":"purescript-web-html","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Web.HTML.HTMLParamElement":"purescript-web-html","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Web.HTML.HTMLTableSectionElement":"purescript-web-html","Control.Monad.Except":"purescript-transformers","Web.Event.EventTarget":"purescript-web-events","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Web.HTML.HTMLOutputElement":"purescript-web-html","Web.DOM.DocumentType":"purescript-web-dom","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Web.HTML.HTMLQuoteElement":"purescript-web-html","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Set":"purescript-ordered-collections","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Web.DOM.Internal.Types":"purescript-web-dom","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Web.HTML.Event.DataTransfer":"purescript-web-html","Data.EuclideanRing":"purescript-prelude","Web.HTML.Event.TrackEvent":"purescript-web-html","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Web.HTML.HTMLVideoElement":"purescript-web-html","Web.HTML.HTMLAnchorElement":"purescript-web-html","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Web.DOM.CharacterData":"purescript-web-dom","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Web.HTML.HTMLDocument":"purescript-web-html","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Web.HTML.Event.PageTransitionEvent":"purescript-web-html","Control.Comonad.Env.Class":"purescript-transformers","Web.Event.EventPhase":"purescript-web-events","Web.HTML.HTMLOptGroupElement":"purescript-web-html","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Web.HTML.HTMLIFrameElement":"purescript-web-html","Data.Either.Nested":"purescript-either","Web.HTML.Navigator":"purescript-web-html","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Web.File.FileList":"purescript-web-file","Data.Monoid.Disj":"purescript-prelude","Data.MediaType":"purescript-media-types","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Web.HTML.HTMLMapElement":"purescript-web-html","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Web.DOM.MutationRecord":"purescript-web-dom","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Web.HTML.HTMLMediaElement":"purescript-web-html","Web.HTML.HTMLTableRowElement":"purescript-web-html","Data.DateTime.Instant":"purescript-datetime","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Web.HTML.HTMLEmbedElement":"purescript-web-html","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Web.File.Url":"purescript-web-file","Web.HTML.HTMLDocument.ReadyState":"purescript-web-html","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Web.HTML.HTMLMediaElement.NetworkState":"purescript-web-html","Web.DOM.Comment":"purescript-web-dom","Web.File.Blob":"purescript-web-file","Web.HTML.HTMLMeterElement":"purescript-web-html","Web.DOM.ProcessingInstruction":"purescript-web-dom","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Web.HTML.HTMLParagraphElement":"purescript-web-html","Web.DOM":"purescript-web-dom","Data.List.Lazy.NonEmpty":"purescript-lists","Web.HTML.HTMLButtonElement":"purescript-web-html","Data.Ordering":"purescript-prelude","Web.HTML.HTMLModElement":"purescript-web-html","Data.Functor.Coproduct":"purescript-functors","Web.Event.Event":"purescript-web-events","Web.HTML.HTMLDListElement":"purescript-web-html","Control.Monad.Cont.Class":"purescript-transformers","Web.File.File":"purescript-web-file","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Web.HTML.Location":"purescript-web-html","Web.HTML.ValidityState":"purescript-web-html","Math":"purescript-math","Web.HTML.HTMLTableColElement":"purescript-web-html","Data.Set.NonEmpty":"purescript-ordered-collections","Web.Storage.Storage":"purescript-web-storage","Control.Comonad.Trans.Class":"purescript-transformers","Web.HTML.HTMLInputElement":"purescript-web-html","Data.String":"purescript-strings","Control.Plus":"purescript-control","Web.HTML.HTMLTimeElement":"purescript-web-html","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.JSDate":"purescript-js-date","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Web.HTML":"purescript-web-html","Web.HTML.HTMLProgressElement":"purescript-web-html","Web.HTML.HTMLTrackElement.ReadyState":"purescript-web-html","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Web.DOM.NonElementParentNode":"purescript-web-dom","Web.HTML.HTMLBaseElement":"purescript-web-html","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Web.DOM.Node":"purescript-web-dom","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Web.Storage.Event.StorageEvent":"purescript-web-storage","Web.HTML.HTMLElement":"purescript-web-html","Data.Array.ST":"purescript-arrays","Web.Event.Internal.Types":"purescript-web-events","Foreign":"purescript-foreign","Control.Monad.Error.Class":"purescript-transformers","Data.Argonaut.Core":"purescript-argonaut-core","Control.Semigroupoid":"purescript-prelude","Web.Internal.FFI":"purescript-web-events","Debug.Trace":"purescript-debug","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Web.HTML.HTMLFieldSetElement":"purescript-web-html","Web.HTML.HTMLLinkElement":"purescript-web-html","Web.HTML.Event.HashChangeEvent.EventTypes":"purescript-web-html","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Web.HTML.HTMLBRElement":"purescript-web-html","Web.HTML.HTMLHeadingElement":"purescript-web-html","Web.HTML.HTMLHeadElement":"purescript-web-html","Web.HTML.HTMLDataElement":"purescript-web-html","Web.HTML.HTMLBodyElement":"purescript-web-html","Data.Bifoldable":"purescript-foldable-traversable","Web.HTML.Event.BeforeUnloadEvent.EventTypes":"purescript-web-html","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Web.HTML.Window":"purescript-web-html","Web.HTML.HTMLTableHeaderCellElement":"purescript-web-html","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Web.HTML.HTMLImageElement":"purescript-web-html","Data.Op":"purescript-contravariant","Web.HTML.HTMLPreElement":"purescript-web-html","Web.HTML.HTMLScriptElement":"purescript-web-html","Record.Unsafe":"purescript-prelude","Data.MediaType.Common":"purescript-media-types","Web.DOM.DocumentFragment":"purescript-web-dom","Control.Monad.Writer":"purescript-transformers","Web.DOM.DOMTokenList":"purescript-web-dom","Web.HTML.HTMLAreaElement":"purescript-web-html","Web.DOM.Document":"purescript-web-dom","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Time.Gen":"purescript-datetime","Web.HTML.HTMLTrackElement":"purescript-web-html","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings","Web.HTML.HTMLStyleElement":"purescript-web-html"},"compilerVersion":"0.13.3"}