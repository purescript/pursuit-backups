{"uploader":"hdgarrood","packageMeta":{"repository":{"url":"https://github.com/lumihq/purescript-fixed-precision.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^4.0.0","purescript-quickcheck":"^5.0.0"},"dependencies":{"purescript-bigints":"^4.0.0","purescript-maybe":"^4.0.0","purescript-integers":"^4.0.0","purescript-math":"^2.1.1","purescript-strings":"^4.0.1"},"name":"purescript-fixed-precision","license":["Apache-2.0"]},"tagTime":"2020-01-13T15:15:43+0000","modules":[{"reExports":[],"name":"Data.Fixed","comments":"This module defines a numeric type `Fixed` for working with\nfixed point numbers in base 10. The precision is tracked in\nthe types.\n","declarations":[{"children":[{"comments":null,"title":"showFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[423,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[429,13]}},{"comments":null,"title":"eqFixed","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[431,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[432,34]}},{"comments":null,"title":"ordFixed","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[434,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[435,44]}},{"comments":null,"title":"semiringFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[437,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[441,62]}},{"comments":null,"title":"ringFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[443,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[444,42]}},{"comments":null,"title":"commutativeRingFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[446,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[446,95]}},{"comments":null,"title":"euclideanRingFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[448,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[456,24]}},{"comments":null,"title":"divisionRingFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","DivisionRing"],"DivisionRing"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[458,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[459,20]}}],"comments":"A fixed point representation of a real number, with the specified precision.\n\nA value is multiplied by the precision, truncated and stored as a big\ninteger. That is, we approximate the number by numerator/10^precision, storing\nonly the numerator, and carrying the precision around as type information.\n\nThe `Semiring` and associated instances allow us to perform basic arithmetic\noperations. Unlike `Number`, addition of `Fixed` numbers does satisfy the\nassociativity law, but like `Number`, most of the other laws of the\nnumeric hierarchy classes are not satisfied due to rounding errors.\n\n","title":"Fixed","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["precision",{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]]},"sourceSpan":{"start":[149,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[149,61]}},{"children":[],"comments":"Create a `Fixed` representation of an `Int`.\n","title":"fromInt","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[167,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[171,21]}},{"children":[],"comments":"Approximate a `Number` as a `Fixed` value with the specified precision.\n\n```\n> fromNumber 0.1234 :: Maybe (Fixed P10000)\n(Just (fromNumber 0.1234 :: P10000))\n\n> fromNumber 0.1234 :: Maybe (Fixed P100)\n(Just (fromNumber 0.12 :: P100))\n```\n\nWhen given a finite `Number`, this function always succeeds: the number is\ntruncated (rounded towards zero) to the closest possible `Fixed` value.\nThis function only returns `Nothing` if it is given NaN, or positive or\nnegative infinity.\n\n```\n> fromNumber (1.0 / 0.0) :: Maybe (Fixed P100)\nNothing\n```\n","title":"fromNumber","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}}]}]}]},null]}},"sourceSpan":{"start":[193,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[197,29]}},{"children":[],"comments":"Convert a `Fixed` value to a `Number`.\n\n_Note_: Overflow is possible here if the numerator is sufficiently large.\nConsider using `toString` instead.\n","title":"toNumber","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},null]}},"sourceSpan":{"start":[204,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[208,12]}},{"children":[],"comments":"Parse a fixed-precision number from a string. Any decimal digits which are\nnot representable in the specified precision will be ignored.\n\n```\n> fromString \"123.456\" :: Maybe (Fixed P1000)\n(Just (fromString \"123.456\" :: P1000))\n```\n\nWhere possible, this function should be preferred over `fromNumber`, since\nit is exact (whereas `fromNumber` can only provide an approximation for\nlarger inputs).\n\n```\n> fromString \"9007199254740992.5\" :: Maybe (Fixed P10)\n(Just (fromString \"9007199254740992.5\" :: P10))\n\n> fromNumber 9007199254740992.5 :: Maybe (Fixed P10)\n(Just (fromString \"9007199254740992.0\" :: P10))\n```\n\n","title":"fromString","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}}]}]}]},null]}},"sourceSpan":{"start":[318,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[322,29]}},{"children":[],"comments":"Represent a `Fixed` value as a string, using all of the decimal places it\ncan represent (based on its precision).\n\n```\n> map toString (fromString \"100.5\" :: Maybe (Fixed P10))\n(Just \"100.5\")\n\n> map toString (fromString \"100.5\" :: Maybe (Fixed P100))\n(Just \"100.50\")\n```\n","title":"toString","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},null]}},"sourceSpan":{"start":[390,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[394,12]}},{"children":[],"comments":"Represent a `Fixed` value as a string, with the given number of decimal\nplaces.\n\n```\n> map (toStringWithPrecision 2) (fromString \"1234.567\" :: Maybe (Fixed P1000))\n(Just \"1234.56\")\n```\n\nIf more decimal places are asked for than the type can provide, the extra\ndecimal places will be provided as zeroes.\n\n```\n> map (toStringWithPrecision 3) (fromString \"1234.5\" :: Maybe (Fixed P10))\n(Just \"1234.500\")\n```\n","title":"toStringWithPrecision","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]},null]}},"sourceSpan":{"start":[361,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[366,12]}},{"children":[],"comments":"Extract the numerator from the representation of the number as a fraction.\n\n```\n> map numerator (fromNumber 0.1234 :: Fixed P1000)\n(Just fromString \"123\")\n\n> map numerator (fromNumber 0.1239 :: Fixed P1000)\n(Just fromString \"123\")\n```\n","title":"numerator","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},null]}},"sourceSpan":{"start":[160,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[160,64]}},{"children":[],"comments":"Calculate the largest whole number smaller than or equal to the provided\nvalue.\n\n```\n> map floor $ fromNumber 0.1 :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n\n> map floor $ fromNumber 1.0 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> floor $ fromNumber (-0.1) :: Maybe (Fixed P10)\n(Just (fromNumber (-1.0) :: P10))\n```\n","title":"floor","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[224,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[228,21]}},{"children":[],"comments":"Calculate the smallest whole number greater than or equal to the provided\nvalue.\n\n```\n> map ceil $ fromNumber 0.1 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map ceil $ fromNumber 1.0 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map ceil $ fromNumber (-0.1) :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n```\n","title":"ceil","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[248,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[252,21]}},{"children":[],"comments":"Round the specified value to the nearest whole number.\n\n```\n> map round $ fromNumber 0.1 :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n\n> map round $ fromNumber 0.9 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map round $ fromNumber 0.5 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map round $ fromNumber (-0.1) :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n```\n","title":"round","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[275,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[279,21]}},{"children":[],"comments":"Division of fixed-precision numbers. This function is deprecated; you\nshould use `/` from the `EuclideanRing` instance instead.\n","title":"approxDiv","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","TypeError"],"Warn"],"constraintArgs":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"annotation":[],"tag":"TypeLevelString","contents":"This function is deprecated, please use `/` instead"}]}}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]}]}]},null]}},"sourceSpan":{"start":[289,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[295,21]}},{"children":[],"comments":"A kind for type-level precision information\n","title":"Precision","info":{"declType":"kind"},"sourceSpan":{"start":[49,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[49,30]}},{"children":[{"comments":null,"title":"knownPrecisionOne","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"One"]}]}},"sourceSpan":{"start":[93,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[94,40]}}],"comments":"No decimal places\n","title":"One","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]},"declType":"externData"},"sourceSpan":{"start":[52,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[52,37]}},{"children":[{"comments":null,"title":"knownPrecisionTenTimes","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeVar","contents":"p"}]}]}},"sourceSpan":{"start":[96,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[97,81]}}],"comments":"One more decimal place\n","title":"TenTimes","info":{"kind":{"annotation":[],"tag":"FunKind","contents":[{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]},{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]},"declType":"externData"},"sourceSpan":{"start":[55,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[55,55]}},{"children":[],"comments":null,"title":"P1","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"One"]}},"sourceSpan":{"start":[57,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[57,14]}},{"children":[],"comments":"One decimal place\n","title":"P10","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P1"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[60,23]}},{"children":[],"comments":"Two decimal places\n","title":"P100","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P10"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[63,25]}},{"children":[],"comments":"Three decimal places\n","title":"P1000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P100"]}]}},"sourceSpan":{"start":[66,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[66,27]}},{"children":[],"comments":"Four decimal places\n","title":"P10000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P1000"]}]}},"sourceSpan":{"start":[69,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[69,29]}},{"children":[],"comments":"Five decimal places\n","title":"P100000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P10000"]}]}},"sourceSpan":{"start":[72,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[72,31]}},{"children":[],"comments":"Six decimal places\n","title":"P1000000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P100000"]}]}},"sourceSpan":{"start":[75,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[75,33]}},{"children":[{"comments":null,"title":"PProxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A value-level proxy for a type-level precision.\n","title":"PProxy","info":{"declType":"data","dataDeclType":"data","typeArguments":[["precision",{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]]},"sourceSpan":{"start":[78,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[78,46]}},{"children":[{"comments":null,"title":"reflectPrecision","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"PProxy"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]}},"sourceSpan":{"start":[91,3],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[91,56]}},{"comments":null,"title":"knownPrecisionOne","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"One"]}]}},"sourceSpan":{"start":[93,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[94,40]}},{"comments":null,"title":"knownPrecisionTenTimes","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeVar","contents":"p"}]}]}},"sourceSpan":{"start":[96,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[97,81]}}],"comments":"Precision which is known, i.e. it can be reflected to a\nvalue at runtime, given a `PProxy`.\n\n`reflectPrecision` returns a multiple of ten, corresponding\nto the maximum number of decimal places which can be stored.\n\n```\n> reflectPrecision (PProxy :: PProxy P1000)\n1000\n```\n","title":"KnownPrecision","info":{"fundeps":[],"arguments":[["precision",{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[90,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[91,56]}},{"children":[],"comments":"Get the number of decimal places associated with a given `Precision` at\nthe value level.\n\n```\n> reflectPrecisionDecimalPlaces (PProxy :: PProxy P1000)\n3\n```\n","title":"reflectPrecisionDecimalPlaces","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"PProxy"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}},"sourceSpan":{"start":[106,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[110,9]}},{"children":[],"comments":"Reify an non-negative integer (a power of ten) as a `Precision`.\n\nFor example\n\n```\n> reifyPrecision 0 reflectPrecision\nJust 1\n> reifyPrecision 1 reflectPrecision\nJust 10\n> reifyPrecision 2 reflectPrecision\nJust 100\n> reifyPrecision (-1) reflectPrecision\nNothing\n```\n","title":"reifyPrecision","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"PProxy"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},null]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}]},null]}},"sourceSpan":{"start":[131,1],"name":"/home/harry-lumi/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[131,116]}}]}],"resolvedDependencies":{"purescript-bigints":"4.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-control":"4.2.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-arrays":"5.3.1","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.2","purescript-invariant":"4.1.0","purescript-lcg":"2.0.0","purescript-lazy":"4.0.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.1.0","purescript-gen":"2.1.1","purescript-prelude":"4.1.1","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-record":"2.0.1","purescript-transformers":"4.2.0","purescript-globals":"4.1.0","purescript-generics-rep":"6.1.1","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-psci-support":"4.0.0","purescript-random":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-quickcheck":"6.1.0","purescript-strings":"4.0.1","purescript-identity":"4.1.0","purescript-lists":"5.4.1","purescript-functions":"4.0.0"},"version":"4.1.0","github":["lumihq","purescript-fixed-precision"],"versionTag":"v4.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Record.Builder":"purescript-record","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Random.LCG":"purescript-lcg","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Unfoldable":"purescript-unfoldable","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Test.QuickCheck":"purescript-quickcheck","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.BigInt":"purescript-bigints","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.13.3"}