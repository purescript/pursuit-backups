{"uploader":"Mateiadrielrafael","packageMeta":{"repository":{"url":"https://github.com/Mateiadrielrafael/purescript-ask","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-unsafe-coerce":"^v5.0.0"},"name":"purescript-ask","license":["GPL-3.0-or-later"]},"tagTime":"2021-08-09T18:40:08+0000","modules":[{"reExports":[],"name":"Control.Ask","comments":"Typeclass based implicit parameters\n","declarations":[{"kind":null,"children":[],"comments":"Constraint created in order to make `Ask` un-implementable \n","title":"Asks","info":{"fundeps":[],"arguments":[],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[7,1],"name":"/home/adrielus/Projects/Packages/purescript-ask/src/Control/Ask.purs","end":[7,11]}},{"kind":null,"children":[{"comments":"Retrives an implicit parameter from the context\n","title":"ask","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[23,5],"name":"/home/adrielus/Projects/Packages/purescript-ask/src/Control/Ask.purs","end":[23,13]}}],"comments":"Ask is the type class representation of an implicit parameter.\n\nExample:\n```purescript\nfoo :: Ask Int => Int -> String\nfoo bar = show (bar + ask)\n```\nThe value can then later be supplied using `provide`:\n```purescript\n(provide 4 foo) 2 -- \"6\"\nprovide 4 (foo 3) -- \"7\"\n```\n","title":"Ask","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintAnn":[],"constraintClass":[["Control","Ask"],"Asks"],"constraintArgs":[],"constraintKindArgs":[],"constraintData":null}]},"sourceSpan":{"start":[21,1],"name":"/home/adrielus/Projects/Packages/purescript-ask/src/Control/Ask.purs","end":[23,13]}},{"kind":null,"children":[],"comments":"Equivalent to `ask` except for accepting a `Proxy` for specifying the exact requested type\n","title":"askFor","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["p",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Ask"],"Ask"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"p"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[40,1],"name":"/home/adrielus/Projects/Packages/purescript-ask/src/Control/Ask.purs","end":[40,40]}},{"kind":null,"children":[],"comments":"Provide an implicit parameter to a computation which requires it\n","title":"provide","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["result",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Ask"],"Ask"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeVar","contents":"result"}]}}]},{"annotation":[],"tag":"TypeVar","contents":"result"}]}]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"/home/adrielus/Projects/Packages/purescript-ask/src/Control/Ask.purs","end":[26,61]}},{"kind":null,"children":[],"comments":"Run a function over an implicit parameter\n\n> Note: Be careful while using this to map over the value without updating the type.\n> ```purescript\n> -- evaluates to `1`, not `2`\n> provide 1 (local ((*) 2) (ask @Int))\n> ``` \n","title":"local","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Ask"],"Ask"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeVar","contents":"r"}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Ask"],"Ask"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeVar","contents":"r"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[36,1],"name":"/home/adrielus/Projects/Packages/purescript-ask/src/Control/Ask.purs","end":[36,64]}}]}],"resolvedDependencies":{"purescript-unsafe-coerce":"5.0.0"},"version":"1.0.0","github":["Mateiadrielrafael","purescript-ask"],"versionTag":"v1.0.0","moduleMap":{"Unsafe.Coerce":"purescript-unsafe-coerce"},"compilerVersion":"0.14.3"}