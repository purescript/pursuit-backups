{"uploader":"thomashoneyman","packageMeta":{"homepage":"https://github.com/purescript-contrib/purescript-options","repository":{"url":"https://github.com/purescript-contrib/purescript-options.git","type":"git"},"ignore":["*","!src/**/*","!LICENSE"],"devDependencies":{"purescript-effect":"^3.0.0","purescript-console":"^5.0.0","purescript-assert":"^5.0.0"},"dependencies":{"purescript-maybe":"^5.0.0","purescript-foreign-object":"^3.0.0","purescript-contravariant":"^5.0.0","purescript-tuples":"^6.0.0","purescript-foreign":"^6.0.0"},"name":"purescript-options","keywords":["purescript"],"license":["MIT"],"description":"PureScript Options"},"tagTime":"2021-02-26T19:57:57+0000","modules":[{"reExports":[],"name":"Data.Options","comments":"## Overview of the Problem\n\nThis module provides a way of dealing with the JS idiom of options\nobjects in PureScript, by giving you the tools to provide a reasonably\ncomfortable typed layer on top of JavaScript APIs which make use of this\nidiom.\n\nMany JavaScript APIs include functions which take an object argument,\nwhere the object's properties come from a fixed set of optional\nconfiguration values. For example, the `createWriteStream` function from\nthe Node.js `fs` module may contain properties such as:\n\n- `flags`, which should be a `String`, such as `\"w\"`, `\"rw\"`, or `\"r+\"`,\n- `defaultEncoding`, which should be a `String` representing an\n  encoding, such as `\"utf8\"`,\n\nand so on.\n\n## Why PureScript Records Don't Work\n\nPureScript's record types can be a little awkward for this, since it is\nusually the case that any subset of these properties can be specified;\nhowever, a value of  type `{ flags :: String, defaultEncoding :: String, [...] }`\nmust include every property listed, even if you only want to specify\none or two properties. \n\n## Using this Library\n\nThis library provides a better solution for this problem. Using this\nmodule, you could wrap `fs.createWriteStream` as follows:\n\nFirst, create a phantom type used for the options object:\n\n```purescript\ndata CreateWriteStreamOptions\n```\n\nThen, create `Option` values for each of the options:\n\n```purescript\nflags :: Option CreateWriteStreamOptions String\nflags = opt \"flags\"\n\ndefaultEncoding :: Option CreateWriteStreamOptions String\ndefaultEncoding = opt \"defaultEncoding\"\n\n-- and so on\n```\n\nImport the function you're wrapping using the FFI, using the `Foreign`\ntype for the options object:\n\n```purescript\n-- don't export this!\nforeign import createWriteStreamImpl :: FilePath -> Foreign -> Effect Unit\n```\n\nFinally, in the function you are going to export, take an `Options` value\nfor the options argument, and use the `options` function provided by this\nlibrary to convert it into a `Foreign` value, which will then have a\nsuitable representation for passing to the JavaScript API.\n\n```\ncreateWriteStream :: forall eff. FilePath -> Options CreateWriteStreamOptions -> Effect Unit\ncreateWriteStream path opts = createWriteStreamImpl path (options opts)\n```\n\nThen, users of your API can create `Options` values using the `:=`\noperator to assign values for the options they want to configure, and the\n`Monoid Options` instance to combine them. For example, as a user of this\nAPI, you might write:\n\n```purescript\nFS.createWriteStream \"file.txt\" $\n   defaultEncoding := \"utf8\" <>\n   flags := \"rw\"\n```\n\n## Increasing Type Safety\n\nYou can also use more specific types for more type safety. For example,\nit would be safer to use the existing `FileFlags` and `Encoding` types\nalready provided by the `node-fs` library. However, we cannot use them\ndirectly because they will have the wrong runtime representation. This is\nwhere the `Contravariant` instance for `Option` comes in; it can be used\nto transform an option's value to give it a suitable runtime\nrepresentation based on what the JS API is expecting. For example:\n\n```purescript\nflags :: Option CreateWriteStreamOptions FileFlags\nflags = cmap fileFlagsToNode (opt \"flags\")\n```\n\nNote that `fileFlagsToNode` takes a `FileFlags` and returns a `String`\nsuitable for passing to a Node.js API.\n","declarations":[{"children":[{"comments":null,"title":"Options","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeOptions","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]}]},{"annotation":[],"tag":"TypeWildcard","contents":null}]}},"sourceSpan":{"start":[124,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[124,58]}},{"comments":null,"title":"semigroupOptions","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]}]}},"sourceSpan":{"start":[125,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[125,67]}},{"comments":null,"title":"monoidOptions","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]}]}},"sourceSpan":{"start":[126,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[126,61]}}],"comments":null,"title":"Options","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["opt",null]]},"sourceSpan":{"start":[120,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[120,61]}},{"children":[],"comments":"Convert an `Options` value into a JavaScript object, suitable for passing\nto JavaScript APIs.\n","title":"options","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["opt",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]},null]}},"sourceSpan":{"start":[130,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[130,46]}},{"children":[],"comments":null,"title":"Option","info":{"arguments":[["opt",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]}}]}},"sourceSpan":{"start":[138,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[138,35]}},{"children":[],"comments":"Associates a value with a specific option.\n","title":"assoc","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["opt",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]}]}]},null]},null]}},"sourceSpan":{"start":[141,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[141,68]}},{"children":[],"comments":"An infix version of `assoc`.\n","title":"(:=)","info":{"declType":"alias","alias":[["Data","Options"],{"Right":{"Left":{"Ident":"assoc"}}}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[145,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[145,21]}},{"children":[],"comments":"A version of `assoc` which takes possibly absent values. `Nothing` values\nare ignored; passing `Nothing` for the second argument will result in an\nempty `Options`.\n","title":"optional","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["opt",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}}]}]},null]},null]}},"sourceSpan":{"start":[150,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[150,75]}},{"children":[],"comments":"The default way of creating `Option` values. Constructs an `Option` with\nthe given key, which passes the given value through unchanged.\n","title":"opt","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["opt",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[155,52]}},{"children":[],"comments":"Create a `tag`, by fixing an `Option` to a single value.\n","title":"tag","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["opt",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]},{"annotation":[],"tag":"TypeVar","contents":"value"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[159,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[159,70]}},{"children":[],"comments":"The default method for turning a string property key into an\n`Option`. This function simply calls `unsafeToForeign` on the value. If\nyou need some other behaviour, you can write your own function to replace\nthis one, and construct an `Option` yourself.\n","title":"defaultToOptions","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["opt",{"annotation":[],"tag":"ForAll","contents":["value",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"value"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"annotation":[],"tag":"TypeVar","contents":"opt"}]}]}]},null]},null]}},"sourceSpan":{"start":[166,1],"name":"/Users/trh/Desktop/release/purescript-options/src/Data/Options.purs","end":[166,69]}}]}],"resolvedDependencies":{"purescript-exceptions":"5.0.0","purescript-newtype":"4.0.0","purescript-effect":"3.0.0","purescript-control":"5.0.0","purescript-console":"5.0.0","purescript-either":"5.0.0","purescript-profunctor":"5.0.0","purescript-arrays":"6.0.0","purescript-maybe":"5.0.0","purescript-type-equality":"4.0.0","purescript-exists":"5.0.0","purescript-distributive":"5.0.0","purescript-unfoldable":"5.0.0","purescript-invariant":"5.0.0","purescript-lazy":"5.0.0","purescript-foreign-object":"3.0.0","purescript-foldable-traversable":"5.0.0","purescript-tailrec":"5.0.0","purescript-gen":"3.0.0","purescript-typelevel-prelude":"6.0.0","purescript-functors":"4.0.0","purescript-prelude":"5.0.0","purescript-st":"5.0.0","purescript-bifunctors":"5.0.0","purescript-nonempty":"6.0.0","purescript-contravariant":"5.0.0","purescript-assert":"5.0.0","purescript-unsafe-coerce":"5.0.0","purescript-refs":"5.0.0","purescript-integers":"5.0.0","purescript-orders":"5.0.0","purescript-const":"5.0.0","purescript-transformers":"5.0.0","purescript-numbers":"8.0.0","purescript-math":"3.0.0","purescript-enums":"5.0.0","purescript-tuples":"6.0.0","purescript-partial":"3.0.0","purescript-strings":"5.0.0","purescript-identity":"5.0.0","purescript-foreign":"6.0.0","purescript-safe-coerce":"1.0.0","purescript-lists":"6.0.0","purescript-functions":"5.0.0"},"version":"6.0.0","github":["purescript-contrib","purescript-options"],"versionTag":"v6.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Type.Function":"purescript-typelevel-prelude","Data.Functor.Flip":"purescript-functors","Foreign.Keys":"purescript-foreign","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Control.Monad.Identity.Trans":"purescript-transformers","Data.Char.Gen":"purescript-strings","Data.Monoid.Generic":"purescript-prelude","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Costar":"purescript-functors","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Functor.Compose":"purescript-functors","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Bounded.Generic":"purescript-prelude","Type.Data.Row":"purescript-prelude","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-prelude","Data.Array.ST.Iterator":"purescript-arrays","Data.Enum.Generic":"purescript-enums","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Number":"purescript-numbers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.List.Internal":"purescript-lists","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.List.Trans":"purescript-transformers","Data.Ord.Generic":"purescript-prelude","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Number.Format":"purescript-numbers","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Number.Approximate":"purescript-numbers","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Functor.Clown":"purescript-functors","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Foreign.Index":"purescript-foreign","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Functor.Product2":"purescript-functors","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor.App":"purescript-functors","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Type.RowList":"purescript-typelevel-prelude","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.Eq.Generic":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Functor.Joker":"purescript-functors","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Foreign":"purescript-foreign","Control.Monad.Error.Class":"purescript-transformers","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-prelude","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.Semiring.Generic":"purescript-prelude","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Control.Monad.Writer":"purescript-transformers","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Profunctor.Choice":"purescript-profunctor","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.14.0"}