{"compilerVersion":"0.15.10","github":["jordanmartinez","purescript-interpolate"],"moduleMap":{"Control.Applicative":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Bind":"purescript-prelude","Control.Category":"purescript-prelude","Control.Monad":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.BooleanAlgebra":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Bounded.Generic":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Eq":"purescript-prelude","Data.Eq.Generic":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Field":"purescript-prelude","Data.Function":"purescript-prelude","Data.Functor":"purescript-prelude","Data.Generic.Rep":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Monoid.Disj":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Monoid.Endo":"purescript-prelude","Data.Monoid.Generic":"purescript-prelude","Data.Monoid.Multiplicative":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Ord":"purescript-prelude","Data.Ord.Generic":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Reflectable":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semiring":"purescript-prelude","Data.Semiring.Generic":"purescript-prelude","Data.Show":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Unit":"purescript-prelude","Data.Void":"purescript-prelude","Prelude":"purescript-prelude","Record.Unsafe":"purescript-prelude","Type.Proxy":"purescript-prelude"},"modules":[{"comments":"PureScript does not have language-level support for string interpolation.\nInstead, one uses this type classes to enable similar ergonomics.\n\n```\n-- each outputs \"There are 42 apples.\"\ni \"There are \" 42 \" apples.\"\n\nlet\n  variableName = 42\nin\n  i \"There are \" variableName \" apples.\"\n```\n\n**Note:** string interpolation only works for the following types:\n- String\n- Boolean\n- Int\n- Number\n- Char\n\nThis restriction is intentional for two reasons:\n1. It avoids \"instance wars\" since orphan instances are not allowed in PureScript.\n2. It avoids unexpected `String` outputs when dealing with newtypes.\n","declarations":[{"children":[{"comments":"Use the derived function, `i`, instead of this function to do\nstring interpolation. Otherwise, you will get a compiler error\nif the first value is not a `String`:\n```\ninterp \"a\" 42 true == \"a42true\"\ni      \"a\" 42 true == \"a42true\"\n\ninterp 42 \"a\" -- does not compile!\ni      42 \"a\" -- compiles!\n```\n","info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}},"sourceSpan":{"end":[59,24],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[59,3]},"title":"interp"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Interpolate"],"Interp"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[62,15],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[61,1]},"title":"interpString"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Interpolate"],"Interp"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Interpolate"],"Interp"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[64,31],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[63,6]},"title":"interpStringFunction"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Interpolate"],"Interp"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Interpolate"],"Interp"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[66,36],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[65,6]},"title":"interpBooleanFunction"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Interpolate"],"Interp"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Interpolate"],"Interp"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[68,36],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[67,6]},"title":"interpIntFunction"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Interpolate"],"Interp"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Interpolate"],"Interp"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[70,36],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[69,6]},"title":"interpNumberFunction"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Interpolate"],"Interp"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Interpolate"],"Interp"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Char"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[72,36],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[71,6]},"title":"interpCharFunction"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","TypeError"],"Text"],"tag":"TypeConstructor"},{"annotation":[],"contents":"String interpolation only works on the following primitive values: `String`, `Boolean`, `Int`, `Number`, and `Char`. Moreover, using newtypes to get around this will fail. These restrictions are intentional. Please use a function to render your type's value into a value of one of these types before it gets passed as an argument into the `i` function.","tag":"TypeLevelString"}],"tag":"TypeApp"}],"constraintClass":[["Prim","TypeError"],"Fail"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Interpolate"],"Interp"],"tag":"TypeConstructor"},{"annotation":[],"contents":"anythingElse","tag":"TypeVar"}],"tag":"TypeApp"}},"sourceSpan":{"end":[91,80],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[83,6]},"title":"interpFailEverythingElse"}],"comments":"Enables string interpolation on values for only the following types:\n`String`, `Boolean`, `Int`, `Number`, and `Char`. Values for all other\ntypes will need to be converted into one of the above types first.\n\n**Note:** Use the derived function `i` rather than `Interp`'s `interp`\nfunction as the latter requires the first argument to be a `String`\nwhereas the former does not.\n\nExample output\n```\ni \"there are \" 52 \"apples.\" == \"there are 52 apples\"\ni 52 \" apples and \" 0 \" oranges.\" == \"52 apples and 0 oranges.\"\n\n-- `Maybe Int` must be converted into an `Int` before interpolation works.\nlet example1 maybeInt = i (fromMaybe 0 maybeInt) \" apples.\"\nexample1 Nothing == \"0 apples.\"\nexample1 (Just 4) == \"4 apples.\"\n```\n","info":{"arguments":[["a",null]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[59,24],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[48,1]},"title":"Interp"},{"children":[],"comments":"Enables string interpolation using the following syntax:\n\n```\ni \"there are \" 52 \" apples.\" == \"there are 52 apples\"\ni 52 \" apples and \" 0 \" oranges.\" == \"52 apples and 0 oranges.\"\ni true 4 42.0 'c' \"string\" == \"true442.0'c'string\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Interpolate"],"Interp"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[100,29],"name":"/tmp/tmp-2041-Wz0bTHnrjXc0/purescript-interpolate/src/Data/Interpolate.purs","start":[100,1]},"title":"i"}],"name":"Data.Interpolate","reExports":[]}],"packageMeta":{"dependencies":{"purescript-prelude":">=6.0.0 <7.0.0"},"homepage":"https://github.com/jordanmartinez/purescript-interpolate.git","license":["MIT"],"name":"purescript-interpolate","repository":{"type":"git","url":"https://github.com/jordanmartinez/purescript-interpolate.git"}},"resolvedDependencies":{"purescript-prelude":"6.0.1"},"tagTime":"2022-04-29T19:47:26+0000","uploader":"pacchettibotti","version":"4.0.0","versionTag":"v4.0.0"}