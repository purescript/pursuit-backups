{"compilerVersion":"0.15.6","github":["jamesdbrock","purescript-arraybuffer-builder"],"moduleMap":{"Control.Alt":"purescript-control","Control.Alternative":"purescript-control","Control.Applicative":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Control.Biapply":"purescript-bifunctors","Control.Bind":"purescript-prelude","Control.Category":"purescript-prelude","Control.Comonad":"purescript-control","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Control.Comonad.Env.Trans":"purescript-transformers","Control.Comonad.Store":"purescript-transformers","Control.Comonad.Store.Class":"purescript-transformers","Control.Comonad.Store.Trans":"purescript-transformers","Control.Comonad.Traced":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Control.Comonad.Traced.Trans":"purescript-transformers","Control.Comonad.Trans.Class":"purescript-transformers","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Control.Monad":"purescript-prelude","Control.Monad.Cont":"purescript-transformers","Control.Monad.Cont.Class":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Control.Monad.Error.Class":"purescript-transformers","Control.Monad.Except":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Control.Monad.Gen":"purescript-gen","Control.Monad.Gen.Class":"purescript-gen","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.Identity.Trans":"purescript-transformers","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Reader":"purescript-transformers","Control.Monad.Reader.Class":"purescript-transformers","Control.Monad.Reader.Trans":"purescript-transformers","Control.Monad.Rec.Class":"purescript-tailrec","Control.Monad.ST":"purescript-st","Control.Monad.ST.Class":"purescript-st","Control.Monad.ST.Global":"purescript-st","Control.Monad.ST.Internal":"purescript-st","Control.Monad.ST.Ref":"purescript-st","Control.Monad.ST.Uncurried":"purescript-st","Control.Monad.State":"purescript-transformers","Control.Monad.State.Class":"purescript-transformers","Control.Monad.State.Trans":"purescript-transformers","Control.Monad.Trans.Class":"purescript-transformers","Control.Monad.Writer":"purescript-transformers","Control.Monad.Writer.Class":"purescript-transformers","Control.Monad.Writer.Trans":"purescript-transformers","Control.MonadPlus":"purescript-control","Control.Plus":"purescript-control","Control.Semigroupoid":"purescript-prelude","Data.Array":"purescript-arrays","Data.Array.NonEmpty":"purescript-arrays","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.Partial":"purescript-arrays","Data.Array.ST":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.Array.ST.Partial":"purescript-arrays","Data.ArrayBuffer.ArrayBuffer":"purescript-arraybuffer","Data.ArrayBuffer.ArrayBuffer.Gen":"purescript-arraybuffer","Data.ArrayBuffer.Cast":"purescript-arraybuffer","Data.ArrayBuffer.DataView":"purescript-arraybuffer","Data.ArrayBuffer.DataView.Gen":"purescript-arraybuffer","Data.ArrayBuffer.Typed":"purescript-arraybuffer","Data.ArrayBuffer.Typed.Gen":"purescript-arraybuffer","Data.ArrayBuffer.Types":"purescript-arraybuffer-types","Data.ArrayBuffer.ValueMapping":"purescript-arraybuffer","Data.Bifoldable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.BooleanAlgebra":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Bounded.Generic":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.Comparison":"purescript-contravariant","Data.Const":"purescript-const","Data.Decidable":"purescript-contravariant","Data.Decide":"purescript-contravariant","Data.Distributive":"purescript-distributive","Data.Divide":"purescript-contravariant","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Either":"purescript-either","Data.Either.Inject":"purescript-either","Data.Either.Nested":"purescript-either","Data.Enum":"purescript-enums","Data.Enum.Gen":"purescript-enums","Data.Enum.Generic":"purescript-enums","Data.Eq":"purescript-prelude","Data.Eq.Generic":"purescript-prelude","Data.Equivalence":"purescript-contravariant","Data.EuclideanRing":"purescript-prelude","Data.Exists":"purescript-exists","Data.Field":"purescript-prelude","Data.Float32":"purescript-float32","Data.Float32.Gen":"purescript-float32","Data.Foldable":"purescript-foldable-traversable","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Function":"purescript-prelude","Data.Function.Uncurried":"purescript-functions","Data.Functor":"purescript-prelude","Data.Functor.App":"purescript-functors","Data.Functor.Clown":"purescript-functors","Data.Functor.Compose":"purescript-functors","Data.Functor.Contravariant":"purescript-contravariant","Data.Functor.Coproduct":"purescript-functors","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Functor.Costar":"purescript-functors","Data.Functor.Flip":"purescript-functors","Data.Functor.Invariant":"purescript-invariant","Data.Functor.Joker":"purescript-functors","Data.Functor.Product":"purescript-functors","Data.Functor.Product.Nested":"purescript-functors","Data.Functor.Product2":"purescript-functors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Generic.Rep":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Identity":"purescript-identity","Data.Lazy":"purescript-lazy","Data.List":"purescript-lists","Data.List.Internal":"purescript-lists","Data.List.Lazy":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.List.Lazy.Types":"purescript-lists","Data.List.NonEmpty":"purescript-lists","Data.List.Partial":"purescript-lists","Data.List.Types":"purescript-lists","Data.List.ZipList":"purescript-lists","Data.Maybe":"purescript-maybe","Data.Maybe.First":"purescript-maybe","Data.Maybe.Last":"purescript-maybe","Data.Monoid":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Monoid.Conj":"purescript-prelude","Data.Monoid.Disj":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Monoid.Endo":"purescript-prelude","Data.Monoid.Generic":"purescript-prelude","Data.Monoid.Multiplicative":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Newtype":"purescript-newtype","Data.NonEmpty":"purescript-nonempty","Data.Nullable":"purescript-nullable","Data.Number":"purescript-numbers","Data.Number.Approximate":"purescript-numbers","Data.Number.Format":"purescript-numbers","Data.Op":"purescript-contravariant","Data.Ord":"purescript-prelude","Data.Ord.Down":"purescript-orders","Data.Ord.Generic":"purescript-prelude","Data.Ord.Max":"purescript-orders","Data.Ord.Min":"purescript-orders","Data.Ordering":"purescript-prelude","Data.Predicate":"purescript-contravariant","Data.Profunctor":"purescript-profunctor","Data.Profunctor.Choice":"purescript-profunctor","Data.Profunctor.Closed":"purescript-profunctor","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Profunctor.Costrong":"purescript-profunctor","Data.Profunctor.Join":"purescript-profunctor","Data.Profunctor.Split":"purescript-profunctor","Data.Profunctor.Star":"purescript-profunctor","Data.Profunctor.Strong":"purescript-profunctor","Data.Reflectable":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Semigroup.Foldable":"purescript-foldable-traversable","Data.Semigroup.Generic":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Semiring":"purescript-prelude","Data.Semiring.Generic":"purescript-prelude","Data.Show":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable","Data.Traversable.Accum":"purescript-foldable-traversable","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Tuple":"purescript-tuples","Data.Tuple.Nested":"purescript-tuples","Data.UInt":"purescript-uint","Data.UInt.Gen":"purescript-uint","Data.Unfoldable":"purescript-unfoldable","Data.Unfoldable1":"purescript-unfoldable","Data.Unit":"purescript-prelude","Data.Void":"purescript-prelude","Effect":"purescript-effect","Effect.Class":"purescript-effect","Effect.Exception":"purescript-exceptions","Effect.Exception.Unsafe":"purescript-exceptions","Effect.Ref":"purescript-refs","Effect.Uncurried":"purescript-effect","Effect.Unsafe":"purescript-effect","Partial":"purescript-partial","Partial.Unsafe":"purescript-partial","Prelude":"purescript-prelude","Record.Unsafe":"purescript-prelude","Safe.Coerce":"purescript-safe-coerce","Type.Equality":"purescript-type-equality","Type.Proxy":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce"},"modules":[{"comments":"This module provides a `Builder` monoid and a `PutM` monad\nfor serializing `Data.ArrayBuffer.Types.ArrayBuffer`s.\nSee the package README for usage examples.\n\nWriting to an `ArrayBuffer` is an `Effect`ful activity, so most\nfunctions in this module must be run in a `MonadEffect` context.\n\nFor other operations for working with `ArrayBuffer`, see\nmodule\n[`Data.ArrayBuffer.ArrayBuffer`](https://pursuit.purescript.org/packages/purescript-arraybuffer/docs/Data.ArrayBuffer.ArrayBuffer)\nin package __arraybuffer__.\n","declarations":[{"children":[],"comments":"The `PutM` monad is a `WriterT Builder` transformer monad which\ngives us do-notation for the `Builder` monoid. The base monad must be\na `MonadEffect`.\n\nTo append `Builder`s in this monad call `tell`, or any of the `put*`\nfunctions in this module.\n","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Control","Monad","Writer","Trans"],"WriterT"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[56,28],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[56,1]},"title":"PutM"},{"children":[],"comments":"The `PutM` type reified to `Effect`, in other words `WriterT Builder Effect`.\n","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[59,23],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[59,1]},"title":"Put"},{"children":[],"comments":"Build an `ArrayBuffer` with do-notation in any `MonadEffect`. *O(n)* Stack-safe.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[62,82],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[62,1]},"title":"execPutM"},{"children":[],"comments":"Build an `ArrayBuffer` with do-notation in `Effect`. *O(n)* Stack-safe.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"Put"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[66,42],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[66,1]},"title":"execPut"},{"children":[],"comments":"Build up a sub-`Builder` without `tell`ing it to the `Writer` yet.\n\nOne case where we might want to call a `subBuilder` is when\nserializing length-prefixed messages in some protocol. In that case,\nwe must serialize the message first, calculate the message length,\nappend the message length, and then append the message.\n\nIn a `PutM` monad do-block, we can\n\n```\ndo\n  messageBuilder <- subBuilder $ do\n    putField1\n    putField2\n\n  putInt32be $ length messageBuilder\n  tell messageBuilder\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[87,65],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[87,1]},"title":"subBuilder"},{"children":[],"comments":"Append an `ArrayBuffer` to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[91,66],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[91,1]},"title":"putArrayBuffer"},{"children":[],"comments":"Append a `DataView` to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"DataView"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[95,60],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[95,1]},"title":"putDataView"},{"children":[],"comments":"Append either an `ArrayBuffer` or a `DataView` to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[99,60],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[99,1]},"title":"putDataBuff"},{"children":[],"comments":"Append an 8-bit unsigned integer (byte) to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[103,59],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[103,1]},"title":"putUint8"},{"children":[],"comments":"Append an 8-bit two’s-complement signed integer (char) to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[107,57],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[107,1]},"title":"putInt8"},{"children":[],"comments":"Append a 16-bit big-endian unsigned integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[111,62],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[111,1]},"title":"putUint16be"},{"children":[],"comments":"Append a 16-bit little-endian unsigned integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[115,62],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[115,1]},"title":"putUint16le"},{"children":[],"comments":"Append a 16-bit big-endian two’s-complement signed integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[119,60],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[119,1]},"title":"putInt16be"},{"children":[],"comments":"Append a 16-bit little-endian two’s-complement signed integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[123,60],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[123,1]},"title":"putInt16le"},{"children":[],"comments":"Append a 32-bit big-endian unsigned integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[127,62],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[127,1]},"title":"putUint32be"},{"children":[],"comments":"Append a 32-bit little-endian unsigned integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[131,62],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[131,1]},"title":"putUint32le"},{"children":[],"comments":"Append a 32-bit big-endian two’s-complement signed integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[135,60],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[135,1]},"title":"putInt32be"},{"children":[],"comments":"Append a 32-bit little-endian two’s-complement signed integer to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[139,60],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[139,1]},"title":"putInt32le"},{"children":[],"comments":"Append a 32-bit big-endian IEEE single-precision float to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Float32"],"Float32"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[143,66],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[143,1]},"title":"putFloat32be"},{"children":[],"comments":"Append a 32-bit little-endian IEEE single-precision float to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Float32"],"Float32"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[147,66],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[147,1]},"title":"putFloat32le"},{"children":[],"comments":"Append a 64-bit big-endian IEEE double-precision float to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[151,65],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[151,1]},"title":"putFloat64be"},{"children":[],"comments":"Append a 64-bit little-endian IEEE double-precision float to the builder.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder"],"PutM"],"tag":"TypeConstructor"},{"annotation":[],"contents":"m","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[155,65],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","start":[155,1]},"title":"putFloat64le"}],"name":"Data.ArrayBuffer.Builder","reExports":[{"declarations":[{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[127,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[127,3]},"title":"Buff"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"DataView"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[128,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[128,3]},"title":"View"}],"comments":"For distinguishing between `ArrayBuffer` and `DataView`.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[128,18],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[126,1]},"title":"DataBuff"},{"children":[{"comments":"### Left-associative `<>>` append operator\n\n__TL;DR__ You probably don't want to use the `Builder` monoid directly\nin your code, it’s better to use the `PutM` monad with do-notation instead.\n\nThe `Builder` monoid in this library is efficient when we `snoc` single\nitems onto the end of it, or when we only `cons` single items to the\nbeginning, but it can be less efficient when we are mixing `cons` and\n`snoc`.\nMost of the time we want to `snoc`, but the `Semigroup` append\noperator `<>` is right-associative,\nwhich means it chains like `cons`.\n\nTo solve this, we provide an operator `<>>` for appending `Builders`.\n`<>>` is exactly the same as `<>`, but left-associative,\nwhich means it chains like `snoc`.\n\nThis __only matters__ when we're chaining together three\nor more `Builder`s in a single associative expression.\nInstead of\n```\nbuilder₁ <> builder₂ <> builder₃\n```\nwe should always prefer to\nwrite\n```\nbuilder₁ <>> builder₂ <>> builder₃\n```\n so that we get the efficient\n`snoc`ing of `Builder`s.\n\nIf we build our `ArrayBuffer`s with the `PutM` monad instead of appending by\nusing the `Semigroup` instance of `Builder`, then we always get the efficient\n`snoc` case.\n\n","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Semigroup"],"Semigroup"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[194,54],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[187,1]},"title":"semigroupBuilder"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Monoid"],"Monoid"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[203,16],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[202,1]},"title":"monoidBuilder"}],"comments":"Monoidal builder for `ArrayBuffer`s.\n\nWe can add two types of things to the `Builder`:\n1. `ArrayBuffer`\n2. `DataView`\n\nWe might prefer\nto add a `DataView` to a `Builder` when we’re adding a large slice of data\nfrom some other `ArrayBuffer`, so that we don’t\nneed an extra intermediate copy of the slice.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[150,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[148,1]},"title":"Builder"},{"children":[],"comments":"View the contents of `DataBuff` as a `DataView`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"DataView"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[134,31],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[134,1]},"title":"toView"},{"children":[],"comments":"Calculate the total byte length of the `Builder`, without actually\nbuilding it yet. *O(n)*\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ByteLength"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[233,32],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[233,1]},"title":"length"},{"children":[],"comments":null,"info":{"alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"declType":"alias","fixity":{"associativity":"infixl","precedence":5}},"kind":null,"sourceSpan":{"end":[200,23],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[200,1]},"title":"(<>>)"}],"moduleName":{"item":["Data","ArrayBuffer","Builder","Internal"],"package":null}}]},{"comments":"Internal module.\n\nYou probably don’t want to import anything from this module.\n\n## Implementation Details\n\nWe want our `Builder` to be a data structure with\n* *O(1)* monoid append\n* *O(n)* fold\n\nOur `Builder` implementation is an unbalanced binary tree.\n\nFor monoid `append`, what we actually get is *O(1)* when either the\nleft or right tree is a singleton. If that's not true, then in the\nunlikely worst case `append` might be *O(n)*.\n\n`Builder` is optimized for what we consider to be normal usage, that is,\n`snoc`ing singleton elements to the end of the `Builder`.\n\nIf a Builder is built entirely by `snoc`ing, it will look like a\nleft-only binary tree, a.k.a. a linked list.\n\n```\n           ④\n          ╱\n         ③\n        ╱\n       ②\n      ╱\n     ①\n```\n\nIf two of these `snoc`-built trees are `append`ed, then the new tree\nwill look like\n\n```\n           ④\n          ╱  ╲\n         ③  ⑧\n        ╱   ╱\n       ②  ⑦\n      ╱   ╱\n     ①  ⑥\n        ╱\n       ⑤\n```\n\nThis is all similar to\n[__bytestring-tree-builder__](https://hackage.haskell.org/package/bytestring-tree-builder)\n, except that the\n[`Tree`](https://hackage.haskell.org/package/bytestring-tree-builder-0.2.7.3/docs/src/ByteString.TreeBuilder.Tree.html#Tree)\nstructure in __bytestring-tree-builder__ only carries values in its\nleaves, which is how it achieves consistent *O(1)* appending, at the cost of\na higher coefficient time factor on the fold.\n\nWe hope that this implementation is fairly fast, since it is similar to\n__bytestring-tree-builder__\nwhich “according to the benchmarks … beats all the alternatives.”\nHowever, we\nhaven’t chosen this implementation because it’s fast, we've chosen\nthis implementation because it’s simple.\nIf someone wants to create a fast PureScript `ArrayBuffer` serialization\nlibrary, then they can benchmark against this one to prove that the new\none is fast.\n\nOne relatively cheap and simple performance improvement for this library would be to\nremove the `Null` constructor of `Builder` and instead use Javascript nulls?\n\nIn the longer term, it might make sense to try to change the `Builder` so\nthat it works like the\nhttps://hackage.haskell.org/package/bytestring/docs/Data-ByteString-Builder.html .\nThat’s the approach taken by\nhttps://pursuit.purescript.org/packages/purescript-dynamic-buffers .\n\nHere are some benchmarks of different Haskell ByteString builders\nhttps://github.com/haskell-perf/strict-bytestring-builders\n\nWe've tried to design the API for this library with minimal assumptions,\nso that if we want to change the `Builder` implementation later then we can.\n\n","declarations":[{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[149,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[149,3]},"title":"Node"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[150,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[150,3]},"title":"Null"},{"comments":"### Left-associative `<>>` append operator\n\n__TL;DR__ You probably don't want to use the `Builder` monoid directly\nin your code, it’s better to use the `PutM` monad with do-notation instead.\n\nThe `Builder` monoid in this library is efficient when we `snoc` single\nitems onto the end of it, or when we only `cons` single items to the\nbeginning, but it can be less efficient when we are mixing `cons` and\n`snoc`.\nMost of the time we want to `snoc`, but the `Semigroup` append\noperator `<>` is right-associative,\nwhich means it chains like `cons`.\n\nTo solve this, we provide an operator `<>>` for appending `Builders`.\n`<>>` is exactly the same as `<>`, but left-associative,\nwhich means it chains like `snoc`.\n\nThis __only matters__ when we're chaining together three\nor more `Builder`s in a single associative expression.\nInstead of\n```\nbuilder₁ <> builder₂ <> builder₃\n```\nwe should always prefer to\nwrite\n```\nbuilder₁ <>> builder₂ <>> builder₃\n```\n so that we get the efficient\n`snoc`ing of `Builder`s.\n\nIf we build our `ArrayBuffer`s with the `PutM` monad instead of appending by\nusing the `Semigroup` instance of `Builder`, then we always get the efficient\n`snoc` case.\n\n","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Semigroup"],"Semigroup"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[194,54],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[187,1]},"title":"semigroupBuilder"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Monoid"],"Monoid"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[203,16],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[202,1]},"title":"monoidBuilder"}],"comments":"Monoidal builder for `ArrayBuffer`s.\n\nWe can add two types of things to the `Builder`:\n1. `ArrayBuffer`\n2. `DataView`\n\nWe might prefer\nto add a `DataView` to a `Builder` when we’re adding a large slice of data\nfrom some other `ArrayBuffer`, so that we don’t\nneed an extra intermediate copy of the slice.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[150,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[148,1]},"title":"Builder"},{"children":[],"comments":null,"info":{"alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"declType":"alias","fixity":{"associativity":"infixl","precedence":5}},"kind":null,"sourceSpan":{"end":[200,23],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[200,1]},"title":"(<>>)"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[127,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[127,3]},"title":"Buff"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"DataView"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[128,9],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[128,3]},"title":"View"}],"comments":"For distinguishing between `ArrayBuffer` and `DataView`.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[128,18],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[126,1]},"title":"DataBuff"},{"children":[],"comments":"View the contents of `DataBuff` as a `DataView`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"DataView"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[134,31],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[134,1]},"title":"toView"},{"children":[],"comments":"Build a single `ArrayBuffer` from a `Builder`. *O(n)*\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[248,81],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[248,1]},"title":"execBuilder"},{"children":[],"comments":"Calculate the total byte length of the `Builder`, without actually\nbuilding it yet. *O(n)*\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ByteLength"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[233,32],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[233,1]},"title":"length"},{"children":[],"comments":"Stack-safe `foldl` over a `Builder`. *O(n)*\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[206,61],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[206,1]},"title":"foldl"},{"children":[],"comments":"Stack-safe `foldM` over a `Builder`. *O(n)*.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[210,81],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[210,1]},"title":"foldM"},{"children":[],"comments":"Construct a `Builder` with a single `DataBuff`. *O(1)*\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[228,33],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[228,1]},"title":"singleton"},{"children":[],"comments":"Prepend a `DataBuff` to the beginning of the `Builder`. *O(1)*\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[240,39],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[240,1]},"title":"cons"},{"children":[],"comments":"Append a `DataBuff` to the end of the `Builder`. *O(1)*\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[244,39],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[244,1]},"title":"snoc"},{"children":[],"comments":"Serialize an 8-bit unsigned integer (byte) into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[273,66],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[273,1]},"title":"encodeUint8"},{"children":[],"comments":"Serialize an 8-bit two’s-complement signed integer (char) into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[280,64],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[280,1]},"title":"encodeInt8"},{"children":[],"comments":"Serialize a 16-bit big-endian unsigned integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[287,69],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[287,1]},"title":"encodeUint16be"},{"children":[],"comments":"Serialize a 16-bit little-endian unsigned integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[294,69],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[294,1]},"title":"encodeUint16le"},{"children":[],"comments":"Serialize a 16-bit big-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[301,67],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[301,1]},"title":"encodeInt16be"},{"children":[],"comments":"Serialize a 16-bit little-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[308,67],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[308,1]},"title":"encodeInt16le"},{"children":[],"comments":"Serialize a 32-bit big-endian unsigned integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[315,69],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[315,1]},"title":"encodeUint32be"},{"children":[],"comments":"Serialize a 32-bit little-endian unsigned integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","UInt"],"UInt"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[322,69],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[322,1]},"title":"encodeUint32le"},{"children":[],"comments":"Serialize a 32-bit big-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[329,67],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[329,1]},"title":"encodeInt32be"},{"children":[],"comments":"Serialize a 32-bit little-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[336,67],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[336,1]},"title":"encodeInt32le"},{"children":[],"comments":"Serialize a 32-bit big-endian IEEE single-precision float into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Float32"],"Float32"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[343,73],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[343,1]},"title":"encodeFloat32be"},{"children":[],"comments":"Serialize a 32-bit little-endian IEEE single-precision float into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Float32"],"Float32"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[350,73],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[350,1]},"title":"encodeFloat32le"},{"children":[],"comments":"Serialize a 64-bit big-endian IEEE double-precision float into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[357,72],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[357,1]},"title":"encodeFloat64be"},{"children":[],"comments":"Serialize a 64-bit little-endian IEEE double-precision float into a new `ArrayBuffer`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[364,72],"name":"/tmp/nix-shell.G8dWxM/tmp-40814-Z03Awi0bhMqd/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","start":[364,1]},"title":"encodeFloat64le"}],"name":"Data.ArrayBuffer.Builder.Internal","reExports":[]}],"packageMeta":{"dependencies":{"purescript-arraybuffer":">=13.1.1 <14.0.0","purescript-arraybuffer-types":">=3.0.2 <4.0.0","purescript-effect":">=4.0.0 <5.0.0","purescript-float32":">=2.0.0 <3.0.0","purescript-identity":">=6.0.0 <7.0.0","purescript-lists":">=7.0.0 <8.0.0","purescript-maybe":">=6.0.0 <7.0.0","purescript-newtype":">=5.0.0 <6.0.0","purescript-prelude":">=6.0.1 <7.0.0","purescript-tailrec":">=6.1.0 <7.0.0","purescript-transformers":">=6.0.0 <7.0.0","purescript-uint":">=7.0.0 <8.0.0"},"homepage":"https://github.com/jamesdbrock/purescript-arraybuffer-builder.git","license":["MIT"],"name":"purescript-arraybuffer-builder","repository":{"type":"git","url":"https://github.com/jamesdbrock/purescript-arraybuffer-builder.git"}},"resolvedDependencies":{"purescript-arraybuffer":"13.1.1","purescript-arraybuffer-types":"3.0.2","purescript-arrays":"7.1.0","purescript-bifunctors":"6.0.0","purescript-const":"6.0.0","purescript-contravariant":"6.0.0","purescript-control":"6.0.0","purescript-distributive":"6.0.0","purescript-effect":"4.0.0","purescript-either":"6.1.0","purescript-enums":"6.0.1","purescript-exceptions":"6.0.0","purescript-exists":"6.0.0","purescript-float32":"2.0.0","purescript-foldable-traversable":"6.0.0","purescript-functions":"6.0.0","purescript-functors":"5.0.0","purescript-gen":"4.0.0","purescript-identity":"6.0.0","purescript-invariant":"6.0.0","purescript-lazy":"6.0.0","purescript-lists":"7.0.0","purescript-maybe":"6.0.0","purescript-newtype":"5.0.0","purescript-nonempty":"7.0.0","purescript-nullable":"6.0.0","purescript-numbers":"9.0.0","purescript-orders":"6.0.0","purescript-partial":"4.0.0","purescript-prelude":"6.0.1","purescript-profunctor":"6.0.0","purescript-refs":"6.0.0","purescript-safe-coerce":"2.0.0","purescript-st":"6.2.0","purescript-tailrec":"6.1.0","purescript-transformers":"6.0.0","purescript-tuples":"7.0.0","purescript-type-equality":"4.0.1","purescript-uint":"7.0.0","purescript-unfoldable":"6.0.0","purescript-unsafe-coerce":"6.0.0"},"tagTime":"2022-12-10T09:57:39+0000","uploader":"pacchettibotti","version":"3.1.0","versionTag":"v3.1.0"}