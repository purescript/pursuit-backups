{"uploader":"jamesdbrock","packageMeta":{"repository":{"url":"https://github.com/jamesdbrock/purescript-arraybuffer-builder","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-newtype":"^v5.0.0","purescript-effect":"^v4.0.0","purescript-arraybuffer-types":"^v3.0.2","purescript-maybe":"^v6.0.0","purescript-uint":"^v7.0.0","purescript-float32":"^v2.0.0","purescript-tailrec":"^v6.0.0","purescript-prelude":"^v6.0.0","purescript-transformers":"^v6.0.0","purescript-identity":"^v6.0.0","purescript-lists":"^v7.0.0","purescript-arraybuffer":"^v13.0.0"},"name":"purescript-arraybuffer-builder","license":["MIT"]},"tagTime":"2022-05-03T16:39:19+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Data","ArrayBuffer","Builder","Internal"]},"declarations":[{"kind":null,"children":[{"comments":null,"title":"Buff","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[128,3],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[128,9]}},{"comments":null,"title":"View","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"DataView"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[129,3],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[129,9]}}],"comments":"For distinguishing between `ArrayBuffer` and `DataView`.\n","title":"DataBuff","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[127,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[129,18]}},{"kind":null,"children":[{"comments":"### Left-associative `<>>` append operator\n\n__TL;DR__ You probably don't want to use the `Builder` monoid directly\nin your code, it’s better to use the `PutM` monad with do-notation instead.\n\nThe `Builder` monoid in this library is efficient when we `snoc` single\nitems onto the end of it, or when we only `cons` single items to the\nbeginning, but it can be less efficient when we are mixing `cons` and\n`snoc`.\nMost of the time we want to `snoc`, but the `Semigroup` append\noperator `<>` is right-associative,\nwhich means it chains like `cons`.\n\nTo solve this, we provide an operator `<>>` for appending `Builders`.\n`<>>` is exactly the same as `<>`, but left-associative,\nwhich means it chains like `snoc`.\n\nThis __only matters__ when we're chaining together three\nor more `Builder`s in a single associative expression.\nInstead of\n```\nbuilder₁ <> builder₂ <> builder₃\n```\nwe should always prefer to\nwrite\n```\nbuilder₁ <>> builder₂ <>> builder₃\n```\n so that we get the efficient\n`snoc`ing of `Builder`s.\n\nIf we build our `ArrayBuffer`s with the `PutM` monad instead of appending by\nusing the `Semigroup` instance of `Builder`, then we always get the efficient\n`snoc` case.\n\n","title":"semigroupBuilder","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}},"sourceSpan":{"start":[188,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[195,54]}},{"comments":null,"title":"monoidBuilder","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}},"sourceSpan":{"start":[202,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[203,16]}}],"comments":"Monoidal builder for `ArrayBuffer`s.\n\nWe can add two types of things to the `Builder`:\n1. `ArrayBuffer`\n2. `DataView`\n\nWe might prefer\nto add a `DataView` to a `Builder` when we’re adding a large slice of data\nfrom some other `ArrayBuffer`, so that we don’t\nneed an extra intermediate copy of the slice.\n","title":"Builder","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[149,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[151,9]}},{"kind":null,"children":[],"comments":"View the contents of `DataBuff` as a `DataView`.\n","title":"toView","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"DataView"]}]}},"sourceSpan":{"start":[135,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[135,31]}},{"kind":null,"children":[],"comments":"Calculate the total byte length of the `Builder`, without actually\nbuilding it yet. *O(n)*\n","title":"length","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ByteLength"]}]}},"sourceSpan":{"start":[233,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[233,32]}},{"kind":null,"children":[],"comments":null,"title":"(<>>)","info":{"declType":"alias","alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[200,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[200,23]}}]}],"name":"Data.ArrayBuffer.Builder","comments":"This module provides a `Builder` monoid and a `PutM` monad\nfor serializing `Data.ArrayBuffer.Types.ArrayBuffer`s.\nSee the package README for usage examples.\n\nWriting to an `ArrayBuffer` is an `Effect`ful activity, so most\nfunctions in this module must be run in a `MonadEffect` context.\n\nFor operations for working with `ArrayBuffer`, see\nmodule\n[`Data.ArrayBuffer.ArrayBuffer`](https://pursuit.purescript.org/packages/purescript-arraybuffer/docs/Data.ArrayBuffer.ArrayBuffer)\nin package __purescript-arraybuffer__.\n","declarations":[{"kind":{"kind":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]},"keyword":"type"},"children":[],"comments":"The `PutM` monad is a `WriterT Builder` transformer monad which\ngives us do-notation for the `Builder` monoid. The base monad must be\na `MonadEffect`.\n\nTo append `Builder`s in this monad call `tell`, or any of the `put*`\nfunctions in this module.\n","title":"PutM","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Monad","Writer","Trans"],"WriterT"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}},"sourceSpan":{"start":[57,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[57,28]}},{"kind":null,"children":[],"comments":"The `PutM` type reified to `Effect`, in other words `WriterT Builder Effect`.\n","title":"Put","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[60,23]}},{"kind":null,"children":[],"comments":"Build an `ArrayBuffer` with do-notation in any `MonadEffect`. *O(n)* Stack-safe.\n","title":"execPutM","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]}]},null]}},"sourceSpan":{"start":[63,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[63,82]}},{"kind":null,"children":[],"comments":"Build an `ArrayBuffer` with do-notation in `Effect`. *O(n)* Stack-safe.\n","title":"execPut","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"Put"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}},"sourceSpan":{"start":[67,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[67,42]}},{"kind":null,"children":[],"comments":"Build up a sub-`Builder` without `tell`ing it to the `Writer` yet.\n\nOne case where we might want to call a `subBuilder` is when\nserializing length-prefixed messages in some protocol. In that case,\nwe must serialize the message first, calculate the message length,\nappend the message length, and then append the message.\n\nIn a `PutM` monad do-block, we can\n\n```\ndo\n  messageBuilder <- subBuilder $ do\n    putField1\n    putField2\n\n  putInt32be $ length messageBuilder\n  tell messageBuilder\n```\n","title":"subBuilder","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}]}]},null]}},"sourceSpan":{"start":[88,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[88,65]}},{"kind":null,"children":[],"comments":"Append an `ArrayBuffer` to the builder.\n","title":"putArrayBuffer","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[92,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[92,66]}},{"kind":null,"children":[],"comments":"Append a `DataView` to the builder.\n","title":"putDataView","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"DataView"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[96,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[96,60]}},{"kind":null,"children":[],"comments":"Append either an `ArrayBuffer` or a `DataView` to the builder.\n","title":"putDataBuff","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[100,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[100,60]}},{"kind":null,"children":[],"comments":"Append an 8-bit unsigned integer (byte) to the builder.\n","title":"putUint8","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[104,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[104,59]}},{"kind":null,"children":[],"comments":"Append an 8-bit two’s-complement signed integer (char) to the builder.\n","title":"putInt8","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[108,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[108,57]}},{"kind":null,"children":[],"comments":"Append a 16-bit big-endian unsigned integer to the builder.\n","title":"putUint16be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[112,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[112,62]}},{"kind":null,"children":[],"comments":"Append a 16-bit little-endian unsigned integer to the builder.\n","title":"putUint16le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[116,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[116,62]}},{"kind":null,"children":[],"comments":"Append a 16-bit big-endian two’s-complement signed integer to the builder.\n","title":"putInt16be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[120,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[120,60]}},{"kind":null,"children":[],"comments":"Append a 16-bit little-endian two’s-complement signed integer to the builder.\n","title":"putInt16le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[124,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[124,60]}},{"kind":null,"children":[],"comments":"Append a 32-bit big-endian unsigned integer to the builder.\n","title":"putUint32be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[128,62]}},{"kind":null,"children":[],"comments":"Append a 32-bit little-endian unsigned integer to the builder.\n","title":"putUint32le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[132,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[132,62]}},{"kind":null,"children":[],"comments":"Append a 32-bit big-endian two’s-complement signed integer to the builder.\n","title":"putInt32be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[136,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[136,60]}},{"kind":null,"children":[],"comments":"Append a 32-bit little-endian two’s-complement signed integer to the builder.\n","title":"putInt32le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[140,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[140,60]}},{"kind":null,"children":[],"comments":"Append a 32-bit big-endian IEEE single-precision float to the builder.\n","title":"putFloat32be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Float32"],"Float32"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[144,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[144,66]}},{"kind":null,"children":[],"comments":"Append a 32-bit little-endian IEEE single-precision float to the builder.\n","title":"putFloat32le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Float32"],"Float32"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[148,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[148,66]}},{"kind":null,"children":[],"comments":"Append a 64-bit big-endian IEEE double-precision float to the builder.\n","title":"putFloat64be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[152,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[152,65]}},{"kind":null,"children":[],"comments":"Append a 64-bit little-endian IEEE double-precision float to the builder.\n","title":"putFloat64le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder"],"PutM"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[156,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Builder.purs","end":[156,65]}}]},{"reExports":[],"name":"Data.ArrayBuffer.Builder.Internal","comments":"Internal module.\n\nYou probably don’t want to import anything from this module.\n\n## Implementation Details\n\nWe want our `Builder` to be a data structure with\n* *O(1)* monoid append\n* *O(n)* fold\n\nOur `Builder` implementation is an unbalanced binary tree.\n\nFor monoid `append`, what we actually get is *O(1)* when either the\nleft or right tree is a singleton. If that's not true, then in the\nunlikely worst case `append` might be *O(n)*.\n\n`Builder` is optimized for what we consider to be normal usage, that is,\n`snoc`ing singleton elements to the end of the `Builder`.\n\nIf a Builder is built entirely by `snoc`ing, it will look like a\nleft-only binary tree, a.k.a. a linked list.\n\n```\n           ④\n          ╱\n         ③\n        ╱\n       ②\n      ╱\n     ①\n```\n\nIf two of these `snoc`-built trees are `append`ed, then the new tree\nwill look like\n\n```\n           ④\n          ╱  ╲\n         ③  ⑧\n        ╱   ╱\n       ②  ⑦\n      ╱   ╱\n     ①  ⑥\n        ╱\n       ⑤\n```\n\nThis is all similar to\n[__bytestring-tree-builder__](https://hackage.haskell.org/package/bytestring-tree-builder)\n, except that the\n[`Tree`](https://hackage.haskell.org/package/bytestring-tree-builder-0.2.7.3/docs/src/ByteString.TreeBuilder.Tree.html#Tree)\nstructure in __bytestring-tree-builder__ only carries values in its\nleaves, which is how it achieves consistent *O(1)* appending, at the cost of\na higher coefficient time factor on the fold.\n\nWe hope that this implementation is fairly fast, since it is similar to\n__bytestring-tree-builder__\nwhich “according to the benchmarks … beats all the alternatives.”\nHowever, we\nhaven’t chosen this implementation because it’s fast, we've chosen\nthis implementation because it’s simple.\nIf someone wants to create a fast PureScript `ArrayBuffer` serialization\nlibrary, then they can benchmark against this one to prove that the new\none is fast.\n\nOne relatively cheap and simple performance improvement for this library would be to\nremove the `Null` constructor of `Builder` and instead use Javascript nulls?\n\nIn the longer term, it might make sense to try to change the `Builder` so\nthat it works like the\nhttps://hackage.haskell.org/package/bytestring/docs/Data-ByteString-Builder.html .\nThat’s the approach taken by\nhttps://pursuit.purescript.org/packages/purescript-dynamic-buffers .\n\nHere are some benchmarks of different Haskell ByteString builders\nhttps://github.com/haskell-perf/strict-bytestring-builders\n\nWe've tried to design the API for this library with minimal assumptions,\nso that if we want to change the `Builder` implementation later then we can.\n\n","declarations":[{"kind":null,"children":[{"comments":null,"title":"Node","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[150,3],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[150,9]}},{"comments":null,"title":"Null","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"start":[151,3],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[151,9]}},{"comments":"### Left-associative `<>>` append operator\n\n__TL;DR__ You probably don't want to use the `Builder` monoid directly\nin your code, it’s better to use the `PutM` monad with do-notation instead.\n\nThe `Builder` monoid in this library is efficient when we `snoc` single\nitems onto the end of it, or when we only `cons` single items to the\nbeginning, but it can be less efficient when we are mixing `cons` and\n`snoc`.\nMost of the time we want to `snoc`, but the `Semigroup` append\noperator `<>` is right-associative,\nwhich means it chains like `cons`.\n\nTo solve this, we provide an operator `<>>` for appending `Builders`.\n`<>>` is exactly the same as `<>`, but left-associative,\nwhich means it chains like `snoc`.\n\nThis __only matters__ when we're chaining together three\nor more `Builder`s in a single associative expression.\nInstead of\n```\nbuilder₁ <> builder₂ <> builder₃\n```\nwe should always prefer to\nwrite\n```\nbuilder₁ <>> builder₂ <>> builder₃\n```\n so that we get the efficient\n`snoc`ing of `Builder`s.\n\nIf we build our `ArrayBuffer`s with the `PutM` monad instead of appending by\nusing the `Semigroup` instance of `Builder`, then we always get the efficient\n`snoc` case.\n\n","title":"semigroupBuilder","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}},"sourceSpan":{"start":[188,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[195,54]}},{"comments":null,"title":"monoidBuilder","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}},"sourceSpan":{"start":[202,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[203,16]}}],"comments":"Monoidal builder for `ArrayBuffer`s.\n\nWe can add two types of things to the `Builder`:\n1. `ArrayBuffer`\n2. `DataView`\n\nWe might prefer\nto add a `DataView` to a `Builder` when we’re adding a large slice of data\nfrom some other `ArrayBuffer`, so that we don’t\nneed an extra intermediate copy of the slice.\n","title":"Builder","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[149,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[151,9]}},{"kind":null,"children":[],"comments":null,"title":"(<>>)","info":{"declType":"alias","alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[200,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[200,23]}},{"kind":null,"children":[{"comments":null,"title":"Buff","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[128,3],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[128,9]}},{"comments":null,"title":"View","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"DataView"]}],"declType":"dataConstructor"},"sourceSpan":{"start":[129,3],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[129,9]}}],"comments":"For distinguishing between `ArrayBuffer` and `DataView`.\n","title":"DataBuff","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[127,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[129,18]}},{"kind":null,"children":[],"comments":"View the contents of `DataBuff` as a `DataView`.\n","title":"toView","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"DataView"]}]}},"sourceSpan":{"start":[135,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[135,31]}},{"kind":null,"children":[],"comments":"Build a single `ArrayBuffer` from a `Builder`. *O(n)*\n","title":"execBuilder","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]}]},null]}},"sourceSpan":{"start":[248,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[248,81]}},{"kind":null,"children":[],"comments":"Calculate the total byte length of the `Builder`, without actually\nbuilding it yet. *O(n)*\n","title":"length","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ByteLength"]}]}},"sourceSpan":{"start":[233,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[233,32]}},{"kind":null,"children":[],"comments":"Stack-safe `foldl` over a `Builder`. *O(n)*\n","title":"foldl","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[206,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[206,61]}},{"kind":null,"children":[],"comments":"Stack-safe `foldM` over a `Builder`. *O(n)*.\n","title":"foldM","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[210,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[210,81]}},{"kind":null,"children":[],"comments":"Construct a `Builder` with a single `DataBuff`. *O(1)*\n","title":"singleton","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}},"sourceSpan":{"start":[228,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[228,33]}},{"kind":null,"children":[],"comments":"Prepend a `DataBuff` to the beginning of the `Builder`. *O(1)*\n","title":"cons","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}]}},"sourceSpan":{"start":[240,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[240,39]}},{"kind":null,"children":[],"comments":"Append a `DataBuff` to the end of the `Builder`. *O(1)*\n","title":"snoc","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"DataBuff"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Builder","Internal"],"Builder"]}]}]}},"sourceSpan":{"start":[244,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[244,39]}},{"kind":null,"children":[],"comments":"Serialize an 8-bit unsigned integer (byte) into a new `ArrayBuffer`.\n","title":"encodeUint8","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[271,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[271,66]}},{"kind":null,"children":[],"comments":"Serialize an 8-bit two’s-complement signed integer (char) into a new `ArrayBuffer`.\n","title":"encodeInt8","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[278,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[278,64]}},{"kind":null,"children":[],"comments":"Serialize a 16-bit big-endian unsigned integer into a new `ArrayBuffer`.\n","title":"encodeUint16be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[285,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[285,69]}},{"kind":null,"children":[],"comments":"Serialize a 16-bit little-endian unsigned integer into a new `ArrayBuffer`.\n","title":"encodeUint16le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[292,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[292,69]}},{"kind":null,"children":[],"comments":"Serialize a 16-bit big-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","title":"encodeInt16be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[299,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[299,67]}},{"kind":null,"children":[],"comments":"Serialize a 16-bit little-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","title":"encodeInt16le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[306,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[306,67]}},{"kind":null,"children":[],"comments":"Serialize a 32-bit big-endian unsigned integer into a new `ArrayBuffer`.\n","title":"encodeUint32be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[313,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[313,69]}},{"kind":null,"children":[],"comments":"Serialize a 32-bit little-endian unsigned integer into a new `ArrayBuffer`.\n","title":"encodeUint32le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[320,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[320,69]}},{"kind":null,"children":[],"comments":"Serialize a 32-bit big-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","title":"encodeInt32be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[327,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[327,67]}},{"kind":null,"children":[],"comments":"Serialize a 32-bit little-endian two’s-complement signed integer into a new `ArrayBuffer`.\n","title":"encodeInt32le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[334,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[334,67]}},{"kind":null,"children":[],"comments":"Serialize a 32-bit big-endian IEEE single-precision float into a new `ArrayBuffer`.\n","title":"encodeFloat32be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Float32"],"Float32"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[341,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[341,73]}},{"kind":null,"children":[],"comments":"Serialize a 32-bit little-endian IEEE single-precision float into a new `ArrayBuffer`.\n","title":"encodeFloat32le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Float32"],"Float32"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[348,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[348,73]}},{"kind":null,"children":[],"comments":"Serialize a 64-bit big-endian IEEE double-precision float into a new `ArrayBuffer`.\n","title":"encodeFloat64be","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[355,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[355,72]}},{"kind":null,"children":[],"comments":"Serialize a 64-bit little-endian IEEE double-precision float into a new `ArrayBuffer`.\n","title":"encodeFloat64le","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintKindArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","ArrayBuffer","Types"],"ArrayBuffer"]}]}]}]},null]}},"sourceSpan":{"start":[362,1],"name":"/home/jbrock/work/me/purescript-arraybuffer-builder/src/Data/ArrayBuffer/Internal.purs","end":[362,72]}}]}],"resolvedDependencies":{"purescript-exceptions":"6.0.0","purescript-newtype":"5.0.0","purescript-effect":"4.0.0","purescript-control":"6.0.0","purescript-arraybuffer-types":"3.0.2","purescript-either":"6.0.0","purescript-profunctor":"6.0.0","purescript-arrays":"7.0.0","purescript-maybe":"6.0.0","purescript-type-equality":"4.0.1","purescript-exists":"6.0.0","purescript-distributive":"6.0.0","purescript-unfoldable":"6.0.0","purescript-invariant":"6.0.0","purescript-lazy":"6.0.0","purescript-uint":"7.0.0","purescript-float32":"2.0.0","purescript-foldable-traversable":"6.0.0","purescript-tailrec":"6.0.0","purescript-gen":"4.0.0","purescript-functors":"5.0.0","purescript-prelude":"6.0.0","purescript-st":"6.0.0","purescript-bifunctors":"6.0.0","purescript-nonempty":"7.0.0","purescript-contravariant":"6.0.0","purescript-unsafe-coerce":"6.0.0","purescript-refs":"6.0.0","purescript-orders":"6.0.0","purescript-const":"6.0.0","purescript-transformers":"6.0.0","purescript-numbers":"9.0.0","purescript-enums":"6.0.0","purescript-tuples":"7.0.0","purescript-partial":"4.0.0","purescript-identity":"6.0.0","purescript-safe-coerce":"2.0.0","purescript-lists":"7.0.0","purescript-nullable":"6.0.0","purescript-functions":"6.0.0","purescript-arraybuffer":"13.0.0"},"version":"3.0.0","github":["jamesdbrock","purescript-arraybuffer-builder"],"versionTag":"v3.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Data.Semigroup.Generic":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.Functor.Flip":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Control.Monad.Identity.Trans":"purescript-transformers","Data.Monoid.Generic":"purescript-prelude","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Costar":"purescript-functors","Data.HeytingAlgebra.Generic":"purescript-prelude","Data.Functor.Compose":"purescript-functors","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Bounded.Generic":"purescript-prelude","Data.ArrayBuffer.ArrayBuffer.Gen":"purescript-arraybuffer","Safe.Coerce":"purescript-safe-coerce","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.UInt.Gen":"purescript-uint","Data.Boolean":"purescript-prelude","Data.Show.Generic":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-prelude","Data.Array.ST.Iterator":"purescript-arrays","Data.Enum.Generic":"purescript-enums","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Number":"purescript-numbers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.List.Internal":"purescript-lists","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.List.Trans":"purescript-transformers","Data.Ord.Generic":"purescript-prelude","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Number.Format":"purescript-numbers","Data.UInt":"purescript-uint","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.ArrayBuffer.ArrayBuffer":"purescript-arraybuffer","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ring.Generic":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Number.Approximate":"purescript-numbers","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Data.ArrayBuffer.DataView.Gen":"purescript-arraybuffer","Data.Tuple":"purescript-tuples","Data.Functor.Clown":"purescript-functors","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Functor.Product2":"purescript-functors","Data.Exists":"purescript-exists","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor.App":"purescript-functors","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Data.ArrayBuffer.DataView":"purescript-arraybuffer","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Control.Monad.ST.Global":"purescript-st","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Data.Comparison":"purescript-contravariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Data.Float32":"purescript-float32","Control.Comonad.Env.Class":"purescript-transformers","Data.ArrayBuffer.Typed.Gen":"purescript-arraybuffer","Data.ArrayBuffer.Types":"purescript-arraybuffer-types","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Data.ArrayBuffer.Typed":"purescript-arraybuffer","Control.Monad.Except.Trans":"purescript-transformers","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.Float32.Gen":"purescript-float32","Data.Eq.Generic":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Control.Comonad.Trans.Class":"purescript-transformers","Data.Reflectable":"purescript-prelude","Control.Plus":"purescript-control","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Data.Monoid.Multiplicative":"purescript-prelude","Data.Functor.Joker":"purescript-functors","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Generic.Rep":"purescript-prelude","Data.Bifunctor.Join":"purescript-bifunctors","Data.ArrayBuffer.ValueMapping":"purescript-arraybuffer","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.Semiring.Generic":"purescript-prelude","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Control.Monad.ST.Class":"purescript-st","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Control.Monad.Writer":"purescript-transformers","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Profunctor.Choice":"purescript-profunctor","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.14.5"}